var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AllExceptionsFilter.html",[0,0.145,1,2.97]],["body/classes/AllExceptionsFilter.html",[0,0.15,1,4.156,2,1.107,3,0.19,4,0.17,5,0.17,6,4.637,7,3.435,8,4.156,9,6.077,10,0.459,11,1.495,12,3.499,13,5.368,14,5.25,15,6.506,16,0.595,17,3.976,18,1.061,19,0.017,20,0.718,21,0.511,22,0.895,23,6.506,24,1.107,25,3.435,26,0.384,27,3.964,28,2.271,29,0.686,30,3.51,31,4.637,32,3.079,33,3.51,34,3.435,35,3.435,36,0.19,37,1.818,38,2.266,39,3.976,40,3.976,41,3.976,42,3.976,43,4.156,44,5.621,45,3.976,46,3.435,47,2.831,48,3.976,49,3.976,50,3.079,51,4.705,52,3.797,53,5.368,54,3.435,55,3.976,56,3.976,57,2.812,58,2.271,59,2.423,60,3.976,61,0.011,62,0.011]],["title/interfaces/ApiResponse.html",[33,2.508,63,2.713]],["body/interfaces/ApiResponse.html",[3,0.222,4,0.199,5,0.199,10,0.537,19,0.017,21,0.94,22,1.646,33,3.89,36,0.222,43,5.355,47,3.009,52,4.892,58,3.95,59,4.632,61,0.012,62,0.012,63,3.289,64,4.65,65,4.017,66,4.017,67,1.967,68,6.561,69,4.606,70,1.475,71,4.64,72,3.6]],["title/modules/AppModule.html",[73,1.115,74,2.713]],["body/modules/AppModule.html",[0,0.131,3,0.165,4,0.148,5,0.148,19,0.017,26,0.477,29,0.598,36,0.165,61,0.01,62,0.01,73,1.643,74,5.495,75,1.437,76,1.437,77,1.585,78,1.585,79,1.437,80,2.233,81,1.585,82,2.994,83,2.994,84,4.388,85,4.388,86,4.388,87,4.089,88,4.089,89,3.833,90,4.089,91,4.388,92,3.609,93,2.233,94,1.585,95,1.437,96,3.465,97,2.481,98,1.864,99,0.965,100,3.465,101,3.465,102,4.882,103,2.683,104,3.192,105,3.465,106,3.465,107,2.994,108,3.465,109,3.465,110,1.097,111,1.979,112,2.683,113,3.465,114,2.683,115,2.111,116,3.465,117,3.465,118,3.465,119,3.465,120,3.465,121,2.994,122,3.465]],["title/injectables/AtGuard.html",[104,2.508,123,0.863]],["body/injectables/AtGuard.html",[0,0.173,3,0.219,4,0.196,5,0.196,10,0.529,11,1.641,16,0.881,18,1.573,19,0.017,20,1.064,21,0.757,22,1.326,24,1.275,26,0.411,29,0.79,36,0.219,38,1.45,61,0.012,62,0.012,103,3.546,104,3.852,123,1.326,124,1.811,125,3.956,126,3.169,127,5.09,128,5.891,129,1.811,130,4.579,131,7.283,132,4.579,133,5.891,134,5.324,135,4.579,136,3.546,137,3.956,138,2.994,139,2.327,140,1.899,141,3.239,142,5.891,143,4.579,144,4.579,145,4.579,146,1.641,147,1.73,148,4.579]],["title/injectables/AtStrategy.html",[123,0.863,149,2.508]],["body/injectables/AtStrategy.html",[0,0.176,3,0.222,4,0.199,5,0.199,10,0.537,11,1.657,16,0.89,18,1.241,19,0.017,20,0.839,21,0.598,22,1.046,24,1.295,26,0.437,29,0.802,36,0.222,37,2.126,61,0.012,62,0.012,123,1.339,124,1.839,126,3.2,129,2.595,138,3.04,141,3.289,146,1.295,149,3.89,150,4.017,151,5.14,152,5.08,153,2.72,154,5.14,155,4.65,156,5.949,157,4.522,158,4.65,159,4.606,160,4.017,161,4.017,162,4.017,163,3.6,164,1.839,165,4.017,166,4.017,167,4.017,168,3.289]],["title/controllers/AuthController.html",[169,1.325,170,2.713]],["body/controllers/AuthController.html",[0,0.101,3,0.127,4,0.114,5,0.114,10,0.307,11,1.122,16,0.915,18,1.633,19,0.017,20,1.104,21,0.817,22,1.377,24,1.704,26,0.401,28,1.522,29,0.459,36,0.127,37,2.476,38,1.276,47,2.114,58,2.301,61,0.008,62,0.008,69,3.119,70,1.431,95,1.105,104,1.742,139,1.354,140,1.105,146,1.704,153,3.066,164,1.054,169,0.92,170,2.849,171,0.92,172,2.302,173,1.433,174,2.063,175,3.48,176,4.197,177,3.48,178,3.48,179,3.436,180,3.48,181,2.664,182,3.541,183,1.855,184,2.664,185,2.664,186,5.415,187,2.302,188,2.664,189,2.664,190,2.245,191,3.83,192,2.302,193,4.028,194,2.664,195,2.664,196,2.664,197,2.664,198,2.664,199,2.302,200,4.193,201,2.664,202,2.664,203,2.664,204,3.541,205,2.664,206,2.664,207,1.522,208,2.664,209,1.623,210,2.664,211,2.96,212,2.302,213,2.302,214,2.302,215,1.742,216,2.613,217,3.727,218,1.623,219,1.884,220,2.664,221,2.634,222,2.664,223,2.664,224,2.664,225,2.664,226,2.66,227,2.664,228,2.664,229,5.816,230,2.664,231,2.664,232,4.028,233,2.302,234,2.664,235,2.664,236,3.761,237,2.664,238,4.197,239,2.664,240,2.664,241,1.94,242,4.197,243,4.028,244,2.664,245,2.664,246,2.302,247,2.664,248,2.664,249,2.664,250,2.664,251,2.664,252,2.664,253,2.664,254,2.664,255,2.302,256,2.664,257,2.302,258,2.302]],["title/modules/AuthModule.html",[73,1.115,84,2.508]],["body/modules/AuthModule.html",[0,0.154,3,0.195,4,0.175,5,0.175,19,0.017,26,0.462,29,0.704,36,0.195,61,0.011,62,0.011,73,1.79,75,1.693,76,1.693,77,1.868,78,1.868,79,1.693,80,2.817,81,1.868,84,5.075,87,4.299,92,3.795,93,2.499,94,1.868,95,1.693,97,2.777,115,2.488,149,4.613,170,4.356,171,1.888,211,4.299,212,3.528,259,3.528,260,3.528,261,4.084,262,4.613,263,4.299,264,4.084,265,4.084,266,3.162,267,4.084,268,3.528,269,4.084,270,3.528,271,3.528]],["title/injectables/AuthService.html",[123,0.863,211,2.337]],["body/injectables/AuthService.html",[0,0.073,3,0.092,4,0.083,5,0.083,10,0.223,11,0.874,12,1.041,16,0.843,18,1.503,19,0.017,20,1.017,21,0.688,22,1.267,24,1.489,26,0.423,27,1.911,28,1.106,29,0.334,36,0.092,37,0.886,38,2.12,51,1.499,52,1.37,58,1.106,61,0.007,62,0.007,70,1.399,99,0.539,123,0.706,124,0.766,129,1.241,140,1.301,146,1.391,147,1.185,153,2.872,164,0.766,175,2.71,176,2.71,177,2.71,178,2.71,179,2.219,180,2.71,182,2.586,187,2.71,190,1.64,191,4.286,192,2.71,199,2.71,204,2.973,211,1.911,213,1.673,214,1.673,221,3.682,226,3.223,233,1.673,236,4.82,238,1.673,241,2.575,242,4.316,246,1.673,258,3.416,263,3.431,270,1.673,272,1.673,273,1.673,274,2.311,275,3.217,276,1.936,277,1.911,278,1.936,279,1.936,280,1.936,281,1.936,282,1.936,283,3.137,284,1.936,285,3.52,286,1.936,287,3.137,288,1.936,289,3.137,290,1.673,291,1.041,292,1.5,293,0.984,294,0.732,295,2.429,296,1.936,297,1.936,298,1.673,299,1.936,300,1.936,301,1.37,302,1.936,303,1.106,304,1.266,305,1.904,306,4.996,307,1.936,308,2.876,309,2.431,310,3.416,311,2.429,312,2.429,313,1.936,314,4.547,315,1.936,316,3.954,317,1.936,318,1.936,319,1.936,320,2.71,321,1.936,322,1.936,323,3.954,324,3.954,325,1.936,326,1.936,327,3.137,328,3.137,329,2.429,330,2.051,331,1.936,332,1.936,333,1.673,334,1.37,335,1.499,336,4.547,337,1.936,338,3.137,339,1.936,340,1.936,341,1.936,342,1.936,343,2.051,344,1.499,345,3.954,346,3.137,347,1.936,348,1.936,349,3.954,350,1.936,351,1.936,352,1.499,353,1.673,354,1.673,355,3.137,356,1.936,357,1.936,358,1.673,359,1.936,360,1.936,361,3.137,362,3.137,363,1.936,364,1.106,365,3.137,366,3.137,367,1.936,368,3.137,369,1.106,370,1.266,371,1.936,372,1.936,373,1.37,374,1.936,375,1.673,376,1.673,377,1.936,378,3.137,379,1.673]],["title/classes/CreateMatchDto.html",[0,0.145,380,2.337]],["body/classes/CreateMatchDto.html",[0,0.23,2,1.345,3,0.231,4,0.207,5,0.207,10,0.557,16,0.912,19,0.017,21,0.902,26,0.385,36,0.231,61,0.013,62,0.013,67,2.015,70,1.378,183,1.848,380,3.713,381,5.768,382,3.738,383,4.499,384,4.068,385,4.171,386,4.828,387,4.828,388,4.828,389,4.718,390,4.96,391,3.591,392,2.942,393,2.454,394,3.738,395,3.738]],["title/classes/CreateMatchPlayerDto.html",[0,0.145,396,2.713]],["body/classes/CreateMatchPlayerDto.html",[0,0.222,2,1.638,3,0.281,4,0.252,5,0.252,19,0.015,36,0.281,61,0.014,62,0.014,110,1.862,396,4.859,397,2.69,398,5.081,399,4.554]],["title/classes/CreateMessageDto.html",[0,0.145,400,2.191]],["body/classes/CreateMessageDto.html",[0,0.211,2,1.176,3,0.202,4,0.181,5,0.181,10,0.487,16,1.037,18,1.127,19,0.017,20,0.762,21,0.916,22,0.95,26,0.353,36,0.202,61,0.012,62,0.012,67,1.847,70,1.578,129,2.21,183,1.28,294,1.595,391,3.368,393,2.145,400,3.191,401,5.038,402,2.76,403,4.061,404,3.387,405,6.261,406,5.757,407,4.221,408,5.16,409,4.221,410,5.586,411,4.221,412,4.221,413,4.221,414,4.221,415,3.646,416,3.646,417,4.221,418,4.221,419,4.221,420,4.221,421,4.221,422,4.221,423,4.221,424,4.221]],["title/classes/CreateTerrainDto.html",[0,0.145,425,2.337]],["body/classes/CreateTerrainDto.html",[0,0.221,2,1.031,3,0.177,4,0.159,5,0.159,10,0.427,16,1.087,19,0.017,21,0.955,22,1.151,26,0.323,36,0.177,61,0.011,62,0.011,67,1.691,70,1.517,183,2.203,383,4.176,385,3.199,389,3.959,390,3.617,391,3.955,393,1.882,394,2.867,395,4.535,425,3.116,426,6.352,427,2.867,428,5.06,429,4.142,430,5.06,431,5.06,432,5.06,433,4.535,434,5.06,435,3.703,436,3.703,437,3.199,438,3.703,439,4.481,440,6.068,441,3.703,442,3.703,443,3.703,444,3.703,445,3.703,446,3.703,447,3.959]],["title/injectables/CustomResponseInterceptor.html",[123,0.863,448,2.97]],["body/injectables/CustomResponseInterceptor.html",[0,0.147,3,0.186,4,0.167,5,0.167,8,3.023,10,0.451,11,1.477,16,0.584,18,1.042,19,0.017,20,0.705,21,0.502,22,0.879,24,1.087,26,0.408,29,0.673,30,2.553,31,5.579,33,2.553,34,3.373,35,3.373,36,0.186,38,1.906,43,4.105,44,3.373,47,2.307,51,4.105,52,4.258,57,2.761,58,3.028,59,3.231,61,0.011,62,0.011,70,0.806,123,1.193,124,1.544,134,5,136,4.105,146,1.677,147,1.475,309,1.619,448,4.105,449,4.58,450,3.373,451,6.02,452,3.904,453,6.02,454,6.457,455,3.904,456,6.02,457,5.302,458,6.02,459,6.02,460,3.373,461,3.373,462,3.904,463,3.904,464,3.904,465,3.904,466,3.904,467,3.904,468,3.904,469,5.302,470,3.904,471,3.904,472,3.904,473,3.904,474,3.904,475,3.904]],["title/classes/EventsGateway.html",[0,0.145,476,2.713]],["body/classes/EventsGateway.html",[0,0.103,2,0.759,3,0.13,4,0.117,5,0.117,8,3.174,10,0.315,11,1.142,16,0.879,18,1.462,19,0.017,20,1.061,21,0.793,22,1.233,24,1.372,25,2.356,26,0.416,36,0.13,38,1.735,50,4.957,61,0.009,62,0.009,67,1.356,70,1.273,114,4.957,115,1.661,129,1.079,139,1.386,146,1.142,153,2.043,157,2.68,159,4.548,168,1.929,174,2.111,183,1.243,190,2.272,226,1.247,292,1.049,305,2.372,308,1.467,309,1.13,334,1.929,400,2.342,401,1.929,403,3.002,404,3.136,406,2.356,416,2.356,476,2.9,477,2.111,478,4.926,479,4.926,480,4.1,481,4.1,482,4.1,483,2.727,484,3.525,485,3.657,486,3.657,487,4.1,488,4.926,489,4.1,490,6.865,491,4.926,492,2.727,493,4.926,494,4.1,495,2.727,496,4.1,497,4.1,498,2.727,499,2.727,500,4.1,501,2.356,502,2.356,503,2.727,504,2.727,505,1.783,506,2.727,507,2.727,508,2.111,509,3.174,510,2.727,511,2.727,512,2.727,513,2.727,514,2.356,515,2.727,516,5.479,517,2.356,518,2.727,519,2.727,520,2.727,521,2.727,522,2.65,523,2.727,524,2.727,525,2.356,526,2.727,527,1.929,528,2.727,529,4.1,530,1.783,531,2.727,532,2.727,533,4.1,534,2.727,535,2.727,536,2.727,537,2.111,538,2.727,539,2.727,540,4.926,541,2.727,542,4.1,543,2.727,544,2.727,545,2.727,546,2.727,547,2.727]],["title/modules/EventsModule.html",[73,1.115,85,2.508]],["body/modules/EventsModule.html",[0,0.164,3,0.207,4,0.185,5,0.185,19,0.017,26,0.468,29,0.747,36,0.207,47,1.884,61,0.012,62,0.012,73,1.843,75,1.795,76,1.795,77,1.98,78,1.98,79,1.795,80,2.598,81,1.98,85,4.95,88,4.371,90,4.371,92,3.858,93,2.598,94,1.98,95,1.795,97,2.887,98,2.329,99,1.206,115,2.638,168,3.062,266,3.352,268,3.741,271,3.741,476,4.018,527,3.062,548,4.33,549,4.33,550,4.33,551,4.33,552,4.33,553,2.831,554,4.33,555,4.33]],["title/controllers/GeminiController.html",[169,1.325,556,2.713]],["body/controllers/GeminiController.html",[0,0.16,3,0.203,4,0.182,5,0.182,10,0.49,11,1.562,12,2.283,16,0.839,18,1.497,19,0.017,20,1.012,21,0.546,22,1.262,24,1.562,26,0.422,29,0.732,36,0.203,61,0.012,62,0.012,140,1.76,146,1.562,169,1.466,171,1.466,173,2.283,183,1.701,207,3.203,209,2.586,216,2.283,218,2.586,305,2.044,308,2.283,364,2.425,369,3.203,370,2.775,505,2.775,556,3.966,557,3.667,558,4.245,559,5.607,560,4.844,561,4.245,562,5.607,563,4.245,564,5.171,565,4.245,566,6.279,567,4.724,568,5.607,569,4.245,570,2.425,571,3.667,572,3.826,573,3.667,574,4.245,575,4.245,576,4.245,577,4.245,578,4.245,579,4.245,580,4.245,581,4.245]],["title/classes/GeminiMessageDto.html",[0,0.145,567,2.713]],["body/classes/GeminiMessageDto.html",[0,0.205,2,1.509,3,0.259,4,0.232,5,0.232,10,0.625,16,0.811,19,0.016,21,0.697,26,0.342,36,0.259,61,0.014,62,0.014,67,2.163,70,1.35,183,1.643,391,3.781,392,3.301,393,2.753,402,3.542,403,4.283,567,4.628,582,5.652,583,5.417]],["title/modules/GeminiModule.html",[73,1.115,86,2.508]],["body/modules/GeminiModule.html",[0,0.167,3,0.211,4,0.189,5,0.189,19,0.017,20,1.039,26,0.464,29,0.762,36,0.211,61,0.012,62,0.012,73,1.861,75,1.832,76,1.832,77,2.021,78,2.021,79,1.832,80,2.928,81,2.021,86,4.716,93,2.633,94,2.021,95,1.832,97,2.246,98,2.377,99,1.231,171,1.989,292,1.13,293,2.246,530,2.889,556,4.529,572,4.395,573,3.817,584,3.817,585,3.817,586,4.418,587,4.418,588,3.288,589,2.505,590,3.125,591,4.457,592,4.418,593,3.508,594,3.421,595,2.633]],["title/injectables/GeminiService.html",[123,0.863,572,2.337]],["body/injectables/GeminiService.html",[0,0.099,3,0.126,4,0.113,5,0.113,10,0.304,11,1.112,12,1.415,16,0.865,18,1.436,19,0.017,20,1.099,21,0.783,22,1.211,24,1.343,26,0.399,27,1.604,28,1.503,29,0.454,36,0.126,37,1.203,38,1.928,47,1.737,58,1.503,61,0.008,62,0.008,67,1.32,70,1.463,99,0.733,123,0.898,124,1.041,129,1.579,140,1.091,146,1.343,153,2.524,190,1.655,191,2.823,226,2.645,241,1.922,274,3.215,277,2.938,291,1.415,292,1.021,293,1.337,294,0.994,303,3.074,304,1.721,305,2.932,308,1.415,309,1.999,310,2.273,311,2.038,312,2.038,330,1.721,364,1.503,369,1.503,370,1.721,403,2.938,461,4.649,517,4.165,522,1.415,560,3.448,571,2.273,572,2.432,589,1.737,590,1.861,596,2.038,597,4.091,598,3.991,599,3.991,600,2.632,601,5.381,602,3.733,603,2.632,604,3.991,605,3.991,606,2.632,607,3.991,608,2.632,609,3.991,610,2.632,611,1.604,612,1.604,613,2.632,614,2.038,615,2.632,616,2.632,617,2.632,618,2.273,619,2.273,620,3.991,621,2.632,622,2.038,623,3.991,624,3.991,625,3.991,626,2.632,627,3.991,628,3.448,629,2.823,630,3.991,631,2.61,632,2.632,633,2.632,634,1.861,635,1.861,636,2.273,637,3.153,638,1.721,639,2.61,640,1.721,641,2.632,642,2.632,643,2.632,644,2.632,645,2.632,646,2.632,647,2.632,648,1.604,649,2.273,650,2.273,651,2.632,652,2.632,653,2.632,654,2.632,655,2.632,656,2.632,657,2.632,658,2.632]],["title/classes/LoginDto.html",[0,0.145,182,2.508]],["body/classes/LoginDto.html",[0,0.192,2,1.417,3,0.243,4,0.218,5,0.218,10,0.587,16,0.942,19,0.016,21,0.81,26,0.321,36,0.243,61,0.013,62,0.013,67,2.082,70,1.474,182,4.117,183,1.91,241,3.293,343,4.471,390,4.837,391,3.678,392,3.101,393,2.586,659,4.396,660,4.396,661,5.089,662,4.396,663,5.089,664,5.44,665,4.396,666,4.396]],["title/controllers/MailerController.html",[169,1.325,667,2.713]],["body/controllers/MailerController.html",[0,0.209,3,0.264,4,0.237,5,0.237,19,0.016,26,0.418,29,0.955,36,0.264,61,0.014,62,0.014,139,2.814,140,2.296,169,1.913,171,1.913,173,2.978,275,4.053,667,4.689,668,4.783,669,5.537,670,4.783,671,5.537]],["title/modules/MailerModule.html",[73,1.115,87,2.337]],["body/modules/MailerModule.html",[0,0.184,3,0.232,4,0.208,5,0.208,19,0.016,26,0.423,29,0.838,36,0.232,61,0.013,62,0.013,73,1.946,75,2.015,76,2.015,77,2.222,78,2.222,79,2.015,80,3.063,81,3.063,87,4.575,93,2.798,94,2.222,95,2.015,171,2.114,275,4.457,667,4.737,670,4.198,672,4.198,673,4.198,674,4.198,675,4.859,676,4.859]],["title/injectables/MailerService.html",[123,0.863,275,2.191]],["body/injectables/MailerService.html",[0,0.168,3,0.212,4,0.19,5,0.19,10,0.513,11,1.609,14,3.84,16,0.865,18,1.186,19,0.017,20,0.802,21,0.571,22,1,24,1.609,26,0.405,29,0.767,36,0.212,38,1.83,61,0.012,62,0.012,123,1.3,124,1.758,146,1.238,147,1.679,153,2.662,174,3.441,226,2.033,275,3.301,292,1.137,329,4.474,330,3.778,677,3.84,678,6.799,679,6.421,680,4.444,681,4.444,682,4.809,683,4.444,684,4.992,685,4.444,686,4.444,687,6.421,688,4.444,689,4.444,690,4.444,691,4.444,692,4.444,693,4.444,694,5.779,695,4.444,696,4.444,697,4.444,698,4.444]],["title/classes/Match.html",[0,0.145,110,1.215]],["body/classes/Match.html",[0,0.147,2,1.082,3,0.185,4,0.166,5,0.166,10,0.448,16,0.964,19,0.017,21,0.944,26,0.333,36,0.287,38,1.23,61,0.011,62,0.011,67,1.747,99,1.082,110,1.673,147,2.773,164,1.536,183,1.954,190,2.489,292,1.352,294,1.467,309,2.19,383,4.472,384,3.658,522,3.229,589,2.299,595,2.416,611,2.367,612,2.367,640,3.926,699,2.747,700,4.213,701,5.12,702,3.884,703,4.799,704,4.546,705,3.018,706,3.884,707,3.884,708,3.884,709,4.407,710,2.54,711,3.219,712,3.007,713,2.747,714,2.367,715,3.356]],["title/controllers/MatchController.html",[169,1.325,716,2.713]],["body/controllers/MatchController.html",[0,0.135,3,0.17,4,0.153,5,0.153,10,0.411,11,1.387,16,0.929,18,1.532,19,0.017,20,1.036,21,0.64,22,1.291,24,1.73,26,0.392,29,0.615,36,0.17,61,0.01,62,0.01,70,1.463,110,1.128,139,1.811,140,1.477,146,1.886,169,1.231,171,1.231,173,1.917,183,1.884,207,3.278,209,3.496,216,2.678,217,3.033,218,2.171,380,4.32,404,2.53,485,3.278,570,2.035,716,3.521,717,3.078,718,4.957,719,4.061,720,3.255,721,4.978,722,3.563,723,3.563,724,3.441,725,3.078,726,3.563,727,2.171,728,4.978,729,4.301,730,3.563,731,3.563,732,3.563,733,3.563,734,2.52,735,2.171,736,3.078,737,2.171,738,2.759,739,3.078,740,3.563,741,3.563,742,3.563,743,3.563,744,3.563,745,3.078,746,3.563,747,2.52,748,2.759,749,4.058,750,3.563,751,2.52,752,2.52,753,3.563]],["title/modules/MatchModule.html",[73,1.115,88,2.337]],["body/modules/MatchModule.html",[0,0.153,3,0.193,4,0.173,5,0.173,19,0.017,20,1.107,26,0.461,29,0.699,36,0.193,61,0.011,62,0.011,73,1.783,75,1.68,76,1.68,77,1.853,78,1.853,79,1.68,80,2.805,81,2.805,88,4.511,89,4.021,93,2.486,94,1.853,95,1.68,97,2.762,98,2.179,99,1.128,110,1.283,111,2.314,112,3.136,171,1.878,292,1.036,293,2.059,397,1.853,485,4.341,530,2.649,588,3.105,589,1.763,590,2.865,593,3.738,594,3.136,595,2.805,714,3.312,716,4.339,736,3.5,754,3.5,755,4.051,756,3.5,757,3.5,758,4.051,759,4.051,760,3.5,761,3.554,762,3.136]],["title/classes/MatchPlayer.html",[0,0.145,705,2.191]],["body/classes/MatchPlayer.html",[0,0.151,2,1.113,3,0.191,4,0.171,5,0.171,10,0.461,16,0.912,19,0.017,21,0.921,26,0.385,36,0.291,38,1.266,61,0.011,62,0.011,67,1.781,71,4.612,99,1.113,110,2.155,147,2.649,164,1.581,183,1.848,190,2.703,292,1.378,294,1.51,397,2.982,404,3.314,522,2.897,595,2.464,700,3.984,701,4.612,703,4.263,704,4.263,705,3.077,709,4.263,710,2.614,711,3.282,713,2.827,763,4.612,764,2.827,765,4.718,766,3.997,767,3.997,768,3.997,769,2.436,770,3.095,771,3.81,772,3.453,773,3.997,774,4.171,775,3.997]],["title/controllers/MatchPlayerController.html",[169,1.325,776,2.713]],["body/controllers/MatchPlayerController.html",[0,0.106,3,0.134,4,0.12,5,0.12,10,0.323,11,1.164,12,1.505,16,0.932,18,1.585,19,0.017,20,1.072,21,0.764,22,1.337,24,1.735,26,0.316,29,0.482,36,0.134,61,0.009,62,0.009,70,1.589,110,1.323,111,3.688,139,1.422,140,1.16,146,1.89,169,0.966,171,0.966,173,1.505,183,1.89,190,3.005,207,2.387,209,1.705,216,3.194,217,2.546,218,1.705,364,1.598,369,1.598,370,1.829,397,2.953,570,1.598,720,2.732,724,2.82,727,1.705,734,1.979,735,3.048,739,2.417,747,1.979,751,1.979,752,1.979,776,2.956,777,2.417,778,4.179,779,4.179,780,4.179,781,4.794,782,3.61,783,4.179,784,2.797,785,2.797,786,2.797,787,6.786,788,2.797,789,2.797,790,2.797,791,2.797,792,2.797,793,3.61,794,2.797,795,2.417,796,4.179,797,2.797,798,2.797,799,2.797,800,2.797,801,2.417,802,2.417,803,2.858,804,2.166,805,2.797,806,2.797,807,2.417,808,2.797,809,2.797,810,2.797,811,2.797,812,2.797,813,2.797,814,2.797,815,2.797,816,2.797,817,2.797,818,2.797,819,2.797,820,2.797,821,2.417,822,2.797,823,2.166,824,2.797,825,3.271,826,2.797,827,2.797]],["title/modules/MatchPlayerModule.html",[73,1.115,89,2.191]],["body/modules/MatchPlayerModule.html",[0,0.156,3,0.197,4,0.176,5,0.176,19,0.017,20,1.117,26,0.456,29,0.71,36,0.197,61,0.011,62,0.011,73,1.797,75,1.707,76,1.707,77,1.883,78,1.883,79,1.707,80,2.828,81,2.828,89,4.124,93,2.513,94,1.883,95,1.707,97,2.092,98,2.214,99,1.147,110,1.958,111,2.352,171,1.898,292,1.053,293,2.092,397,1.883,530,2.692,588,3.139,593,3.768,595,2.828,705,2.352,714,3.348,762,3.188,769,2.509,771,3.886,776,4.374,803,4.352,804,3.188,828,3.557,829,3.557,830,3.557,831,4.117,832,4.117,833,3.557,834,3.557,835,4.117]],["title/injectables/MatchPlayerService.html",[123,0.863,803,2.191]],["body/injectables/MatchPlayerService.html",[0,0.059,3,0.075,4,0.067,5,0.067,10,0.181,11,0.733,12,0.843,16,0.805,18,1.369,19,0.017,20,1.011,21,0.659,22,1.154,24,1.499,26,0.34,27,2.433,28,0.895,29,0.27,30,3.154,36,0.075,37,2.345,38,1.832,46,1.353,57,1.863,59,2.433,61,0.006,62,0.006,70,1.471,71,2.41,72,1.213,89,0.895,92,0.843,99,0.436,110,2.003,111,3.199,112,1.213,123,0.593,124,0.62,129,1.042,146,1.612,147,0.592,153,2.845,190,2.821,226,2.939,241,1.268,266,1.213,274,2.941,277,2.076,291,0.843,292,1.312,293,0.796,294,0.592,303,2.544,304,1.024,305,1.641,308,3.403,309,2.623,311,2.039,312,1.213,333,2.943,334,3.15,344,3.971,352,3.092,353,2.275,354,1.353,364,0.895,369,0.895,373,1.108,397,2.561,404,2.263,415,1.353,439,2.228,525,1.353,537,1.213,570,1.504,611,0.955,612,0.955,631,2.228,634,3.15,635,2.41,637,2.228,639,2.912,640,1.722,705,3.55,724,2.03,727,0.955,735,1.605,765,3.092,769,0.955,781,3.45,782,2.275,795,2.275,801,1.353,803,1.504,825,1.722,833,1.353,834,1.353,836,1.353,837,3.407,838,3.407,839,2.634,840,2.634,841,3.407,842,1.567,843,2.638,844,1.567,845,2.634,846,1.567,847,5.6,848,1.567,849,1.567,850,1.567,851,1.567,852,2.634,853,1.567,854,2.634,855,1.567,856,1.567,857,1.567,858,1.567,859,1.567,860,1.213,861,1.567,862,1.567,863,2.634,864,1.567,865,1.567,866,2.634,867,1.567,868,2.634,869,1.567,870,2.943,871,1.567,872,1.567,873,1.567,874,1.353,875,1.567,876,1.567,877,2.275,878,2.634,879,2.275,880,2.039,881,1.567,882,2.634,883,2.275,884,2.634,885,1.863,886,1.605,887,2.634,888,1.567,889,1.567,890,1.567,891,1.567,892,1.567,893,3.407,894,3.407,895,2.638,896,1.567,897,3.407,898,2.634,899,2.634,900,4.824,901,2.634,902,3.407,903,2.943,904,3.993,905,4.453,906,1.567,907,2.634,908,1.567,909,1.567,910,1.567,911,1.567,912,1.567,913,2.634,914,2.634,915,1.567,916,2.638,917,1.108,918,1.108,919,1.108,920,1.213]],["title/injectables/MatchService.html",[123,0.863,485,2.191]],["body/injectables/MatchService.html",[0,0.088,3,0.111,4,0.1,5,0.1,10,0.269,11,1.014,16,0.82,18,1.349,19,0.017,20,1.211,21,0.65,22,1.137,24,1.407,26,0.407,27,1.422,28,1.333,29,0.403,36,0.111,37,2.311,38,1.6,61,0.008,62,0.008,70,1.329,99,0.65,110,0.739,111,1.333,123,0.819,124,0.923,129,1.44,140,0.968,146,1.407,147,0.882,153,2.826,190,2.782,226,2.867,241,2.433,274,3.347,277,2.726,291,1.256,292,0.597,293,1.186,294,0.882,303,3.993,304,1.526,305,2.433,308,1.256,309,1.509,320,2.017,335,1.808,344,1.808,380,3.82,383,1.422,384,2.726,397,1.068,404,1.186,485,2.079,589,1.584,590,1.651,602,3.464,622,1.808,631,3.304,634,2.575,635,2.575,636,3.145,637,4.099,638,2.38,639,4.212,640,2.925,718,3.145,724,2.784,737,1.422,738,1.808,760,2.017,803,3.462,804,1.808,843,2.818,860,1.808,877,3.145,879,2.017,883,3.145,885,4.105,886,3.536,903,2.017,921,2.017,922,5.053,923,3.64,924,3.64,925,2.335,926,2.335,927,3.64,928,2.335,929,2.335,930,3.64,931,2.335,932,3.64,933,2.335,934,3.64,935,2.335,936,3.64,937,2.335,938,2.335,939,3.64,940,2.335,941,2.335,942,2.335,943,2.335,944,2.335,945,2.335,946,2.335,947,1.808,948,2.335,949,2.335,950,3.64,951,2.335,952,2.335,953,2.017,954,2.335,955,2.335,956,2.335,957,4.474,958,1.808,959,2.335,960,3.64,961,3.64,962,2.335]],["title/classes/Message.html",[0,0.145,47,1.669]],["body/classes/Message.html",[0,0.205,2,1.122,3,0.192,4,0.172,5,0.172,10,0.465,16,0.979,19,0.017,21,0.923,26,0.444,36,0.292,38,1.276,47,2.357,61,0.011,62,0.011,67,1.791,70,1.35,99,1.122,110,2.161,147,1.522,164,1.594,183,1.984,190,2.536,292,1.746,293,2.048,294,1.522,301,2.85,389,3.12,391,2.167,393,2.048,403,3.728,404,3.109,509,4.737,522,2.913,553,2.635,595,2.477,700,3.541,703,3.541,704,4.277,709,4.695,710,2.635,711,3.3,713,2.85,769,2.455,963,2.85,964,4.029,965,4.029,966,4.029,967,4.029,968,4.029,969,3.12,970,3.481]],["title/controllers/MessageController.html",[169,1.325,971,2.713]],["body/controllers/MessageController.html",[0,0.129,3,0.163,4,0.146,5,0.146,10,0.394,11,1.347,16,1,18,1.718,19,0.017,20,1.162,21,0.784,22,1.448,24,1.861,26,0.385,29,0.59,36,0.163,47,1.487,61,0.01,62,0.01,70,1.472,139,1.737,140,1.417,146,1.861,169,1.181,171,1.181,173,1.838,183,2.026,207,2.762,209,3.418,400,3.816,484,3.204,505,3.161,570,1.952,719,3.988,720,3.161,724,3.395,727,2.083,734,2.418,735,2.083,737,2.083,747,3.42,748,2.646,751,3.42,752,2.418,793,4.177,821,2.953,823,3.743,917,2.418,919,2.418,971,3.42,972,2.953,973,2.6,974,4.835,975,4.177,976,2.953,977,3.418,978,3.418,979,3.418,980,3.418,981,4.835,982,3.418,983,4.835,984,3.418,985,4.587,986,3.418,987,2.953,988,2.083,989,3.418,990,2.953,991,3.418,992,3.418,993,3.418,994,3.418,995,3.418,996,3.418,997,3.418]],["title/modules/MessageModule.html",[73,1.115,90,2.337]],["body/modules/MessageModule.html",[0,0.172,3,0.217,4,0.195,5,0.195,19,0.017,20,0.822,26,0.448,29,0.785,36,0.217,47,1.98,61,0.012,62,0.012,73,1.888,75,1.887,76,1.887,77,2.082,78,2.082,79,1.887,80,2.97,81,2.97,90,4.507,93,2.684,94,2.082,95,1.887,97,2.313,98,2.448,99,1.268,171,2.027,484,4.417,553,3.837,593,2.774,595,2.082,971,4.594,987,3.932,998,3.932,999,3.932,1000,3.932,1001,4.552,1002,4.552,1003,3.932,1004,4.552]],["title/injectables/MessageService.html",[123,0.863,484,2.191]],["body/injectables/MessageService.html",[0,0.118,3,0.149,4,0.133,5,0.133,10,0.359,11,1.26,16,1,18,1.729,19,0.017,20,1.206,21,0.833,22,1.457,24,1.906,26,0.409,29,0.537,36,0.149,37,2.069,47,2.701,61,0.009,62,0.009,70,1.379,99,0.868,123,1.018,124,1.232,129,1.789,146,1.804,153,2.685,190,2.208,226,2.069,274,2.971,291,1.675,294,1.177,303,1.779,305,1.5,373,2.203,400,3.546,403,2.756,404,2.971,439,4.562,484,2.584,505,2.958,509,2.412,639,2.037,719,3.822,720,2.958,724,3.291,727,2.756,737,1.898,823,3.502,916,4.526,917,3.199,918,2.203,919,3.199,920,2.412,973,2.433,975,3.908,976,3.908,985,4.369,988,1.898,1003,2.691,1005,2.691,1006,4.523,1007,3.115,1008,3.115,1009,4.523,1010,3.115,1011,3.115,1012,4.523,1013,3.115,1014,3.115,1015,3.115,1016,3.115,1017,3.115,1018,3.115,1019,3.115,1020,3.115,1021,3.115,1022,3.115,1023,3.115,1024,3.115,1025,3.115,1026,3.115,1027,3.115,1028,3.115]],["title/classes/RtGuard.html",[0,0.145,219,2.713]],["body/classes/RtGuard.html",[0,0.208,2,1.536,3,0.263,4,0.236,5,0.236,16,0.825,19,0.016,26,0.348,36,0.263,61,0.014,62,0.014,126,3.558,127,5.714,129,2.802,137,4.766,138,3.607,141,3.902,179,4.678,219,4.678,1029,4.766,1030,5.516]],["title/injectables/RtStrategy.html",[123,0.863,262,2.508]],["body/injectables/RtStrategy.html",[0,0.167,3,0.212,4,0.19,5,0.19,10,0.511,11,1.606,16,0.863,18,1.183,19,0.017,20,0.8,21,0.57,22,0.997,24,1.234,26,0.429,29,0.764,30,4.441,32,3.431,36,0.212,37,2.027,38,1.403,61,0.012,62,0.012,123,1.298,124,1.753,126,3.102,129,2.536,138,2.897,141,3.134,146,1.234,147,1.674,151,4.983,152,4.965,153,2.659,154,4.983,159,5.258,160,3.828,161,3.828,162,3.828,163,3.431,165,3.828,166,3.828,167,3.828,179,4.079,200,4.466,262,3.771,285,3.431,527,3.134,1031,3.828,1032,4.431,1033,5.768,1034,4.431,1035,4.431,1036,4.431,1037,4.431,1038,4.431]],["title/classes/SendMailDto.html",[0,0.145,682,2.713]],["body/classes/SendMailDto.html",[0,0.2,2,1.472,3,0.252,4,0.226,5,0.226,10,0.61,16,1.04,19,0.016,21,0.894,36,0.252,61,0.013,62,0.013,67,2.131,70,1.558,329,5.384,330,4.547,682,4.558,1039,6.254,1040,4.565,1041,5.285,1042,5.285,1043,5.285]],["title/classes/SignupDto.html",[0,0.145,204,2.508]],["body/classes/SignupDto.html",[0,0.211,2,1.176,3,0.202,4,0.181,5,0.181,10,0.487,16,1.037,19,0.016,20,1.13,21,0.891,22,1.257,26,0.395,36,0.202,61,0.012,62,0.012,67,1.847,70,1.522,183,2.102,204,3.653,241,3.015,343,4.094,390,4.714,391,3.728,392,2.572,393,2.839,447,4.848,648,4.34,660,3.646,662,3.646,664,4.826,665,3.646,666,3.646,886,3.815,1044,3.646,1045,4.221,1046,4.221,1047,4.221,1048,4.221,1049,4.221,1050,4.221,1051,4.221,1052,4.221,1053,4.221,1054,3.646,1055,4.221,1056,3.646,1057,3.646,1058,4.221,1059,4.221,1060,4.221]],["title/classes/Terrain.html",[0,0.145,589,1.669]],["body/classes/Terrain.html",[0,0.112,2,0.828,3,0.142,4,0.127,5,0.127,10,0.343,16,1.064,19,0.017,21,0.971,26,0.276,36,0.248,38,0.942,61,0.009,62,0.009,67,1.446,70,1.484,99,0.828,110,1.385,147,2.853,164,1.176,183,2.156,292,1.119,294,1.123,309,1.813,383,4.202,395,4.015,428,4.48,429,3.668,430,4.48,431,4.48,432,4.48,433,4.015,434,4.48,439,4.703,522,2.352,589,1.903,595,2,611,1.812,612,1.812,629,3.668,638,3.391,700,4.306,701,5.222,703,4.166,704,3.738,709,4.75,710,1.944,711,2.664,713,2.103,761,1.944,1061,2.103,1062,2.974,1063,2.974,1064,2.974,1065,2.974,1066,5.186,1067,2.974,1068,2.974,1069,2.974,1070,2.974,1071,2.974,1072,2.974,1073,2.974,1074,2.302,1075,2.569]],["title/controllers/TerrainController.html",[169,1.325,1076,2.713]],["body/controllers/TerrainController.html",[0,0.128,3,0.161,4,0.145,5,0.145,10,0.39,11,1.336,16,0.959,18,1.62,19,0.017,20,1.096,21,0.617,22,1.366,24,1.785,26,0.404,29,0.583,36,0.161,61,0.01,62,0.01,70,1.322,139,1.718,140,1.401,146,1.907,169,1.168,171,1.168,173,1.818,183,1.944,207,2.74,209,3.397,215,3.136,216,1.818,217,3.397,218,2.059,292,1.703,384,2.923,425,4.056,570,1.931,589,1.471,719,3.968,720,3.136,724,3.084,725,2.92,727,2.059,734,2.391,735,2.059,737,2.059,745,2.92,747,2.391,748,2.617,751,2.391,752,2.391,807,4.144,973,2.58,988,2.059,990,2.92,1076,3.393,1077,2.92,1078,4.144,1079,4.796,1080,2.92,1081,3.38,1082,3.38,1083,3.38,1084,2.92,1085,3.38,1086,3.38,1087,3.38,1088,4.796,1089,3.38,1090,3.397,1091,2.92,1092,3.714,1093,3.968,1094,3.38,1095,3.38,1096,3.38,1097,3.38,1098,3.38,1099,3.38,1100,3.38,1101,3.38,1102,3.38,1103,3.38,1104,3.38]],["title/modules/TerrainModule.html",[73,1.115,91,2.508]],["body/modules/TerrainModule.html",[0,0.171,3,0.217,4,0.194,5,0.194,19,0.017,20,1.057,26,0.459,29,0.783,36,0.217,61,0.012,62,0.012,73,1.885,75,1.881,76,1.881,77,2.075,78,2.075,79,1.881,80,2.966,81,2.075,91,4.75,93,2.679,94,2.075,95,1.881,97,2.306,98,2.441,99,1.264,110,1.437,171,2.023,589,1.975,593,3.569,594,3.514,595,2.679,714,3.569,761,3.83,762,3.514,769,2.765,1076,4.587,1090,4.427,1091,3.92,1105,3.92,1106,3.92,1107,4.538,1108,4.538,1109,3.92]],["title/injectables/TerrainService.html",[123,0.863,1090,2.337]],["body/injectables/TerrainService.html",[0,0.097,3,0.123,4,0.11,5,0.11,10,0.296,11,1.091,12,1.382,16,0.902,18,1.528,19,0.017,20,1.033,21,0.683,22,1.288,24,1.594,26,0.418,27,3.239,28,1.467,29,0.443,36,0.123,37,2.617,38,1.504,59,1.565,61,0.008,62,0.008,70,1.245,99,0.715,110,0.813,123,0.882,124,1.016,129,1.55,146,1.801,147,0.971,153,2.983,226,2.869,274,3.188,291,1.382,292,1.36,294,0.971,303,2.714,305,1.887,308,2.555,309,1.97,352,1.989,364,1.467,369,1.467,370,1.68,379,3.385,384,2.388,425,3.675,439,2.562,589,2.729,602,3.034,622,1.989,628,4.104,629,4.048,631,1.68,637,1.68,638,2.562,719,3.475,724,1.992,737,1.565,769,1.565,843,3.678,860,1.989,916,3.034,917,1.817,918,1.817,919,1.817,920,1.989,947,3.034,973,2.859,988,1.565,1078,3.385,1080,3.385,1084,3.385,1090,2.388,1092,3.034,1093,3.106,1109,2.219,1110,2.219,1111,3.919,1112,3.919,1113,2.569,1114,2.569,1115,2.569,1116,2.569,1117,2.569,1118,3.919,1119,2.569,1120,3.919,1121,2.569,1122,2.569,1123,2.569,1124,4.104,1125,4.104,1126,4.751,1127,3.919,1128,4.104,1129,2.569,1130,2.569,1131,2.569,1132,2.569,1133,2.569,1134,2.569,1135,3.919,1136,2.569,1137,4.751,1138,2.569,1139,2.569,1140,2.569,1141,2.569,1142,2.569,1143,2.569]],["title/injectables/TokenService.html",[123,0.863,263,2.337]],["body/injectables/TokenService.html",[0,0.108,3,0.137,4,0.122,5,0.122,10,0.33,11,1.184,16,0.897,18,1.6,19,0.017,20,1.082,21,0.771,22,1.349,24,1.563,26,0.422,29,0.493,36,0.137,38,1.605,59,1.743,61,0.009,62,0.009,70,1.563,99,0.797,114,4.864,115,1.743,123,0.956,124,1.132,129,1.681,140,1.186,146,0.797,153,2.959,164,1.132,168,2.024,190,2.77,191,4.726,200,5.286,221,1.871,226,2.742,241,2.887,255,2.472,257,2.472,263,2.589,274,2.852,277,3.089,285,2.215,290,2.472,291,1.539,292,0.732,293,1.454,294,1.081,295,3.29,304,1.871,305,2.046,308,1.539,309,1.186,373,3.006,375,2.472,376,2.472,527,3.586,564,3.29,648,4.16,1144,2.472,1145,4.25,1146,5.07,1147,4.25,1148,5.07,1149,2.861,1150,2.861,1151,4.25,1152,2.861,1153,2.861,1154,2.861,1155,4.25,1156,2.861,1157,2.861,1158,2.861,1159,4.345,1160,2.861,1161,4.25,1162,2.861,1163,4.25,1164,4.25,1165,2.861,1166,2.861,1167,4.25,1168,2.861,1169,4.25,1170,4.25,1171,2.861]],["title/classes/UpdateMatchDto.html",[0,0.145,749,2.713]],["body/classes/UpdateMatchDto.html",[0,0.211,2,1.553,3,0.266,4,0.239,5,0.239,19,0.016,26,0.42,36,0.266,61,0.014,62,0.014,126,3.581,164,2.206,380,3.399,382,4.318,738,4.318,749,4.709,973,3,1172,4.818,1173,6.658,1174,3.945,1175,3.647]],["title/classes/UpdateMatchPlayerDto.html",[0,0.145,825,2.508]],["body/classes/UpdateMatchPlayerDto.html",[0,0.208,2,1.536,3,0.263,4,0.236,5,0.236,19,0.016,26,0.417,36,0.263,61,0.014,62,0.014,110,2.094,126,3.558,164,2.182,396,3.902,397,2.523,399,4.271,825,4.325,973,2.967,1174,3.902,1175,3.607,1176,4.766,1177,6.614,1178,5.516]],["title/classes/UpdateMessageDto.html",[0,0.145,985,2.508]],["body/classes/UpdateMessageDto.html",[0,0.211,2,1.553,3,0.266,4,0.239,5,0.239,19,0.016,26,0.42,36,0.266,61,0.014,62,0.014,126,3.581,164,2.206,400,3.186,402,3.647,505,3.647,973,3,985,4.353,1174,3.945,1175,3.647,1179,4.818,1180,6.658]],["title/classes/UpdateTerrainDto.html",[0,0.145,1093,2.508]],["body/classes/UpdateTerrainDto.html",[0,0.211,2,1.553,3,0.266,4,0.239,5,0.239,19,0.016,26,0.42,36,0.266,61,0.014,62,0.014,126,3.581,164,2.206,425,3.399,427,4.318,973,3,1092,4.318,1093,4.353,1174,3.945,1175,3.647,1181,4.818,1182,6.658]],["title/classes/UpdateUserDto.html",[0,0.145,1183,2.508]],["body/classes/UpdateUserDto.html",[0,0.178,2,1.311,3,0.225,4,0.202,5,0.202,10,0.543,16,0.987,19,0.016,20,1.191,21,0.848,22,1.651,26,0.297,36,0.225,61,0.013,62,0.013,67,1.983,70,1.514,183,2.002,391,3.549,392,2.869,393,2.393,437,5.181,440,4.067,447,5.379,885,4.667,886,4.021,1054,4.067,1056,4.067,1183,3.921,1184,6.002,1185,4.067,1186,4.708,1187,4.708,1188,4.708,1189,4.708,1190,4.708,1191,4.708]],["title/classes/User.html",[0,0.145,292,0.981]],["body/classes/User.html",[0,0.121,2,0.893,3,0.153,4,0.137,5,0.137,10,0.37,16,1.092,19,0.017,20,0.978,21,0.961,26,0.342,36,0.259,38,1.016,57,3.268,61,0.01,62,0.01,67,1.528,70,1.532,71,3.268,99,0.893,110,1.463,147,2.239,164,1.269,183,2.214,236,4.193,241,2.608,292,1.182,294,1.212,343,3.541,383,2.815,522,2.485,588,1.832,595,2.113,611,1.954,648,3.986,700,3.021,701,4.191,703,4.277,704,3.874,705,2.639,709,5.039,710,2.097,711,2.815,880,4.193,885,3.83,886,3.3,958,4.193,1057,2.771,1159,4.193,1192,2.269,1193,5.415,1194,5.415,1195,3.207,1196,3.207,1197,3.207,1198,3.207,1199,3.207,1200,3.207,1201,3.207,1202,3.207,1203,3.207,1204,3.207,1205,3.207,1206,3.207,1207,3.207,1208,2.483,1209,2.771]],["title/controllers/UserController.html",[169,1.325,1210,2.713]],["body/controllers/UserController.html",[0,0.128,3,0.162,4,0.145,5,0.145,10,0.392,11,1.34,12,1.826,16,0.96,18,1.713,19,0.017,20,1.159,21,0.825,22,1.445,24,1.788,26,0.405,29,0.586,36,0.162,61,0.01,62,0.01,70,1.555,139,1.725,140,1.408,146,1.788,169,1.173,171,1.173,173,1.826,183,1.947,207,2.748,215,3.146,216,2.588,218,2.069,292,0.869,301,2.401,364,1.939,369,1.939,486,3.193,564,5.657,570,3.193,735,2.069,802,4.828,988,2.069,1183,3.976,1210,3.403,1211,2.933,1212,4.157,1213,4.828,1214,4.157,1215,4.812,1216,3.395,1217,3.395,1218,3.395,1219,5.253,1220,3.395,1221,3.395,1222,3.395,1223,3.395,1224,4.812,1225,3.395,1226,3.395,1227,3.395,1228,3.395,1229,2.933,1230,2.933,1231,2.933,1232,3.395,1233,3.395,1234,3.395,1235,3.395,1236,3.395,1237,3.395,1238,3.395,1239,3.395,1240,3.395,1241,3.395,1242,3.395,1243,3.395,1244,3.395]],["title/modules/UserModule.html",[73,1.115,92,2.063]],["body/modules/UserModule.html",[0,0.168,3,0.212,4,0.19,5,0.19,19,0.017,20,1.043,26,0.445,29,0.767,36,0.212,61,0.012,62,0.012,73,1.866,75,1.843,76,1.843,77,2.033,78,2.033,79,1.843,80,2.937,81,2.937,92,3.956,93,2.643,94,2.033,95,1.843,97,2.259,98,2.391,99,1.238,171,1.996,292,1.137,486,4.402,530,3.778,588,3.668,593,3.521,595,2.643,1210,4.542,1229,3.84,1245,3.84,1246,3.84,1247,3.84,1248,4.444,1249,4.444,1250,3.84]],["title/injectables/UserService.html",[123,0.863,486,2.191]],["body/injectables/UserService.html",[0,0.109,3,0.137,4,0.123,5,0.123,10,0.332,11,1.189,16,0.942,18,1.68,19,0.017,20,1.177,21,0.809,22,1.417,24,1.674,26,0.411,29,0.496,36,0.137,37,2.749,61,0.009,62,0.009,70,1.526,99,0.801,123,0.96,124,1.138,129,1.138,146,1.753,147,1.087,153,3.065,190,1.769,226,2.879,241,1.386,273,2.486,274,2.86,277,2.6,291,1.548,292,0.736,294,1.087,301,2.035,303,3.823,305,1.386,309,1.193,343,1.881,358,2.486,384,1.753,404,1.462,486,2.438,629,2.035,631,2.79,634,3.98,635,3.98,637,3.679,638,1.881,639,4.261,640,1.881,724,3.054,765,2.228,880,3.304,886,1.753,958,3.304,988,1.753,1159,2.228,1183,3.679,1212,3.687,1213,3.687,1214,3.687,1219,4.861,1230,2.486,1231,2.486,1250,2.486,1251,2.486,1252,4.268,1253,4.268,1254,2.877,1255,4.268,1256,2.877,1257,4.268,1258,2.877,1259,4.268,1260,2.877,1261,4.268,1262,2.877,1263,4.268,1264,2.877,1265,2.877,1266,2.877,1267,2.877,1268,2.877,1269,5.087,1270,2.877,1271,2.877,1272,2.877]],["title/coverage.html",[1273,4.056]],["body/coverage.html",[0,0.275,1,1.671,5,0.092,6,1.864,7,1.864,19,0.017,21,0.859,33,1.411,47,0.939,61,0.007,62,0.007,63,1.526,65,1.864,66,1.864,79,0.895,104,1.411,110,1.346,111,1.954,123,1.526,125,1.864,149,1.411,150,1.864,157,1.411,169,2.108,170,1.526,172,1.864,182,1.411,204,1.411,211,1.315,215,1.411,216,1.161,217,1.315,219,1.526,221,1.411,262,1.411,263,1.315,272,1.864,275,1.232,292,0.875,309,0.895,380,1.315,381,1.864,382,2.649,396,1.526,397,2.69,398,1.864,399,2.649,400,1.232,401,2.42,402,3.163,408,1.671,425,1.315,426,1.864,427,2.649,448,1.671,449,1.864,450,1.864,476,1.526,477,2.649,484,1.232,485,1.232,486,1.232,508,1.671,553,1.411,556,1.526,557,1.864,567,1.526,572,1.315,582,1.864,588,1.232,589,0.939,591,1.671,596,2.649,597,1.526,614,1.671,659,1.864,667,1.526,668,1.864,677,1.864,682,1.526,699,3.007,705,1.232,712,1.671,714,1.315,716,1.526,717,1.864,749,1.526,761,1.411,763,3.007,764,3.007,770,1.671,771,1.526,776,1.526,777,1.864,803,1.232,825,1.411,836,1.864,895,2.649,921,1.864,947,6.135,963,3.007,969,1.671,971,1.526,972,1.864,985,1.411,1005,1.864,1029,1.864,1031,1.864,1039,1.864,1040,1.864,1044,1.864,1061,3.007,1074,1.671,1076,1.526,1077,1.864,1090,1.315,1093,1.411,1110,1.864,1144,1.864,1172,1.864,1176,1.864,1179,1.864,1181,1.864,1183,1.411,1184,1.864,1185,1.864,1192,3.007,1208,1.671,1210,1.526,1211,1.864,1251,1.864,1273,1.671,1274,1.864,1275,2.158,1276,2.158,1277,5.275,1278,3.421,1279,5.882,1280,6.101,1281,1.864,1282,6.569,1283,1.671,1284,7.546,1285,1.864,1286,1.864,1287,2.956,1288,1.864,1289,6.683,1290,1.864,1291,1.864,1292,4.838,1293,3.673,1294,1.864,1295,1.864,1296,1.864,1297,4.838,1298,4.251,1299,1.864,1300,2.158,1301,2.158,1302,2.158,1303,2.158,1304,2.158,1305,2.158,1306,2.158]],["title/dependencies.html",[76,1.913,1307,2.766]],["body/dependencies.html",[0,0.227,19,0.017,29,0.812,32,3.645,61,0.013,62,0.013,76,1.952,99,1.311,103,3.645,107,4.067,115,2.869,138,3.078,152,3.645,163,3.645,164,1.862,294,1.779,295,3.645,298,4.067,392,2.869,393,3.048,394,3.645,460,4.067,501,4.067,502,4.067,618,4.067,619,4.067,684,4.067,1175,3.078,1308,4.708,1309,4.067,1310,4.708,1311,4.708,1312,4.708,1313,6.599,1314,4.708,1315,4.708,1316,4.708,1317,4.708,1318,5.997,1319,5.997,1320,4.708,1321,4.708,1322,4.708,1323,4.708,1324,4.708,1325,4.708,1326,4.708,1327,4.708,1328,4.708,1329,4.708,1330,4.708]],["title/miscellaneous/enumerations.html",[1331,1.722,1332,3.986]],["body/miscellaneous/enumerations.html",[10,0.663,19,0.016,61,0.014,62,0.014,292,1.734,612,4.392,648,4.13,1124,5.855,1331,3.091,1332,4.965,1333,5.747,1334,5.747,1335,6.777]],["title/miscellaneous/functions.html",[1331,1.722,1336,3.986]],["body/miscellaneous/functions.html",[10,0.692,19,0.015,61,0.015,62,0.015,79,3.042,1299,5.182,1331,3.226,1336,5.182,1337,5.999]],["title/index.html",[10,0.37,1338,3.202,1339,3.202]],["body/index.html",[4,0.133,19,0.016,50,2.402,61,0.009,62,0.009,72,2.402,95,2.681,334,4.574,335,4.114,429,2.194,514,2.68,537,2.402,874,3.896,918,2.194,1273,2.402,1274,3.896,1309,5.907,1340,3.102,1341,3.102,1342,5.314,1343,4.51,1344,3.102,1345,3.102,1346,3.102,1347,4.51,1348,5.834,1349,3.102,1350,3.102,1351,3.102,1352,5.834,1353,3.102,1354,5.04,1355,6.837,1356,3.102,1357,6.673,1358,3.102,1359,3.102,1360,3.102,1361,4.51,1362,3.102,1363,4.51,1364,3.102,1365,5.314,1366,3.102,1367,4.51,1368,3.102,1369,3.102,1370,3.102,1371,3.102,1372,5.834,1373,6.466,1374,4.51,1375,3.102,1376,3.102,1377,3.102,1378,3.102,1379,3.102,1380,4.51,1381,5.834,1382,2.68,1383,4.51,1384,3.102,1385,2.68,1386,4.51,1387,6.466,1388,5.834,1389,3.102,1390,4.51,1391,3.102,1392,3.102,1393,3.102,1394,3.102,1395,5.834,1396,3.102,1397,3.102,1398,3.102,1399,3.102,1400,4.51,1401,3.102,1402,3.102,1403,3.102,1404,3.102,1405,3.102,1406,4.51,1407,3.102,1408,3.102,1409,3.102,1410,4.51,1411,3.102,1412,3.102,1413,5.04,1414,4.51,1415,3.102,1416,3.102,1417,3.102,1418,3.102,1419,3.102,1420,3.102,1421,3.102,1422,3.102,1423,3.896,1424,3.102,1425,3.102,1426,3.102,1427,3.102,1428,3.102,1429,3.102,1430,2.68,1431,3.102,1432,3.102,1433,4.51,1434,3.102,1435,3.102,1436,3.102,1437,3.102,1438,4.51,1439,3.102,1440,3.102,1441,3.102,1442,4.51,1443,4.51,1444,3.102,1445,3.102,1446,3.102,1447,3.102,1448,3.102,1449,3.102,1450,3.102,1451,2.68,1452,3.102,1453,3.102,1454,2.68,1455,3.102,1456,3.102,1457,3.102,1458,3.102,1459,3.102,1460,3.102,1461,2.68,1462,3.102]],["title/modules.html",[75,2.172]],["body/modules.html",[19,0.013,61,0.013,62,0.013,74,3.624,75,2.124,84,3.35,85,3.35,86,3.35,87,3.122,88,3.122,89,2.926,90,3.122,91,3.35,92,2.756,1413,6.722,1463,7.781,1464,7.781,1465,7.781]],["title/overview.html",[1466,4.526]],["body/overview.html",[2,0.905,19,0.016,61,0.01,62,0.01,63,2.298,73,0.944,74,5.423,75,1.347,76,1.347,77,1.486,78,1.486,79,1.347,80,1.486,81,1.486,82,2.807,83,2.807,84,4.896,85,4.61,86,4.127,87,4.123,88,4.296,89,3.865,90,4.123,91,4.127,92,3.724,93,2.133,94,1.486,95,1.347,124,1.285,149,3.566,171,1.122,211,3.324,259,2.807,260,2.807,262,3.566,263,3.324,275,3.865,484,3.865,485,3.865,486,3.865,572,3.324,584,2.807,585,2.807,672,2.807,673,2.807,674,2.807,754,2.807,756,2.807,757,2.807,774,2.515,803,3.865,828,2.807,829,2.807,830,2.807,998,2.807,999,2.807,1000,2.807,1090,3.324,1105,2.807,1106,2.807,1245,2.807,1246,2.807,1247,2.807,1466,2.807,1467,3.249,1468,3.249,1469,3.249,1470,3.249]],["title/properties.html",[67,1.526,1307,2.766]],["body/properties.html",[19,0.016,61,0.014,62,0.014,67,1.96,429,4.193,1454,5.121,1461,5.121,1471,5.928,1472,5.928,1473,5.928]],["title/miscellaneous/typealiases.html",[1331,1.722,1474,4.614]],["body/miscellaneous/typealiases.html",[10,0.559,19,0.013,21,0.95,61,0.013,62,0.013,69,5.604,157,3.992,221,3.992,397,2.215,401,3.426,402,3.992,408,4.728,477,3.75,508,4.728,596,3.75,597,4.319,699,3.426,711,4.41,712,4.728,763,3.426,764,4.319,770,4.728,963,3.426,969,4.728,1061,3.426,1074,4.728,1192,3.426,1208,4.728,1281,4.185,1283,4.728,1285,4.185,1286,4.185,1331,2.605,1475,4.844,1476,4.844,1477,4.844,1478,4.185,1479,4.185,1480,4.185,1481,4.844,1482,4.844,1483,4.185,1484,4.844,1485,4.185,1486,4.844]],["title/miscellaneous/variables.html",[1331,1.722,1487,3.986]],["body/miscellaneous/variables.html",[10,0.328,19,0.017,21,0.719,30,2.767,38,1.772,54,2.458,58,3.581,61,0.009,62,0.009,70,0.873,110,1.34,121,2.458,134,3.276,136,3.276,146,1.558,147,1.075,157,1.86,215,2.767,216,2.276,217,2.579,274,1.446,292,1.293,309,1.179,330,1.86,397,1.301,433,3.276,522,2.276,553,2.767,588,2.417,589,1.841,591,3.276,597,2.012,611,4.343,612,4.343,614,3.912,648,1.733,649,2.458,650,4.365,699,2.012,714,2.579,715,2.458,729,2.458,761,2.767,763,2.012,764,2.993,771,2.993,772,2.458,774,2.203,870,3.656,895,4.333,953,4.365,963,2.012,970,2.458,1061,2.012,1075,2.458,1125,2.458,1128,2.458,1192,2.012,1209,2.458,1283,2.203,1287,3.656,1288,3.656,1290,3.656,1291,2.458,1293,2.458,1294,4.365,1295,4.365,1296,2.458,1331,1.53,1354,2.458,1382,4.365,1385,3.656,1423,2.458,1430,2.458,1451,2.458,1478,2.458,1479,2.458,1480,2.458,1483,2.458,1485,2.458,1487,2.458,1488,5.053,1489,2.845,1490,4.232,1491,2.845,1492,2.845,1493,4.232,1494,2.845,1495,2.845,1496,2.845,1497,2.845,1498,2.845,1499,2.845,1500,2.845,1501,2.845,1502,2.845,1503,2.845,1504,2.845,1505,2.845,1506,2.845,1507,2.845,1508,2.845,1509,2.845,1510,4.232,1511,2.845,1512,2.845,1513,4.232,1514,4.232,1515,2.845,1516,2.845,1517,2.845,1518,4.232,1519,4.232,1520,2.845,1521,2.845,1522,2.845,1523,2.845,1524,5.053,1525,2.845,1526,2.845,1527,2.845,1528,2.845,1529,2.845,1530,2.845,1531,2.845,1532,2.845,1533,2.845,1534,2.845,1535,2.845,1536,2.845,1537,2.845,1538,2.845,1539,2.845,1540,2.845,1541,2.845,1542,2.845,1543,2.845,1544,2.845,1545,2.845,1546,2.845,1547,2.845,1548,2.845,1549,2.845,1550,2.845,1551,4.232,1552,2.845,1553,4.232,1554,4.232,1555,2.845,1556,2.845,1557,2.845]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"modules/AppModule.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMatchDto.html":{},"classes/CreateMatchPlayerDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateTerrainDto.html":{},"injectables/CustomResponseInterceptor.html":{},"classes/EventsGateway.html":{},"modules/EventsModule.html":{},"controllers/GeminiController.html":{},"classes/GeminiMessageDto.html":{},"modules/GeminiModule.html":{},"injectables/GeminiService.html":{},"classes/LoginDto.html":{},"controllers/MailerController.html":{},"modules/MailerModule.html":{},"injectables/MailerService.html":{},"classes/Match.html":{},"controllers/MatchController.html":{},"modules/MatchModule.html":{},"classes/MatchPlayer.html":{},"controllers/MatchPlayerController.html":{},"modules/MatchPlayerModule.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"classes/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SendMailDto.html":{},"classes/SignupDto.html":{},"classes/Terrain.html":{},"controllers/TerrainController.html":{},"modules/TerrainModule.html":{},"injectables/TerrainService.html":{},"injectables/TokenService.html":{},"classes/UpdateMatchDto.html":{},"classes/UpdateMatchPlayerDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateTerrainDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":947,"title":{},"body":{"injectables/MatchService.html":{},"injectables/TerrainService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1472,"title":{},"body":{"properties.html":{}}}],["0.13.1",{"_index":1312,"title":{},"body":{"dependencies.html":{}}}],["0.14.1",{"_index":1322,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1329,"title":{},"body":{"dependencies.html":{}}}],["0.21.0",{"_index":1308,"title":{},"body":{"dependencies.html":{}}}],["0.41.1",{"_index":1320,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1321,"title":{},"body":{"dependencies.html":{}}}],["0.7",{"_index":1497,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0/1",{"_index":1284,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1302,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1303,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1304,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1292,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1279,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1298,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1297,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1280,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1277,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1278,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1301,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":774,"title":{},"body":{"classes/MatchPlayer.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["10",{"_index":1467,"title":{},"body":{"overview.html":{}}}],["10.0.0",{"_index":1313,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":1317,"title":{},"body":{"dependencies.html":{}}}],["10.1.0",{"_index":1316,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1315,"title":{},"body":{"dependencies.html":{}}}],["10.4.13",{"_index":1319,"title":{},"body":{"dependencies.html":{}}}],["1000",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{}}}],["12.0.1",{"_index":1325,"title":{},"body":{"dependencies.html":{}}}],["120",{"_index":939,"title":{},"body":{"injectables/MatchService.html":{}}}],["13",{"_index":1469,"title":{},"body":{"overview.html":{}}}],["1h",{"_index":1165,"title":{},"body":{"injectables/TokenService.html":{}}}],["2.0.2",{"_index":1311,"title":{},"body":{"dependencies.html":{}}}],["21",{"_index":1470,"title":{},"body":{"overview.html":{}}}],["256",{"_index":1495,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.3.0",{"_index":1314,"title":{},"body":{"dependencies.html":{}}}],["32",{"_index":1499,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.0.1",{"_index":1326,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{}}}],["6.9.16",{"_index":1324,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{}}}],["7.8.1",{"_index":1330,"title":{},"body":{"dependencies.html":{}}}],["7d",{"_index":1166,"title":{},"body":{"injectables/TokenService.html":{}}}],["8",{"_index":1468,"title":{},"body":{"overview.html":{}}}],["8.8.0",{"_index":1323,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":872,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["_",{"_index":1556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["__v",{"_index":636,"title":{},"body":{"injectables/GeminiService.html":{},"injectables/MatchService.html":{}}}],["_id",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MatchPlayerService.html":{},"injectables/MessageService.html":{},"injectables/TokenService.html":{}}}],["accepte",{"_index":896,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["accepteplayerofmatch",{"_index":837,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["accepteplayerofmatch(userid",{"_index":846,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["acceptmatchplayerid",{"_index":779,"title":{},"body":{"controllers/MatchPlayerController.html":{}}}],["acceptmatchplayerid(@param(\"matchplayerid",{"_index":813,"title":{},"body":{"controllers/MatchPlayerController.html":{}}}],["acceptmatchplayerid(matchplayerid",{"_index":784,"title":{},"body":{"controllers/MatchPlayerController.html":{}}}],["access_token",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenService.html":{}}}],["accesstoken",{"_index":1161,"title":{},"body":{"injectables/TokenService.html":{}}}],["account",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{}}}],["accpeted",{"_index":905,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["act",{"_index":1528,"title":{},"body":{"miscellaneous/variables.html":{}}}],["action",{"_index":916,"title":{},"body":{"injectables/MatchPlayerService.html":{},"injectables/MessageService.html":{},"injectables/TerrainService.html":{}}}],["active",{"_index":1193,"title":{},"body":{"classes/User.html":{}}}],["add",{"_index":940,"title":{},"body":{"injectables/MatchService.html":{}}}],["address",{"_index":428,"title":{},"body":{"classes/CreateTerrainDto.html":{},"classes/Terrain.html":{}}}],["admin",{"_index":1335,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["ai",{"_index":619,"title":{},"body":{"injectables/GeminiService.html":{},"dependencies.html":{}}}],["alias",{"_index":1282,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":1475,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allexceptionsfilter",{"_index":1,"title":{"classes/AllExceptionsFilter.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["allmatchescount",{"_index":1137,"title":{},"body":{"injectables/TerrainService.html":{}}}],["allowed",{"_index":1125,"title":{},"body":{"injectables/TerrainService.html":{},"miscellaneous/variables.html":{}}}],["allowing",{"_index":1401,"title":{},"body":{"index.html":{}}}],["already",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MatchPlayerService.html":{},"injectables/TerrainService.html":{}}}],["amazing",{"_index":1448,"title":{},"body":{"index.html":{}}}],["amount",{"_index":1136,"title":{},"body":{"injectables/TerrainService.html":{}}}],["amout",{"_index":1140,"title":{},"body":{"injectables/TerrainService.html":{}}}],["analyse",{"_index":1513,"title":{},"body":{"miscellaneous/variables.html":{}}}],["any).errors",{"_index":55,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["any).message",{"_index":471,"title":{},"body":{"injectables/CustomResponseInterceptor.html":{}}}],["apiresponse",{"_index":33,"title":{"interfaces/ApiResponse.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"injectables/CustomResponseInterceptor.html":{},"coverage.html":{}}}],["app",{"_index":1505,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app_guard",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["application",{"_index":1373,"title":{},"body":{"index.html":{}}}],["applications",{"_index":1347,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":74,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argon2",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TokenService.html":{},"dependencies.html":{}}}],["argon2.hash(refreshtoken",{"_index":1168,"title":{},"body":{"injectables/TokenService.html":{}}}],["argon2.hash(signupdata.password",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon2.verify",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon2.verify(hashrt",{"_index":1171,"title":{},"body":{"injectables/TokenService.html":{}}}],["args",{"_index":491,"title":{},"body":{"classes/EventsGateway.html":{}}}],["argumentshost",{"_index":15,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["array",{"_index":1523,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array.isarray(errormessage",{"_index":472,"title":{},"body":{"injectables/CustomResponseInterceptor.html":{}}}],["assert",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["assistance",{"_index":1506,"title":{},"body":{"miscellaneous/variables.html":{}}}],["async",{"_index":153,"title":{},"body":{"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/EventsGateway.html":{},"injectables/GeminiService.html":{},"injectables/MailerService.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"injectables/MessageService.html":{},"injectables/RtStrategy.html":{},"injectables/TerrainService.html":{},"injectables/TokenService.html":{},"injectables/UserService.html":{}}}],["at(1",{"_index":519,"title":{},"body":{"classes/EventsGateway.html":{}}}],["atguard",{"_index":104,"title":{"injectables/AtGuard.html":{}},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"controllers/AuthController.html":{},"coverage.html":{}}}],["atstrategy",{"_index":149,"title":{"injectables/AtStrategy.html":{}},"body":{"injectables/AtStrategy.html":{},"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["auth",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"classes/EventsGateway.html":{},"injectables/MailerService.html":{}}}],["auth.controller",{"_index":265,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":170,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticator",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["authenticator.generate(process.env.otp_secret",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["authguard",{"_index":137,"title":{},"body":{"injectables/AtGuard.html":{},"classes/RtGuard.html":{}}}],["authguard('jwt",{"_index":127,"title":{},"body":{"injectables/AtGuard.html":{},"classes/RtGuard.html":{}}}],["authmodule",{"_index":84,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1454,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":211,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/EventsGateway.html":{},"injectables/GeminiService.html":{},"injectables/MailerService.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"injectables/MessageService.html":{},"injectables/TerrainService.html":{},"injectables/TokenService.html":{},"injectables/UserService.html":{}}}],["aws",{"_index":1390,"title":{},"body":{"index.html":{}}}],["backers",{"_index":1449,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":458,"title":{},"body":{"injectables/CustomResponseInterceptor.html":{}}}],["based",{"_index":1385,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["begin",{"_index":910,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["board",{"_index":1441,"title":{},"body":{"index.html":{}}}],["body",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GeminiController.html":{},"controllers/MatchController.html":{},"controllers/MatchPlayerController.html":{},"controllers/MessageController.html":{},"controllers/TerrainController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":71,"title":{},"body":{"interfaces/ApiResponse.html":{},"classes/MatchPlayer.html":{},"injectables/MatchPlayerService.html":{},"classes/User.html":{}}}],["bootstrap",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/GeminiModule.html":{},"modules/MailerModule.html":{},"modules/MatchModule.html":{},"modules/MatchPlayerModule.html":{},"modules/MessageModule.html":{},"modules/TerrainModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["bro",{"_index":1020,"title":{},"body":{"injectables/MessageService.html":{}}}],["browse",{"_index":1465,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1463,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1343,"title":{},"body":{"index.html":{}}}],["callhandler",{"_index":454,"title":{},"body":{"injectables/CustomResponseInterceptor.html":{}}}],["can't",{"_index":1541,"title":{},"body":{"miscellaneous/variables.html":{}}}],["canactivate",{"_index":128,"title":{},"body":{"injectables/AtGuard.html":{}}}],["canactivate(context",{"_index":133,"title":{},"body":{"injectables/AtGuard.html":{}}}],["cancel",{"_index":909,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["cancelrequest",{"_index":780,"title":{},"body":{"controllers/MatchPlayerController.html":{}}}],["cancelrequest(@param(\"matchplayerid",{"_index":819,"title":{},"body":{"controllers/MatchPlayerController.html":{}}}],["cancelrequest(matchplayerid",{"_index":788,"title":{},"body":{"controllers/MatchPlayerController.html":{}}}],["cancelrequet",{"_index":838,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["cancelrequet(userid",{"_index":849,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["catch",{"_index":12,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"controllers/GeminiController.html":{},"injectables/GeminiService.html":{},"controllers/MatchPlayerController.html":{},"injectables/MatchPlayerService.html":{},"injectables/TerrainService.html":{},"controllers/UserController.html":{}}}],["catch(exception",{"_index":13,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["catcherror",{"_index":462,"title":{},"body":{"injectables/CustomResponseInterceptor.html":{}}}],["catcherror((error",{"_index":467,"title":{},"body":{"injectables/CustomResponseInterceptor.html":{}}}],["channel",{"_index":1416,"title":{},"body":{"index.html":{}}}],["chatsession",{"_index":616,"title":{},"body":{"injectables/GeminiService.html":{}}}],["check",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{},"classes/EventsGateway.html":{},"injectables/MatchPlayerService.html":{},"index.html":{}}}],["class",{"_index":0,"title":{"classes/AllExceptionsFilter.html":{},"classes/CreateMatchDto.html":{},"classes/CreateMatchPlayerDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateTerrainDto.html":{},"classes/EventsGateway.html":{},"classes/GeminiMessageDto.html":{},"classes/LoginDto.html":{},"classes/Match.html":{},"classes/MatchPlayer.html":{},"classes/Message.html":{},"classes/RtGuard.html":{},"classes/SendMailDto.html":{},"classes/SignupDto.html":{},"classes/Terrain.html":{},"classes/UpdateMatchDto.html":{},"classes/UpdateMatchPlayerDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateTerrainDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMatchDto.html":{},"classes/CreateMatchPlayerDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateTerrainDto.html":{},"injectables/CustomResponseInterceptor.html":{},"classes/EventsGateway.html":{},"modules/EventsModule.html":{},"controllers/GeminiController.html":{},"classes/GeminiMessageDto.html":{},"modules/GeminiModule.html":{},"injectables/GeminiService.html":{},"classes/LoginDto.html":{},"controllers/MailerController.html":{},"modules/MailerModule.html":{},"injectables/MailerService.html":{},"classes/Match.html":{},"controllers/MatchController.html":{},"modules/MatchModule.html":{},"classes/MatchPlayer.html":{},"controllers/MatchPlayerController.html":{},"modules/MatchPlayerModule.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"classes/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SendMailDto.html":{},"classes/SignupDto.html":{},"classes/Terrain.html":{},"controllers/TerrainController.html":{},"modules/TerrainModule.html":{},"injectables/TerrainService.html":{},"injectables/TokenService.html":{},"classes/UpdateMatchDto.html":{},"classes/UpdateMatchPlayerDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateTerrainDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/CreateMatchDto.html":{},"classes/CreateMatchPlayerDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateTerrainDto.html":{},"classes/EventsGateway.html":{},"classes/GeminiMessageDto.html":{},"classes/LoginDto.html":{},"classes/Match.html":{},"classes/MatchPlayer.html":{},"classes/Message.html":{},"classes/RtGuard.html":{},"classes/SendMailDto.html":{},"classes/SignupDto.html":{},"classes/Terrain.html":{},"classes/UpdateMatchDto.html":{},"classes/UpdateMatchPlayerDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateTerrainDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"overview.html":{}}}],["clearrthash",{"_index":1145,"title":{},"body":{"injectables/TokenService.html":{}}}],["clearrthash(userid",{"_index":1151,"title":{},"body":{"injectables/TokenService.html":{}}}],["clicks",{"_index":1400,"title":{},"body":{"index.html":{}}}],["client",{"_index":493,"title":{},"body":{"classes/EventsGateway.html":{}}}],["client.data",{"_index":529,"title":{},"body":{"classes/EventsGateway.html":{}}}],["client.data.matchid",{"_index":543,"title":{},"body":{"classes/EventsGateway.html":{}}}],["client.data.name",{"_index":540,"title":{},"body":{"classes/EventsGateway.html":{}}}],["client.data.userid",{"_index":542,"title":{},"body":{"classes/EventsGateway.html":{}}}],["client.disconnect",{"_index":523,"title":{},"body":{"classes/EventsGateway.html":{}}}],["client.emit(\"walcome",{"_index":535,"title":{},"body":{"classes/EventsGateway.html":{}}}],["client.handshake.headers.authorization?.split",{"_index":518,"title":{},"body":{"classes/EventsGateway.html":{}}}],["client.handshake.query['roomid",{"_index":520,"title":{},"body":{"classes/EventsGateway.html":{}}}],["client.join(matchid",{"_index":534,"title":{},"body":{"classes/EventsGateway.html":{}}}],["cloud",{"_index":1384,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":259,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":261,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":260,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_eventsmodule",{"_index":548,"title":{},"body":{"modules/EventsModule.html":{}}}],["cluster_eventsmodule_imports",{"_index":549,"title":{},"body":{"modules/EventsModule.html":{}}}],["cluster_geminimodule",{"_index":584,"title":{},"body":{"modules/GeminiModule.html":{},"overview.html":{}}}],["cluster_geminimodule_providers",{"_index":585,"title":{},"body":{"modules/GeminiModule.html":{},"overview.html":{}}}],["cluster_mailermodule",{"_index":672,"title":{},"body":{"modules/MailerModule.html":{},"overview.html":{}}}],["cluster_mailermodule_exports",{"_index":674,"title":{},"body":{"modules/MailerModule.html":{},"overview.html":{}}}],["cluster_mailermodule_providers",{"_index":673,"title":{},"body":{"modules/MailerModule.html":{},"overview.html":{}}}],["cluster_matchmodule",{"_index":754,"title":{},"body":{"modules/MatchModule.html":{},"overview.html":{}}}],["cluster_matchmodule_exports",{"_index":756,"title":{},"body":{"modules/MatchModule.html":{},"overview.html":{}}}],["cluster_matchmodule_imports",{"_index":755,"title":{},"body":{"modules/MatchModule.html":{}}}],["cluster_matchmodule_providers",{"_index":757,"title":{},"body":{"modules/MatchModule.html":{},"overview.html":{}}}],["cluster_matchplayermodule",{"_index":828,"title":{},"body":{"modules/MatchPlayerModule.html":{},"overview.html":{}}}],["cluster_matchplayermodule_exports",{"_index":829,"title":{},"body":{"modules/MatchPlayerModule.html":{},"overview.html":{}}}],["cluster_matchplayermodule_providers",{"_index":830,"title":{},"body":{"modules/MatchPlayerModule.html":{},"overview.html":{}}}],["cluster_messagemodule",{"_index":998,"title":{},"body":{"modules/MessageModule.html":{},"overview.html":{}}}],["cluster_messagemodule_exports",{"_index":999,"title":{},"body":{"modules/MessageModule.html":{},"overview.html":{}}}],["cluster_messagemodule_providers",{"_index":1000,"title":{},"body":{"modules/MessageModule.html":{},"overview.html":{}}}],["cluster_terrainmodule",{"_index":1105,"title":{},"body":{"modules/TerrainModule.html":{},"overview.html":{}}}],["cluster_terrainmodule_providers",{"_index":1106,"title":{},"body":{"modules/TerrainModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1245,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1246,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":1247,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["come",{"_index":1407,"title":{},"body":{"index.html":{}}}],["common/guards",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["connected",{"_index":533,"title":{},"body":{"classes/EventsGateway.html":{}}}],["console",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{},"classes/Message.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["console.log(\"client",{"_index":532,"title":{},"body":{"classes/EventsGateway.html":{}}}],["console.log(\"id",{"_index":645,"title":{},"body":{"injectables/GeminiService.html":{}}}],["console.log(\"matches",{"_index":643,"title":{},"body":{"injectables/GeminiService.html":{}}}],["console.log(\"method",{"_index":1237,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log(\"no",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(\"problem",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(\"user",{"_index":641,"title":{},"body":{"injectables/GeminiService.html":{}}}],["console.log('client",{"_index":538,"title":{},"body":{"classes/EventsGateway.html":{}}}],["console.log(e",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{},"controllers/GeminiController.html":{},"injectables/GeminiService.html":{},"controllers/MatchPlayerController.html":{},"injectables/TerrainService.html":{}}}],["console.log(matchplayer",{"_index":899,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["console.log(terraininfo",{"_index":632,"title":{},"body":{"injectables/GeminiService.html":{}}}],["console.log(token",{"_index":521,"title":{},"body":{"classes/EventsGateway.html":{}}}],["console.log(user",{"_index":1134,"title":{},"body":{"injectables/TerrainService.html":{}}}],["const",{"_index":38,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AtGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CustomResponseInterceptor.html":{},"classes/EventsGateway.html":{},"injectables/GeminiService.html":{},"injectables/MailerService.html":{},"classes/Match.html":{},"classes/MatchPlayer.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"classes/Message.html":{},"injectables/RtStrategy.html":{},"classes/Terrain.html":{},"injectables/TerrainService.html":{},"injectables/TokenService.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":129,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"classes/CreateMessageDto.html":{},"classes/EventsGateway.html":{},"injectables/GeminiService.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"injectables/MessageService.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TerrainService.html":{},"injectables/TokenService.html":{},"injectables/UserService.html":{}}}],["constructor(@inject",{"_index":576,"title":{},"body":{"controllers/GeminiController.html":{}}}],["constructor(@injectmodel(user.name",{"_index":1265,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(jwtservice",{"_index":1149,"title":{},"body":{"injectables/TokenService.html":{}}}],["constructor(matchmodel",{"_index":925,"title":{},"body":{"injectables/MatchService.html":{}}}],["constructor(matchplayermodel",{"_index":842,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["constructor(messagemodel",{"_index":1007,"title":{},"body":{"injectables/MessageService.html":{}}}],["constructor(messages",{"_index":407,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["constructor(messageservice",{"_index":483,"title":{},"body":{"classes/EventsGateway.html":{}}}],["constructor(modelinstance",{"_index":600,"title":{},"body":{"injectables/GeminiService.html":{}}}],["constructor(private",{"_index":139,"title":{},"body":{"injectables/AtGuard.html":{},"controllers/AuthController.html":{},"classes/EventsGateway.html":{},"controllers/MailerController.html":{},"controllers/MatchController.html":{},"controllers/MatchPlayerController.html":{},"controllers/MessageController.html":{},"controllers/TerrainController.html":{},"controllers/UserController.html":{}}}],["constructor(reflector",{"_index":130,"title":{},"body":{"injectables/AtGuard.html":{}}}],["constructor(terrainmodel",{"_index":1113,"title":{},"body":{"injectables/TerrainService.html":{}}}],["constructor(usermodel",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["content",{"_index":403,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/EventsGateway.html":{},"classes/GeminiMessageDto.html":{},"injectables/GeminiService.html":{},"classes/Message.html":{},"injectables/MessageService.html":{}}}],["context",{"_index":136,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/CustomResponseInterceptor.html":{},"miscellaneous/variables.html":{}}}],["context.getclass",{"_index":145,"title":{},"body":{"injectables/AtGuard.html":{}}}],["context.gethandler",{"_index":144,"title":{},"body":{"injectables/AtGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":1553,"title":{},"body":{"miscellaneous/variables.html":{}}}],["controller",{"_index":169,"title":{"controllers/AuthController.html":{},"controllers/GeminiController.html":{},"controllers/MailerController.html":{},"controllers/MatchController.html":{},"controllers/MatchPlayerController.html":{},"controllers/MessageController.html":{},"controllers/TerrainController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/GeminiController.html":{},"controllers/MailerController.html":{},"controllers/MatchController.html":{},"controllers/MatchPlayerController.html":{},"controllers/MessageController.html":{},"controllers/TerrainController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('gemini",{"_index":575,"title":{},"body":{"controllers/GeminiController.html":{}}}],["controller('mailer",{"_index":671,"title":{},"body":{"controllers/MailerController.html":{}}}],["controller('match",{"_index":739,"title":{},"body":{"controllers/MatchController.html":{},"controllers/MatchPlayerController.html":{}}}],["controller('message",{"_index":989,"title":{},"body":{"controllers/MessageController.html":{}}}],["controller('terrain",{"_index":1094,"title":{},"body":{"controllers/TerrainController.html":{}}}],["controller('user",{"_index":1232,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/GeminiController.html":{},"modules/GeminiModule.html":{},"controllers/MailerController.html":{},"modules/MailerModule.html":{},"controllers/MatchController.html":{},"modules/MatchModule.html":{},"controllers/MatchPlayerController.html":{},"modules/MatchPlayerModule.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"controllers/TerrainController.html":{},"modules/TerrainModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["cordinate",{"_index":1538,"title":{},"body":{"miscellaneous/variables.html":{}}}],["count",{"_index":1517,"title":{},"body":{"miscellaneous/variables.html":{}}}],["countmatchs",{"_index":1135,"title":{},"body":{"injectables/TerrainService.html":{}}}],["courses",{"_index":1422,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1273,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":973,"title":{},"body":{"controllers/MessageController.html":{},"injectables/MessageService.html":{},"controllers/TerrainController.html":{},"injectables/TerrainService.html":{},"classes/UpdateMatchDto.html":{},"classes/UpdateMatchPlayerDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateTerrainDto.html":{}}}],["create(@body",{"_index":990,"title":{},"body":{"controllers/MessageController.html":{},"controllers/TerrainController.html":{}}}],["create(createmessagedto",{"_index":976,"title":{},"body":{"controllers/MessageController.html":{},"injectables/MessageService.html":{}}}],["create(createterraindto",{"_index":1080,"title":{},"body":{"controllers/TerrainController.html":{},"injectables/TerrainService.html":{}}}],["created",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{}}}],["createdat",{"_index":634,"title":{},"body":{"injectables/GeminiService.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"injectables/UserService.html":{}}}],["createdat\").populate",{"_index":1028,"title":{},"body":{"injectables/MessageService.html":{}}}],["creatematch",{"_index":718,"title":{},"body":{"controllers/MatchController.html":{},"injectables/MatchService.html":{}}}],["creatematch(id",{"_index":722,"title":{},"body":{"controllers/MatchController.html":{}}}],["creatematch(userid",{"_index":927,"title":{},"body":{"injectables/MatchService.html":{}}}],["creatematchdto",{"_index":380,"title":{"classes/CreateMatchDto.html":{}},"body":{"classes/CreateMatchDto.html":{},"controllers/MatchController.html":{},"injectables/MatchService.html":{},"classes/UpdateMatchDto.html":{},"coverage.html":{}}}],["creatematchdto.date",{"_index":935,"title":{},"body":{"injectables/MatchService.html":{}}}],["creatematchdto.terrainid",{"_index":943,"title":{},"body":{"injectables/MatchService.html":{}}}],["creatematchplayerdto",{"_index":396,"title":{"classes/CreateMatchPlayerDto.html":{}},"body":{"classes/CreateMatchPlayerDto.html":{},"classes/UpdateMatchPlayerDto.html":{},"coverage.html":{}}}],["createmessagedto",{"_index":400,"title":{"classes/CreateMessageDto.html":{}},"body":{"classes/CreateMessageDto.html":{},"classes/EventsGateway.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["createmessagedto.content",{"_index":1025,"title":{},"body":{"injectables/MessageService.html":{}}}],["createmessagedto.matchid",{"_index":1024,"title":{},"body":{"injectables/MessageService.html":{}}}],["createmessagedto.senderid",{"_index":1023,"title":{},"body":{"injectables/MessageService.html":{}}}],["createmessagedto.sendername",{"_index":1026,"title":{},"body":{"injectables/MessageService.html":{}}}],["createparamdecorator",{"_index":1551,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createterraindto",{"_index":425,"title":{"classes/CreateTerrainDto.html":{}},"body":{"classes/CreateTerrainDto.html":{},"controllers/TerrainController.html":{},"injectables/TerrainService.html":{},"classes/UpdateTerrainDto.html":{},"coverage.html":{}}}],["creator",{"_index":1525,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cridentials",{"_index":515,"title":{},"body":{"classes/EventsGateway.html":{}}}],["ctx",{"_index":39,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["ctx.getrequest",{"_index":42,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["ctx.getresponse",{"_index":41,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["currensession",{"_index":623,"title":{},"body":{"injectables/GeminiService.html":{}}}],["current",{"_index":895,"title":{},"body":{"injectables/MatchPlayerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["currentmanger",{"_index":625,"title":{},"body":{"injectables/GeminiService.html":{}}}],["currentmanger._id",{"_index":642,"title":{},"body":{"injectables/GeminiService.html":{}}}],["currentmanger._id.tostring",{"_index":630,"title":{},"body":{"injectables/GeminiService.html":{}}}],["currentuser",{"_index":1252,"title":{},"body":{"injectables/UserService.html":{}}}],["currentuser(id",{"_index":1255,"title":{},"body":{"injectables/UserService.html":{}}}],["customresponseinterceptor",{"_index":448,"title":{"injectables/CustomResponseInterceptor.html":{}},"body":{"injectables/CustomResponseInterceptor.html":{},"coverage.html":{}}}],["data",{"_index":58,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CustomResponseInterceptor.html":{},"injectables/GeminiService.html":{},"miscellaneous/variables.html":{}}}],["data.email",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["date",{"_index":383,"title":{},"body":{"classes/CreateMatchDto.html":{},"classes/CreateTerrainDto.html":{},"classes/Match.html":{},"injectables/MatchService.html":{},"classes/Terrain.html":{},"classes/User.html":{}}}],["date()).toisostring",{"_index":546,"title":{},"body":{"classes/EventsGateway.html":{}}}],["date(date.now",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["date(requesteddatetime",{"_index":937,"title":{},"body":{"injectables/MatchService.html":{}}}],["datetime_",{"_index":545,"title":{},"body":{"classes/EventsGateway.html":{}}}],["deal",{"_index":1508,"title":{},"body":{"miscellaneous/variables.html":{}}}],["declarations",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/GeminiModule.html":{},"modules/MailerModule.html":{},"modules/MatchModule.html":{},"modules/MatchPlayerModule.html":{},"modules/MessageModule.html":{},"modules/TerrainModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateMatchDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateTerrainDto.html":{},"classes/EventsGateway.html":{},"controllers/GeminiController.html":{},"classes/GeminiMessageDto.html":{},"classes/LoginDto.html":{},"classes/Match.html":{},"controllers/MatchController.html":{},"classes/MatchPlayer.html":{},"controllers/MatchPlayerController.html":{},"classes/Message.html":{},"controllers/MessageController.html":{},"classes/SignupDto.html":{},"classes/Terrain.html":{},"controllers/TerrainController.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["deeper",{"_index":1418,"title":{},"body":{"index.html":{}}}],["default",{"_index":611,"title":{},"body":{"injectables/GeminiService.html":{},"classes/Match.html":{},"injectables/MatchPlayerService.html":{},"classes/Terrain.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":16,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMatchDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateTerrainDto.html":{},"injectables/CustomResponseInterceptor.html":{},"classes/EventsGateway.html":{},"controllers/GeminiController.html":{},"classes/GeminiMessageDto.html":{},"injectables/GeminiService.html":{},"classes/LoginDto.html":{},"injectables/MailerService.html":{},"classes/Match.html":{},"controllers/MatchController.html":{},"classes/MatchPlayer.html":{},"controllers/MatchPlayerController.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"classes/Message.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SendMailDto.html":{},"classes/SignupDto.html":{},"classes/Terrain.html":{},"controllers/TerrainController.html":{},"injectables/TerrainService.html":{},"injectables/TokenService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":570,"title":{},"body":{"controllers/GeminiController.html":{},"controllers/MatchController.html":{},"controllers/MatchPlayerController.html":{},"injectables/MatchPlayerService.html":{},"controllers/MessageController.html":{},"controllers/TerrainController.html":{},"controllers/UserController.html":{}}}],["delete(':id",{"_index":751,"title":{},"body":{"controllers/MatchController.html":{},"controllers/MatchPlayerController.html":{},"controllers/MessageController.html":{},"controllers/TerrainController.html":{}}}],["delete('session",{"_index":562,"title":{},"body":{"controllers/GeminiController.html":{}}}],["deleteprofile",{"_index":1212,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["deleteprofile(@getcurrentuserid",{"_index":1234,"title":{},"body":{"controllers/UserController.html":{}}}],["deleteprofile(id",{"_index":1257,"title":{},"body":{"injectables/UserService.html":{}}}],["deleteprofile(sub",{"_index":1216,"title":{},"body":{"controllers/UserController.html":{}}}],["deletion",{"_index":912,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["denied",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TokenService.html":{}}}],["dependencies",{"_index":76,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/GeminiModule.html":{},"modules/MailerModule.html":{},"modules/MatchModule.html":{},"modules/MatchPlayerModule.html":{},"modules/MessageModule.html":{},"modules/TerrainModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":1372,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1389,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1380,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1399,"title":{},"body":{"index.html":{}}}],["description",{"_index":429,"title":{},"body":{"classes/CreateTerrainDto.html":{},"classes/Terrain.html":{},"index.html":{},"properties.html":{}}}],["destorysession",{"_index":598,"title":{},"body":{"injectables/GeminiService.html":{}}}],["destorysession(sessionid",{"_index":605,"title":{},"body":{"injectables/GeminiService.html":{}}}],["destroied",{"_index":653,"title":{},"body":{"injectables/GeminiService.html":{}}}],["destroysessoin",{"_index":559,"title":{},"body":{"controllers/GeminiController.html":{}}}],["destroysessoin(@getcurrentuserid",{"_index":580,"title":{},"body":{"controllers/GeminiController.html":{}}}],["destroysessoin(sub",{"_index":561,"title":{},"body":{"controllers/GeminiController.html":{}}}],["development",{"_index":1358,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1429,"title":{},"body":{"index.html":{}}}],["dimentions",{"_index":1535,"title":{},"body":{"miscellaneous/variables.html":{}}}],["disconnected",{"_index":539,"title":{},"body":{"classes/EventsGateway.html":{}}}],["discord",{"_index":1415,"title":{},"body":{"index.html":{}}}],["dive",{"_index":1417,"title":{},"body":{"index.html":{}}}],["document",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{}}}],["documentation",{"_index":1274,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dollar",{"_index":1534,"title":{},"body":{"miscellaneous/variables.html":{}}}],["don't",{"_index":953,"title":{},"body":{"injectables/MatchService.html":{},"miscellaneous/variables.html":{}}}],["dont",{"_index":1133,"title":{},"body":{"injectables/TerrainService.html":{}}}],["dto",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/create",{"_index":737,"title":{},"body":{"controllers/MatchController.html":{},"injectables/MatchService.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"controllers/TerrainController.html":{},"injectables/TerrainService.html":{}}}],["dto/gemini",{"_index":574,"title":{},"body":{"controllers/GeminiController.html":{}}}],["dto/login.dto",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/send",{"_index":685,"title":{},"body":{"injectables/MailerService.html":{}}}],["dto/signup.dto",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/update",{"_index":988,"title":{},"body":{"controllers/MessageController.html":{},"injectables/MessageService.html":{},"controllers/TerrainController.html":{},"injectables/TerrainService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["e",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{},"controllers/GeminiController.html":{},"injectables/GeminiService.html":{},"controllers/MatchPlayerController.html":{},"injectables/MatchPlayerService.html":{},"injectables/TerrainService.html":{},"controllers/UserController.html":{}}}],["e2e",{"_index":1368,"title":{},"body":{"index.html":{}}}],["editprofile",{"_index":1213,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["editprofile(id",{"_index":1259,"title":{},"body":{"injectables/UserService.html":{}}}],["editprofile(sub",{"_index":1218,"title":{},"body":{"controllers/UserController.html":{}}}],["efficient",{"_index":1344,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":1378,"title":{},"body":{"index.html":{}}}],["email",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GeminiService.html":{},"classes/LoginDto.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"classes/SignupDto.html":{},"injectables/TokenService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["emails",{"_index":1531,"title":{},"body":{"miscellaneous/variables.html":{}}}],["emitted",{"_index":547,"title":{},"body":{"classes/EventsGateway.html":{}}}],["ensure",{"_index":1376,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":1432,"title":{},"body":{"index.html":{}}}],["entities/match",{"_index":833,"title":{},"body":{"modules/MatchPlayerModule.html":{},"injectables/MatchPlayerService.html":{}}}],["entities/match.entity",{"_index":760,"title":{},"body":{"modules/MatchModule.html":{},"injectables/MatchService.html":{}}}],["entities/message.entity",{"_index":1003,"title":{},"body":{"modules/MessageModule.html":{},"injectables/MessageService.html":{}}}],["entities/terrain.entity",{"_index":1109,"title":{},"body":{"modules/TerrainModule.html":{},"injectables/TerrainService.html":{}}}],["entities/user.entity",{"_index":1250,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["enumerations",{"_index":1332,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/role.enum",{"_index":1160,"title":{},"body":{"injectables/TokenService.html":{}}}],["error",{"_index":51,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"injectables/CustomResponseInterceptor.html":{}}}],["error.getresponse",{"_index":468,"title":{},"body":{"injectables/CustomResponseInterceptor.html":{}}}],["errormessage",{"_index":469,"title":{},"body":{"injectables/CustomResponseInterceptor.html":{}}}],["errormessage.flat",{"_index":473,"title":{},"body":{"injectables/CustomResponseInterceptor.html":{}}}],["errorresponse",{"_index":56,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["errors",{"_index":52,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"injectables/AuthService.html":{},"injectables/CustomResponseInterceptor.html":{}}}],["events.gateway",{"_index":551,"title":{},"body":{"modules/EventsModule.html":{}}}],["events/events.module",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["eventsgateway",{"_index":476,"title":{"classes/EventsGateway.html":{}},"body":{"classes/EventsGateway.html":{},"modules/EventsModule.html":{},"coverage.html":{}}}],["eventsmodule",{"_index":85,"title":{"modules/EventsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules.html":{},"overview.html":{}}}],["example",{"_index":1354,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["exception",{"_index":23,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.getresponse",{"_index":53,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.getstatus",{"_index":45,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.message",{"_index":48,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptionfilter",{"_index":9,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptions.filter.ts",{"_index":7,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["exceptions.filter.ts:13",{"_index":17,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exec",{"_index":631,"title":{},"body":{"injectables/GeminiService.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"injectables/TerrainService.html":{},"injectables/UserService.html":{}}}],["executed",{"_index":1238,"title":{},"body":{"controllers/UserController.html":{}}}],["executioncontext",{"_index":134,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/CustomResponseInterceptor.html":{},"miscellaneous/variables.html":{}}}],["exeption",{"_index":524,"title":{},"body":{"classes/EventsGateway.html":{}}}],["existingterrain",{"_index":1127,"title":{},"body":{"injectables/TerrainService.html":{}}}],["exists",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MatchPlayerService.html":{}}}],["experience",{"_index":1420,"title":{},"body":{"index.html":{}}}],["expire",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{}}}],["expired",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{}}}],["expires",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":1164,"title":{},"body":{"injectables/TokenService.html":{}}}],["expiry",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":36,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"modules/AppModule.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMatchDto.html":{},"classes/CreateMatchPlayerDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateTerrainDto.html":{},"injectables/CustomResponseInterceptor.html":{},"classes/EventsGateway.html":{},"modules/EventsModule.html":{},"controllers/GeminiController.html":{},"classes/GeminiMessageDto.html":{},"modules/GeminiModule.html":{},"injectables/GeminiService.html":{},"classes/LoginDto.html":{},"controllers/MailerController.html":{},"modules/MailerModule.html":{},"injectables/MailerService.html":{},"classes/Match.html":{},"controllers/MatchController.html":{},"modules/MatchModule.html":{},"classes/MatchPlayer.html":{},"controllers/MatchPlayerController.html":{},"modules/MatchPlayerModule.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"classes/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SendMailDto.html":{},"classes/SignupDto.html":{},"classes/Terrain.html":{},"controllers/TerrainController.html":{},"modules/TerrainModule.html":{},"injectables/TerrainService.html":{},"injectables/TokenService.html":{},"classes/UpdateMatchDto.html":{},"classes/UpdateMatchPlayerDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateTerrainDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/GeminiModule.html":{},"modules/MailerModule.html":{},"modules/MatchModule.html":{},"modules/MatchPlayerModule.html":{},"modules/MessageModule.html":{},"modules/TerrainModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":32,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{}}}],["extends",{"_index":126,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/UpdateMatchDto.html":{},"classes/UpdateMatchPlayerDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateTerrainDto.html":{}}}],["extractjwt",{"_index":161,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":166,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["failed",{"_index":475,"title":{},"body":{"injectables/CustomResponseInterceptor.html":{}}}],["false",{"_index":57,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/CustomResponseInterceptor.html":{},"injectables/MatchPlayerService.html":{},"classes/User.html":{}}}],["fast",{"_index":1393,"title":{},"body":{"index.html":{}}}],["features",{"_index":1403,"title":{},"body":{"index.html":{}}}],["few",{"_index":1395,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"modules/AppModule.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMatchDto.html":{},"classes/CreateMatchPlayerDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateTerrainDto.html":{},"injectables/CustomResponseInterceptor.html":{},"classes/EventsGateway.html":{},"modules/EventsModule.html":{},"controllers/GeminiController.html":{},"classes/GeminiMessageDto.html":{},"modules/GeminiModule.html":{},"injectables/GeminiService.html":{},"classes/LoginDto.html":{},"controllers/MailerController.html":{},"modules/MailerModule.html":{},"injectables/MailerService.html":{},"classes/Match.html":{},"controllers/MatchController.html":{},"modules/MatchModule.html":{},"classes/MatchPlayer.html":{},"controllers/MatchPlayerController.html":{},"modules/MatchPlayerModule.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"classes/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SendMailDto.html":{},"classes/SignupDto.html":{},"classes/Terrain.html":{},"controllers/TerrainController.html":{},"modules/TerrainModule.html":{},"injectables/TerrainService.html":{},"injectables/TokenService.html":{},"classes/UpdateMatchDto.html":{},"classes/UpdateMatchPlayerDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateTerrainDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["find",{"_index":883,"title":{},"body":{"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{}}}],["findall",{"_index":719,"title":{},"body":{"controllers/MatchController.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"controllers/TerrainController.html":{},"injectables/TerrainService.html":{}}}],["findallmatches",{"_index":922,"title":{},"body":{"injectables/MatchService.html":{}}}],["findallmatchplayer",{"_index":781,"title":{},"body":{"controllers/MatchPlayerController.html":{},"injectables/MatchPlayerService.html":{}}}],["findbyidandupdate(id",{"_index":1266,"title":{},"body":{"injectables/UserService.html":{}}}],["findjoinedmatchbyid",{"_index":839,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["findjoinedmatchbyid(id",{"_index":852,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["findmatchbyid",{"_index":923,"title":{},"body":{"injectables/MatchService.html":{}}}],["findmatchbyid(id",{"_index":930,"title":{},"body":{"injectables/MatchService.html":{}}}],["findmessagesofmatch",{"_index":1006,"title":{},"body":{"injectables/MessageService.html":{}}}],["findmessagesofmatch(matchid",{"_index":1012,"title":{},"body":{"injectables/MessageService.html":{}}}],["findmymatches",{"_index":924,"title":{},"body":{"injectables/MatchService.html":{}}}],["findmymatches(id",{"_index":932,"title":{},"body":{"injectables/MatchService.html":{}}}],["findmymatchplayer",{"_index":840,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["findmymatchplayer(@getcurrentuserid",{"_index":808,"title":{},"body":{"controllers/MatchPlayerController.html":{}}}],["findmymatchplayer(userid",{"_index":854,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["findone",{"_index":720,"title":{},"body":{"controllers/MatchController.html":{},"controllers/MatchPlayerController.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"controllers/TerrainController.html":{}}}],["findone(@getcurrentuserid",{"_index":745,"title":{},"body":{"controllers/MatchController.html":{},"controllers/TerrainController.html":{}}}],["findone(@param('id",{"_index":821,"title":{},"body":{"controllers/MatchPlayerController.html":{},"controllers/MessageController.html":{}}}],["findone(id",{"_index":727,"title":{},"body":{"controllers/MatchController.html":{},"controllers/MatchPlayerController.html":{},"injectables/MatchPlayerService.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"controllers/TerrainController.html":{}}}],["focus",{"_index":1402,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1435,"title":{},"body":{"index.html":{}}}],["forbiddenexception",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TokenService.html":{}}}],["forbiddenexception('access",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TokenService.html":{}}}],["format",{"_index":1521,"title":{},"body":{"miscellaneous/variables.html":{}}}],["found",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GeminiService.html":{},"injectables/MatchPlayerService.html":{}}}],["framework",{"_index":1342,"title":{},"body":{"index.html":{}}}],["full",{"_index":874,"title":{},"body":{"injectables/MatchPlayerService.html":{},"index.html":{}}}],["function",{"_index":1300,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1336,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1398,"title":{},"body":{"index.html":{}}}],["gemini",{"_index":558,"title":{},"body":{"controllers/GeminiController.html":{}}}],["gemini.config",{"_index":615,"title":{},"body":{"injectables/GeminiService.html":{}}}],["gemini.controller",{"_index":587,"title":{},"body":{"modules/GeminiModule.html":{}}}],["gemini.provider",{"_index":592,"title":{},"body":{"modules/GeminiModule.html":{}}}],["gemini.service",{"_index":573,"title":{},"body":{"controllers/GeminiController.html":{},"modules/GeminiModule.html":{}}}],["gemini/gemini.module",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["gemini_model_name",{"_index":614,"title":{},"body":{"injectables/GeminiService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["gemini_model_name_used",{"_index":1492,"title":{},"body":{"miscellaneous/variables.html":{}}}],["geminicontroller",{"_index":556,"title":{"controllers/GeminiController.html":{}},"body":{"controllers/GeminiController.html":{},"modules/GeminiModule.html":{},"coverage.html":{}}}],["geminimessagedto",{"_index":567,"title":{"classes/GeminiMessageDto.html":{}},"body":{"controllers/GeminiController.html":{},"classes/GeminiMessageDto.html":{},"coverage.html":{}}}],["geminimodule",{"_index":86,"title":{"modules/GeminiModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GeminiModule.html":{},"modules.html":{},"overview.html":{}}}],["geminipromodelprovider",{"_index":591,"title":{},"body":{"modules/GeminiModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["geminiservice",{"_index":572,"title":{"injectables/GeminiService.html":{}},"body":{"controllers/GeminiController.html":{},"modules/GeminiModule.html":{},"injectables/GeminiService.html":{},"coverage.html":{},"overview.html":{}}}],["genai",{"_index":1546,"title":{},"body":{"miscellaneous/variables.html":{}}}],["genai.getgenerativemodel",{"_index":1548,"title":{},"body":{"miscellaneous/variables.html":{}}}],["generatetokens",{"_index":1146,"title":{},"body":{"injectables/TokenService.html":{}}}],["generatetokens(userid",{"_index":1153,"title":{},"body":{"injectables/TokenService.html":{}}}],["generation_config",{"_index":1294,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["generationconfig",{"_index":1493,"title":{},"body":{"miscellaneous/variables.html":{}}}],["generativemodel",{"_index":601,"title":{},"body":{"injectables/GeminiService.html":{}}}],["get(\"/:idmatch",{"_index":740,"title":{},"body":{"controllers/MatchController.html":{}}}],["get(\"/match/joined",{"_index":1242,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:idmatch",{"_index":732,"title":{},"body":{"controllers/MatchController.html":{}}}],["get('/all",{"_index":810,"title":{},"body":{"controllers/MatchPlayerController.html":{}}}],["get('/match/joined",{"_index":1227,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/matches",{"_index":1224,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/matchs/:terrainid",{"_index":1100,"title":{},"body":{"controllers/TerrainController.html":{}}}],["get('/mine",{"_index":807,"title":{},"body":{"controllers/MatchPlayerController.html":{},"controllers/TerrainController.html":{}}}],["get('/my",{"_index":728,"title":{},"body":{"controllers/MatchController.html":{}}}],["get('/statistics",{"_index":1088,"title":{},"body":{"controllers/TerrainController.html":{}}}],["get(':id",{"_index":793,"title":{},"body":{"controllers/MatchPlayerController.html":{},"controllers/MessageController.html":{}}}],["get('match/:idmatch",{"_index":981,"title":{},"body":{"controllers/MessageController.html":{}}}],["getcurrentuser",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TerrainController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getcurrentuser('refreshtoken",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{}}}],["getcurrentuser(@getcurrentuserid",{"_index":1236,"title":{},"body":{"controllers/UserController.html":{}}}],["getcurrentuser(sub",{"_index":1221,"title":{},"body":{"controllers/UserController.html":{}}}],["getcurrentuserid",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GeminiController.html":{},"controllers/MatchController.html":{},"controllers/MatchPlayerController.html":{},"controllers/TerrainController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getjointedmatche(idjointedmatch",{"_index":1271,"title":{},"body":{"injectables/UserService.html":{}}}],["getjointedmatches",{"_index":1253,"title":{},"body":{"injectables/UserService.html":{}}}],["getjointedmatches(id",{"_index":1261,"title":{},"body":{"injectables/UserService.html":{}}}],["getmatchbyid",{"_index":721,"title":{},"body":{"controllers/MatchController.html":{}}}],["getmatchbyid(@param(\"idmatch",{"_index":741,"title":{},"body":{"controllers/MatchController.html":{}}}],["getmatchbyid(matchid",{"_index":731,"title":{},"body":{"controllers/MatchController.html":{}}}],["getmatchsofterrain",{"_index":1078,"title":{},"body":{"controllers/TerrainController.html":{},"injectables/TerrainService.html":{}}}],["getmatchsofterrain(@param('terrainid",{"_index":1101,"title":{},"body":{"controllers/TerrainController.html":{}}}],["getmatchsofterrain(terrainid",{"_index":1084,"title":{},"body":{"controllers/TerrainController.html":{},"injectables/TerrainService.html":{}}}],["getmessagesofmatch",{"_index":974,"title":{},"body":{"controllers/MessageController.html":{}}}],["getmessagesofmatch(@param('idmatch",{"_index":996,"title":{},"body":{"controllers/MessageController.html":{}}}],["getmessagesofmatch(idmatch",{"_index":980,"title":{},"body":{"controllers/MessageController.html":{}}}],["getmyterrain",{"_index":1111,"title":{},"body":{"injectables/TerrainService.html":{}}}],["getmyterrain(managerid",{"_index":1118,"title":{},"body":{"injectables/TerrainService.html":{}}}],["getownmatchs",{"_index":1214,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getownmatchs(@getcurrentuserid",{"_index":1240,"title":{},"body":{"controllers/UserController.html":{}}}],["getownmatchs(id",{"_index":1263,"title":{},"body":{"injectables/UserService.html":{}}}],["getownmatchs(sub",{"_index":1223,"title":{},"body":{"controllers/UserController.html":{}}}],["getsession",{"_index":599,"title":{},"body":{"injectables/GeminiService.html":{}}}],["getsession(sessionid",{"_index":607,"title":{},"body":{"injectables/GeminiService.html":{}}}],["getstatistics",{"_index":1112,"title":{},"body":{"injectables/TerrainService.html":{}}}],["getstatistics(user",{"_index":1120,"title":{},"body":{"injectables/TerrainService.html":{}}}],["getstatisticsofmanagertoday",{"_index":1079,"title":{},"body":{"controllers/TerrainController.html":{}}}],["getstatisticsofmanagertoday(@getcurrentuser",{"_index":1098,"title":{},"body":{"controllers/TerrainController.html":{}}}],["getstatisticsofmanagertoday(user",{"_index":1087,"title":{},"body":{"controllers/TerrainController.html":{}}}],["getting",{"_index":1338,"title":{"index.html":{}},"body":{}}],["give",{"_index":1514,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gonna",{"_index":510,"title":{},"body":{"classes/EventsGateway.html":{}}}],["good",{"_index":1515,"title":{},"body":{"miscellaneous/variables.html":{}}}],["google/generative",{"_index":618,"title":{},"body":{"injectables/GeminiService.html":{},"dependencies.html":{}}}],["googlegenerativeai(process.env.gemini_api_key",{"_index":1547,"title":{},"body":{"miscellaneous/variables.html":{}}}],["graph",{"_index":1425,"title":{},"body":{"index.html":{}}}],["griffen",{"_index":1503,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grow",{"_index":1445,"title":{},"body":{"index.html":{}}}],["gte",{"_index":944,"title":{},"body":{"injectables/MatchService.html":{}}}],["handleconnection",{"_index":480,"title":{},"body":{"classes/EventsGateway.html":{}}}],["handleconnection(client",{"_index":489,"title":{},"body":{"classes/EventsGateway.html":{}}}],["handledisconnect",{"_index":481,"title":{},"body":{"classes/EventsGateway.html":{}}}],["handledisconnect(client",{"_index":494,"title":{},"body":{"classes/EventsGateway.html":{}}}],["handlemessage",{"_index":482,"title":{},"body":{"classes/EventsGateway.html":{}}}],["handlemessage(client",{"_index":496,"title":{},"body":{"classes/EventsGateway.html":{}}}],["hands",{"_index":1419,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1408,"title":{},"body":{"index.html":{}}}],["hashedpassword",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashedrt",{"_index":1167,"title":{},"body":{"injectables/TokenService.html":{}}}],["hashrt",{"_index":1159,"title":{},"body":{"injectables/TokenService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["height",{"_index":430,"title":{},"body":{"classes/CreateTerrainDto.html":{},"classes/Terrain.html":{}}}],["hello",{"_index":536,"title":{},"body":{"classes/EventsGateway.html":{}}}],["help",{"_index":1423,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["here",{"_index":514,"title":{},"body":{"classes/EventsGateway.html":{},"index.html":{}}}],["history",{"_index":620,"title":{},"body":{"injectables/GeminiService.html":{}}}],["host",{"_index":14,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/MailerService.html":{}}}],["host.switchtohttp",{"_index":40,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpcode",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.created",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":27,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"injectables/GeminiService.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"injectables/TerrainService.html":{}}}],["httpexception(\"match",{"_index":873,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["httpexception(\"request",{"_index":900,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["httpexception(\"sorry",{"_index":948,"title":{},"body":{"injectables/MatchService.html":{}}}],["httpexception(\"unauthorized",{"_index":902,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["httpexception('invalid",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpexception('user",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GeminiService.html":{}}}],["httpexception(e",{"_index":892,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["https://nestjs.com",{"_index":1458,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":28,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GeminiService.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"injectables/TerrainService.html":{}}}],["httpstatus.bad_request",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{}}}],["httpstatus.conflict",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MatchPlayerService.html":{}}}],["httpstatus.forbidden",{"_index":1126,"title":{},"body":{"injectables/TerrainService.html":{}}}],["httpstatus.internal_server_error",{"_index":46,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/MatchPlayerService.html":{}}}],["httpstatus.not_found",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GeminiService.html":{},"injectables/MatchPlayerService.html":{}}}],["httpstatus.unauthorized",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MatchPlayerService.html":{}}}],["httpstatus.unprocessable_entity",{"_index":862,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["human",{"_index":1529,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hydrateddocument",{"_index":711,"title":{},"body":{"classes/Match.html":{},"classes/MatchPlayer.html":{},"classes/Message.html":{},"classes/Terrain.html":{},"classes/User.html":{},"miscellaneous/typealiases.html":{}}}],["id",{"_index":724,"title":{},"body":{"controllers/MatchController.html":{},"controllers/MatchPlayerController.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"controllers/TerrainController.html":{},"injectables/TerrainService.html":{},"injectables/UserService.html":{}}}],["id.decorator.ts",{"_index":1288,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":1275,"title":{},"body":{"coverage.html":{}}}],["idmatch",{"_index":983,"title":{},"body":{"controllers/MessageController.html":{}}}],["implements",{"_index":8,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/CustomResponseInterceptor.html":{},"classes/EventsGateway.html":{}}}],["import",{"_index":26,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMatchDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateTerrainDto.html":{},"injectables/CustomResponseInterceptor.html":{},"classes/EventsGateway.html":{},"modules/EventsModule.html":{},"controllers/GeminiController.html":{},"classes/GeminiMessageDto.html":{},"modules/GeminiModule.html":{},"injectables/GeminiService.html":{},"classes/LoginDto.html":{},"controllers/MailerController.html":{},"modules/MailerModule.html":{},"injectables/MailerService.html":{},"classes/Match.html":{},"controllers/MatchController.html":{},"modules/MatchModule.html":{},"classes/MatchPlayer.html":{},"controllers/MatchPlayerController.html":{},"modules/MatchPlayerModule.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"classes/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"classes/Terrain.html":{},"controllers/TerrainController.html":{},"modules/TerrainModule.html":{},"injectables/TerrainService.html":{},"injectables/TokenService.html":{},"classes/UpdateMatchDto.html":{},"classes/UpdateMatchPlayerDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateTerrainDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/GeminiModule.html":{},"modules/MatchModule.html":{},"modules/MatchPlayerModule.html":{},"modules/MessageModule.html":{},"modules/TerrainModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMatchDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateTerrainDto.html":{},"injectables/CustomResponseInterceptor.html":{},"classes/EventsGateway.html":{},"controllers/GeminiController.html":{},"classes/GeminiMessageDto.html":{},"injectables/GeminiService.html":{},"classes/LoginDto.html":{},"injectables/MailerService.html":{},"classes/Match.html":{},"controllers/MatchController.html":{},"classes/MatchPlayer.html":{},"controllers/MatchPlayerController.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"classes/Message.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/RtStrategy.html":{},"classes/SendMailDto.html":{},"classes/SignupDto.html":{},"classes/Terrain.html":{},"controllers/TerrainController.html":{},"injectables/TerrainService.html":{},"injectables/TokenService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"modules/AppModule.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMatchDto.html":{},"classes/CreateMatchPlayerDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateTerrainDto.html":{},"injectables/CustomResponseInterceptor.html":{},"classes/EventsGateway.html":{},"modules/EventsModule.html":{},"controllers/GeminiController.html":{},"classes/GeminiMessageDto.html":{},"modules/GeminiModule.html":{},"injectables/GeminiService.html":{},"classes/LoginDto.html":{},"controllers/MailerController.html":{},"modules/MailerModule.html":{},"injectables/MailerService.html":{},"classes/Match.html":{},"controllers/MatchController.html":{},"modules/MatchModule.html":{},"classes/MatchPlayer.html":{},"controllers/MatchPlayerController.html":{},"modules/MatchPlayerModule.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"classes/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SendMailDto.html":{},"classes/SignupDto.html":{},"classes/Terrain.html":{},"controllers/TerrainController.html":{},"modules/TerrainModule.html":{},"injectables/TerrainService.html":{},"injectables/TokenService.html":{},"classes/UpdateMatchDto.html":{},"classes/UpdateMatchPlayerDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateTerrainDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["information",{"_index":1382,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["infrastructure",{"_index":1405,"title":{},"body":{"index.html":{}}}],["inject",{"_index":571,"title":{},"body":{"controllers/GeminiController.html":{},"injectables/GeminiService.html":{}}}],["inject(gemini_model_name",{"_index":621,"title":{},"body":{"injectables/GeminiService.html":{}}}],["injectable",{"_index":123,"title":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/CustomResponseInterceptor.html":{},"injectables/GeminiService.html":{},"injectables/MailerService.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"injectables/MessageService.html":{},"injectables/RtStrategy.html":{},"injectables/TerrainService.html":{},"injectables/TokenService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/CustomResponseInterceptor.html":{},"injectables/GeminiService.html":{},"injectables/MailerService.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"injectables/MessageService.html":{},"injectables/RtStrategy.html":{},"injectables/TerrainService.html":{},"injectables/TokenService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":124,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/CustomResponseInterceptor.html":{},"injectables/GeminiService.html":{},"injectables/MailerService.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"injectables/MessageService.html":{},"injectables/RtStrategy.html":{},"injectables/TerrainService.html":{},"injectables/TokenService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectmodel",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GeminiService.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"injectables/MessageService.html":{},"injectables/TerrainService.html":{},"injectables/TokenService.html":{},"injectables/UserService.html":{}}}],["injectmodel(match.name",{"_index":860,"title":{},"body":{"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"injectables/TerrainService.html":{}}}],["injectmodel(matchplayer.name",{"_index":859,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["injectmodel(message.name",{"_index":1017,"title":{},"body":{"injectables/MessageService.html":{}}}],["injectmodel(terrain.name",{"_index":622,"title":{},"body":{"injectables/GeminiService.html":{},"injectables/MatchService.html":{},"injectables/TerrainService.html":{}}}],["injectmodel(user.name",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GeminiService.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"injectables/TokenService.html":{}}}],["install",{"_index":1397,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":1356,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":44,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/CustomResponseInterceptor.html":{}}}],["interact",{"_index":1426,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":451,"title":{},"body":{"injectables/CustomResponseInterceptor.html":{}}}],["intercept(context",{"_index":452,"title":{},"body":{"injectables/CustomResponseInterceptor.html":{}}}],["interface",{"_index":63,"title":{"interfaces/ApiResponse.html":{}},"body":{"interfaces/ApiResponse.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":64,"title":{},"body":{"interfaces/ApiResponse.html":{}}}],["interfaces/api",{"_index":34,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/CustomResponseInterceptor.html":{}}}],["internal",{"_index":49,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["invalid",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["isaccepted",{"_index":765,"title":{},"body":{"classes/MatchPlayer.html":{},"injectables/MatchPlayerService.html":{},"injectables/UserService.html":{}}}],["isdate",{"_index":389,"title":{},"body":{"classes/CreateMatchDto.html":{},"classes/CreateTerrainDto.html":{},"classes/Message.html":{}}}],["isemail",{"_index":664,"title":{},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{}}}],["isemail()@isstring()@isnotempty",{"_index":660,"title":{},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{}}}],["isenum",{"_index":1053,"title":{},"body":{"classes/SignupDto.html":{}}}],["isenum(role",{"_index":1060,"title":{},"body":{"classes/SignupDto.html":{}}}],["ismatch",{"_index":1170,"title":{},"body":{"injectables/TokenService.html":{}}}],["ismatchexists",{"_index":863,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["ismatchexists.playersofmatch.length",{"_index":871,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["isn't",{"_index":1539,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isnotempty",{"_index":390,"title":{},"body":{"classes/CreateMatchDto.html":{},"classes/CreateTerrainDto.html":{},"classes/LoginDto.html":{},"classes/SignupDto.html":{}}}],["isnotempty()@isstring",{"_index":387,"title":{},"body":{"classes/CreateMatchDto.html":{}}}],["isnotempty()@type(undefined)@isdate",{"_index":385,"title":{},"body":{"classes/CreateMatchDto.html":{},"classes/CreateTerrainDto.html":{}}}],["isnumber",{"_index":440,"title":{},"body":{"classes/CreateTerrainDto.html":{},"classes/UpdateUserDto.html":{}}}],["isoptional",{"_index":447,"title":{},"body":{"classes/CreateTerrainDto.html":{},"classes/SignupDto.html":{},"classes/UpdateUserDto.html":{}}}],["isoptional()@isstring",{"_index":437,"title":{},"body":{"classes/CreateTerrainDto.html":{},"classes/UpdateUserDto.html":{}}}],["isoptional()@length(8",{"_index":1188,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isoptional()@minlength(8)@maxlength(8",{"_index":1049,"title":{},"body":{"classes/SignupDto.html":{}}}],["ispublic",{"_index":142,"title":{},"body":{"injectables/AtGuard.html":{}}}],["isstring",{"_index":391,"title":{},"body":{"classes/CreateMatchDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateTerrainDto.html":{},"classes/GeminiMessageDto.html":{},"classes/LoginDto.html":{},"classes/Message.html":{},"classes/SignupDto.html":{},"classes/UpdateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":1046,"title":{},"body":{"classes/SignupDto.html":{}}}],["isstring()@isnotempty()@minlength(6",{"_index":662,"title":{},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{}}}],["isstring()@isoptional()@isenum(role",{"_index":1051,"title":{},"body":{"classes/SignupDto.html":{}}}],["isvalid",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{}}}],["isvalidobjectid",{"_index":415,"title":{},"body":{"classes/CreateMessageDto.html":{},"injectables/MatchPlayerService.html":{}}}],["isvalidobjectid(param.matchid",{"_index":861,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["it's",{"_index":1520,"title":{},"body":{"miscellaneous/variables.html":{}}}],["job",{"_index":1438,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1440,"title":{},"body":{"index.html":{}}}],["join",{"_index":1451,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["joined",{"_index":869,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["joinmatch",{"_index":782,"title":{},"body":{"controllers/MatchPlayerController.html":{},"injectables/MatchPlayerService.html":{}}}],["joinmatch(@param",{"_index":805,"title":{},"body":{"controllers/MatchPlayerController.html":{}}}],["joinmatch(param",{"_index":795,"title":{},"body":{"controllers/MatchPlayerController.html":{},"injectables/MatchPlayerService.html":{}}}],["jointedmatch",{"_index":880,"title":{},"body":{"injectables/MatchPlayerService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["jointedmatch\").populate",{"_index":1270,"title":{},"body":{"injectables/UserService.html":{}}}],["jointedmatches",{"_index":1215,"title":{},"body":{"controllers/UserController.html":{}}}],["jointedmatches(@getcurrentuserid",{"_index":1243,"title":{},"body":{"controllers/UserController.html":{}}}],["jointedmatches(sub",{"_index":1226,"title":{},"body":{"controllers/UserController.html":{}}}],["json",{"_index":1522,"title":{},"body":{"miscellaneous/variables.html":{}}}],["json.stringify(terraininfo",{"_index":651,"title":{},"body":{"injectables/GeminiService.html":{}}}],["jwt",{"_index":152,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{}}}],["jwtfromrequest",{"_index":165,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["jwtmodule",{"_index":268,"title":{},"body":{"modules/AuthModule.html":{},"modules/EventsModule.html":{}}}],["jwtmodule.register",{"_index":271,"title":{},"body":{"modules/AuthModule.html":{},"modules/EventsModule.html":{}}}],["jwtpayload",{"_index":157,"title":{},"body":{"injectables/AtStrategy.html":{},"classes/EventsGateway.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["jwtpayloadwithrt",{"_index":1283,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["jwtservice",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"classes/EventsGateway.html":{},"injectables/TokenService.html":{}}}],["kamil",{"_index":1455,"title":{},"body":{"index.html":{}}}],["key",{"_index":72,"title":{},"body":{"interfaces/ApiResponse.html":{},"injectables/MatchPlayerService.html":{},"index.html":{}}}],["keyof",{"_index":1552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["know",{"_index":956,"title":{},"body":{"injectables/MatchService.html":{}}}],["label",{"_index":431,"title":{},"body":{"classes/CreateTerrainDto.html":{},"classes/Terrain.html":{}}}],["last_name",{"_index":885,"title":{},"body":{"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["latitude",{"_index":395,"title":{},"body":{"classes/CreateMatchDto.html":{},"classes/CreateTerrainDto.html":{},"classes/Terrain.html":{}}}],["lean",{"_index":1267,"title":{},"body":{"injectables/UserService.html":{}}}],["learn",{"_index":1411,"title":{},"body":{"index.html":{}}}],["legend",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/GeminiModule.html":{},"modules/MailerModule.html":{},"modules/MatchModule.html":{},"modules/MatchPlayerModule.html":{},"modules/MessageModule.html":{},"modules/TerrainModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":1190,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["length(8",{"_index":1191,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["license",{"_index":1461,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1443,"title":{},"body":{"index.html":{}}}],["linkedin",{"_index":1437,"title":{},"body":{"index.html":{}}}],["literal",{"_index":69,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AuthController.html":{},"miscellaneous/typealiases.html":{}}}],["location",{"_index":1537,"title":{},"body":{"miscellaneous/variables.html":{}}}],["log",{"_index":1231,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["logged",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{}}}],["login",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(dto",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logindata",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindata",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindata.email",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindata.password",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto",{"_index":182,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logout",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout(userid",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["lol:w",{"_index":1021,"title":{},"body":{"injectables/MessageService.html":{}}}],["longitude",{"_index":432,"title":{},"body":{"classes/CreateTerrainDto.html":{},"classes/Terrain.html":{}}}],["looking",{"_index":1383,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1434,"title":{},"body":{"index.html":{}}}],["lte",{"_index":945,"title":{},"body":{"injectables/MatchService.html":{}}}],["m",{"_index":889,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["m.matchid.userid.tostring",{"_index":890,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["mail",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{}}}],["mail.dto",{"_index":686,"title":{},"body":{"injectables/MailerService.html":{}}}],["mail.dto.ts",{"_index":1040,"title":{},"body":{"classes/SendMailDto.html":{},"coverage.html":{}}}],["mail.dto.ts:3",{"_index":1043,"title":{},"body":{"classes/SendMailDto.html":{}}}],["mail.dto.ts:4",{"_index":1041,"title":{},"body":{"classes/SendMailDto.html":{}}}],["mail.dto.ts:5",{"_index":1042,"title":{},"body":{"classes/SendMailDto.html":{}}}],["mailer",{"_index":669,"title":{},"body":{"controllers/MailerController.html":{}}}],["mailer.controller",{"_index":676,"title":{},"body":{"modules/MailerModule.html":{}}}],["mailer.service",{"_index":670,"title":{},"body":{"controllers/MailerController.html":{},"modules/MailerModule.html":{}}}],["mailer/mailer.module",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["mailercontroller",{"_index":667,"title":{"controllers/MailerController.html":{}},"body":{"controllers/MailerController.html":{},"modules/MailerModule.html":{},"coverage.html":{}}}],["mailermodule",{"_index":87,"title":{"modules/MailerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailerModule.html":{},"modules.html":{},"overview.html":{}}}],["mailerservice",{"_index":275,"title":{"injectables/MailerService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/MailerController.html":{},"modules/MailerModule.html":{},"injectables/MailerService.html":{},"coverage.html":{},"overview.html":{}}}],["mailtransport",{"_index":678,"title":{},"body":{"injectables/MailerService.html":{}}}],["make",{"_index":511,"title":{},"body":{"classes/EventsGateway.html":{}}}],["makes",{"_index":1391,"title":{},"body":{"index.html":{}}}],["manager",{"_index":1124,"title":{},"body":{"injectables/TerrainService.html":{},"miscellaneous/enumerations.html":{}}}],["managerid",{"_index":629,"title":{},"body":{"injectables/GeminiService.html":{},"classes/Terrain.html":{},"injectables/TerrainService.html":{},"injectables/UserService.html":{}}}],["managing",{"_index":1404,"title":{},"body":{"index.html":{}}}],["map",{"_index":461,"title":{},"body":{"injectables/CustomResponseInterceptor.html":{},"injectables/GeminiService.html":{}}}],["map((data",{"_index":465,"title":{},"body":{"injectables/CustomResponseInterceptor.html":{}}}],["match",{"_index":110,"title":{"classes/Match.html":{}},"body":{"modules/AppModule.html":{},"classes/CreateMatchPlayerDto.html":{},"classes/Match.html":{},"controllers/MatchController.html":{},"modules/MatchModule.html":{},"classes/MatchPlayer.html":{},"controllers/MatchPlayerController.html":{},"modules/MatchPlayerModule.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"classes/Message.html":{},"classes/Terrain.html":{},"modules/TerrainModule.html":{},"injectables/TerrainService.html":{},"classes/UpdateMatchPlayerDto.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["match._id",{"_index":878,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["match.controller",{"_index":759,"title":{},"body":{"modules/MatchModule.html":{}}}],["match.dto",{"_index":738,"title":{},"body":{"controllers/MatchController.html":{},"injectables/MatchService.html":{},"classes/UpdateMatchDto.html":{}}}],["match.dto.ts",{"_index":382,"title":{},"body":{"classes/CreateMatchDto.html":{},"classes/UpdateMatchDto.html":{},"coverage.html":{}}}],["match.dto.ts:12",{"_index":388,"title":{},"body":{"classes/CreateMatchDto.html":{}}}],["match.dto.ts:8",{"_index":386,"title":{},"body":{"classes/CreateMatchDto.html":{}}}],["match.name",{"_index":762,"title":{},"body":{"modules/MatchModule.html":{},"modules/MatchPlayerModule.html":{},"modules/TerrainModule.html":{}}}],["match.populate(\"userid",{"_index":881,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["match.service",{"_index":736,"title":{},"body":{"controllers/MatchController.html":{},"modules/MatchModule.html":{}}}],["match/match.module",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["matchcontroller",{"_index":716,"title":{"controllers/MatchController.html":{}},"body":{"controllers/MatchController.html":{},"modules/MatchModule.html":{},"coverage.html":{}}}],["matchcreated",{"_index":950,"title":{},"body":{"injectables/MatchService.html":{}}}],["matchcreated._id",{"_index":957,"title":{},"body":{"injectables/MatchService.html":{}}}],["matchdocument",{"_index":712,"title":{},"body":{"classes/Match.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["matches",{"_index":729,"title":{},"body":{"controllers/MatchController.html":{},"miscellaneous/variables.html":{}}}],["matchid",{"_index":404,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/EventsGateway.html":{},"controllers/MatchController.html":{},"classes/MatchPlayer.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"classes/Message.html":{},"injectables/MessageService.html":{},"injectables/UserService.html":{}}}],["matching",{"_index":62,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"modules/AppModule.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMatchDto.html":{},"classes/CreateMatchPlayerDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateTerrainDto.html":{},"injectables/CustomResponseInterceptor.html":{},"classes/EventsGateway.html":{},"modules/EventsModule.html":{},"controllers/GeminiController.html":{},"classes/GeminiMessageDto.html":{},"modules/GeminiModule.html":{},"injectables/GeminiService.html":{},"classes/LoginDto.html":{},"controllers/MailerController.html":{},"modules/MailerModule.html":{},"injectables/MailerService.html":{},"classes/Match.html":{},"controllers/MatchController.html":{},"modules/MatchModule.html":{},"classes/MatchPlayer.html":{},"controllers/MatchPlayerController.html":{},"modules/MatchPlayerModule.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"classes/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SendMailDto.html":{},"classes/SignupDto.html":{},"classes/Terrain.html":{},"controllers/TerrainController.html":{},"modules/TerrainModule.html":{},"injectables/TerrainService.html":{},"injectables/TokenService.html":{},"classes/UpdateMatchDto.html":{},"classes/UpdateMatchPlayerDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateTerrainDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matchmodel",{"_index":843,"title":{},"body":{"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"injectables/TerrainService.html":{}}}],["matchmodule",{"_index":88,"title":{"modules/MatchModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/MatchModule.html":{},"modules.html":{},"overview.html":{}}}],["matchplayer",{"_index":705,"title":{"classes/MatchPlayer.html":{}},"body":{"classes/Match.html":{},"classes/MatchPlayer.html":{},"modules/MatchPlayerModule.html":{},"injectables/MatchPlayerService.html":{},"classes/User.html":{},"coverage.html":{}}}],["matchplayer._id",{"_index":914,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["matchplayer.deleteone",{"_index":907,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["matchplayer.filter",{"_index":888,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["matchplayer.isaccepted",{"_index":904,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["matchplayer.matchid.userid.tostring",{"_index":901,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["matchplayer.name",{"_index":835,"title":{},"body":{"modules/MatchPlayerModule.html":{}}}],["matchplayer.save",{"_index":906,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["matchplayer.userid.tostring",{"_index":908,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["matchplayercontroller",{"_index":776,"title":{"controllers/MatchPlayerController.html":{}},"body":{"controllers/MatchPlayerController.html":{},"modules/MatchPlayerModule.html":{},"coverage.html":{}}}],["matchplayerdocument",{"_index":770,"title":{},"body":{"classes/MatchPlayer.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["matchplayerid",{"_index":787,"title":{},"body":{"controllers/MatchPlayerController.html":{}}}],["matchplayermodel",{"_index":845,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["matchplayermodule",{"_index":89,"title":{"modules/MatchPlayerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MatchModule.html":{},"modules/MatchPlayerModule.html":{},"injectables/MatchPlayerService.html":{},"modules.html":{},"overview.html":{}}}],["matchplayerschema",{"_index":771,"title":{},"body":{"classes/MatchPlayer.html":{},"modules/MatchPlayerModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["matchplayerschema.index",{"_index":773,"title":{},"body":{"classes/MatchPlayer.html":{}}}],["matchplayerservice",{"_index":803,"title":{"injectables/MatchPlayerService.html":{}},"body":{"controllers/MatchPlayerController.html":{},"modules/MatchPlayerModule.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"coverage.html":{},"overview.html":{}}}],["matchschema",{"_index":714,"title":{},"body":{"classes/Match.html":{},"modules/MatchModule.html":{},"modules/MatchPlayerModule.html":{},"modules/TerrainModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["matchservice",{"_index":485,"title":{"injectables/MatchService.html":{}},"body":{"classes/EventsGateway.html":{},"controllers/MatchController.html":{},"modules/MatchModule.html":{},"injectables/MatchService.html":{},"coverage.html":{},"overview.html":{}}}],["matchsin",{"_index":638,"title":{},"body":{"injectables/GeminiService.html":{},"injectables/MatchService.html":{},"classes/Terrain.html":{},"injectables/TerrainService.html":{},"injectables/UserService.html":{}}}],["mau",{"_index":1387,"title":{},"body":{"index.html":{}}}],["max",{"_index":1054,"title":{},"body":{"classes/SignupDto.html":{},"classes/UpdateUserDto.html":{}}}],["maxlength",{"_index":1055,"title":{},"body":{"classes/SignupDto.html":{}}}],["maxlength(8",{"_index":1059,"title":{},"body":{"classes/SignupDto.html":{}}}],["maxoutputtokens",{"_index":1494,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mention",{"_index":1524,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":47,"title":{"classes/Message.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"controllers/AuthController.html":{},"injectables/CustomResponseInterceptor.html":{},"modules/EventsModule.html":{},"injectables/GeminiService.html":{},"classes/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"coverage.html":{}}}],["message.controller",{"_index":1002,"title":{},"body":{"modules/MessageModule.html":{}}}],["message.dto",{"_index":505,"title":{},"body":{"classes/EventsGateway.html":{},"controllers/GeminiController.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"classes/UpdateMessageDto.html":{}}}],["message.dto.ts",{"_index":402,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/GeminiMessageDto.html":{},"classes/UpdateMessageDto.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["message.dto.ts:11",{"_index":409,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["message.dto.ts:21",{"_index":411,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["message.dto.ts:22",{"_index":413,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["message.dto.ts:23",{"_index":412,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["message.dto.ts:24",{"_index":414,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["message.dto.ts:6",{"_index":583,"title":{},"body":{"classes/GeminiMessageDto.html":{}}}],["message.name",{"_index":1004,"title":{},"body":{"modules/MessageModule.html":{}}}],["message.service",{"_index":987,"title":{},"body":{"controllers/MessageController.html":{},"modules/MessageModule.html":{}}}],["message/message.module",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["messagecontroller",{"_index":971,"title":{"controllers/MessageController.html":{}},"body":{"controllers/MessageController.html":{},"modules/MessageModule.html":{},"coverage.html":{}}}],["messagedocuement",{"_index":969,"title":{},"body":{"classes/Message.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["messagedto",{"_index":566,"title":{},"body":{"controllers/GeminiController.html":{}}}],["messagedto.content",{"_index":579,"title":{},"body":{"controllers/GeminiController.html":{}}}],["messagemodel",{"_index":1009,"title":{},"body":{"injectables/MessageService.html":{}}}],["messagemodule",{"_index":90,"title":{"modules/MessageModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/MessageModule.html":{},"modules.html":{},"overview.html":{}}}],["messages",{"_index":410,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["messages.content",{"_index":418,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["messages.matchid",{"_index":422,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["messages.sendername",{"_index":420,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["messages.sendid",{"_index":424,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["messageschema",{"_index":553,"title":{},"body":{"modules/EventsModule.html":{},"classes/Message.html":{},"modules/MessageModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["messageservice",{"_index":484,"title":{"injectables/MessageService.html":{}},"body":{"classes/EventsGateway.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"coverage.html":{},"overview.html":{}}}],["messagestructure",{"_index":408,"title":{},"body":{"classes/CreateMessageDto.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["metadata",{"_index":1328,"title":{},"body":{"dependencies.html":{}}}],["meter",{"_index":1536,"title":{},"body":{"miscellaneous/variables.html":{}}}],["methods",{"_index":11,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CustomResponseInterceptor.html":{},"classes/EventsGateway.html":{},"controllers/GeminiController.html":{},"injectables/GeminiService.html":{},"injectables/MailerService.html":{},"controllers/MatchController.html":{},"controllers/MatchPlayerController.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/RtStrategy.html":{},"controllers/TerrainController.html":{},"injectables/TerrainService.html":{},"injectables/TokenService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["min",{"_index":1056,"title":{},"body":{"classes/SignupDto.html":{},"classes/UpdateUserDto.html":{}}}],["minlength",{"_index":665,"title":{},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{}}}],["minlength(6",{"_index":666,"title":{},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{}}}],["minlength(8",{"_index":1058,"title":{},"body":{"classes/SignupDto.html":{}}}],["minutes",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MatchService.html":{}}}],["miscellaneous",{"_index":1331,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1442,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1361,"title":{},"body":{"index.html":{}}}],["model",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GeminiService.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"injectables/MessageService.html":{},"injectables/TerrainService.html":{},"injectables/TokenService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["modelinstance",{"_index":604,"title":{},"body":{"injectables/GeminiService.html":{}}}],["modelinstancewithcontext",{"_index":656,"title":{},"body":{"injectables/GeminiService.html":{}}}],["modelinstancewithcontext.sendmessage(content.tostring())).response.candidates.at(0).content",{"_index":658,"title":{},"body":{"injectables/GeminiService.html":{}}}],["module",{"_index":73,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/GeminiModule.html":{},"modules/MailerModule.html":{},"modules/MatchModule.html":{},"modules/MatchPlayerModule.html":{},"modules/MessageModule.html":{},"modules/TerrainModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/GeminiModule.html":{},"modules/MailerModule.html":{},"modules/MatchModule.html":{},"modules/MatchPlayerModule.html":{},"modules/MessageModule.html":{},"modules/TerrainModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modulelinker",{"_index":1122,"title":{},"body":{"injectables/TerrainService.html":{}}}],["modules",{"_index":75,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/GeminiModule.html":{},"modules/MailerModule.html":{},"modules/MatchModule.html":{},"modules/MatchPlayerModule.html":{},"modules/MessageModule.html":{},"modules/TerrainModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/mailer",{"_index":1310,"title":{},"body":{"dependencies.html":{}}}],["mongoose",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateMessageDto.html":{},"injectables/GeminiService.html":{},"classes/Match.html":{},"classes/MatchPlayer.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"classes/Message.html":{},"injectables/MessageService.html":{},"classes/Terrain.html":{},"injectables/TerrainService.html":{},"injectables/TokenService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["mongoosemodule",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/GeminiModule.html":{},"modules/MatchModule.html":{},"modules/MatchPlayerModule.html":{},"modules/MessageModule.html":{},"modules/TerrainModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forfeature",{"_index":593,"title":{},"body":{"modules/GeminiModule.html":{},"modules/MatchModule.html":{},"modules/MatchPlayerModule.html":{},"modules/MessageModule.html":{},"modules/TerrainModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forroot(process.env.mongo_uri",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["montion",{"_index":1519,"title":{},"body":{"miscellaneous/variables.html":{}}}],["more",{"_index":1381,"title":{},"body":{"index.html":{}}}],["mymatchplayer",{"_index":887,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["myśliwiec",{"_index":1456,"title":{},"body":{"index.html":{}}}],["name",{"_index":20,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMessageDto.html":{},"injectables/CustomResponseInterceptor.html":{},"classes/EventsGateway.html":{},"controllers/GeminiController.html":{},"modules/GeminiModule.html":{},"injectables/GeminiService.html":{},"injectables/MailerService.html":{},"controllers/MatchController.html":{},"modules/MatchModule.html":{},"controllers/MatchPlayerController.html":{},"modules/MatchPlayerModule.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"controllers/TerrainController.html":{},"modules/TerrainModule.html":{},"injectables/TerrainService.html":{},"injectables/TokenService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["names",{"_index":1532,"title":{},"body":{"miscellaneous/variables.html":{}}}],["need",{"_index":1430,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["neet",{"_index":954,"title":{},"body":{"injectables/MatchService.html":{}}}],["nest",{"_index":1348,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1460,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":457,"title":{},"body":{"injectables/CustomResponseInterceptor.html":{}}}],["nestjs",{"_index":1309,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["nestjs/class",{"_index":392,"title":{},"body":{"classes/CreateMatchDto.html":{},"classes/GeminiMessageDto.html":{},"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":29,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CustomResponseInterceptor.html":{},"modules/EventsModule.html":{},"controllers/GeminiController.html":{},"modules/GeminiModule.html":{},"injectables/GeminiService.html":{},"controllers/MailerController.html":{},"modules/MailerModule.html":{},"injectables/MailerService.html":{},"controllers/MatchController.html":{},"modules/MatchModule.html":{},"controllers/MatchPlayerController.html":{},"modules/MatchPlayerModule.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"injectables/RtStrategy.html":{},"controllers/TerrainController.html":{},"modules/TerrainModule.html":{},"injectables/TerrainService.html":{},"injectables/TokenService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/EventsGateway.html":{},"modules/EventsModule.html":{},"injectables/TokenService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1175,"title":{},"body":{"classes/UpdateMatchDto.html":{},"classes/UpdateMatchPlayerDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateTerrainDto.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"modules/EventsModule.html":{},"modules/GeminiModule.html":{},"injectables/GeminiService.html":{},"classes/Match.html":{},"modules/MatchModule.html":{},"classes/MatchPlayer.html":{},"modules/MatchPlayerModule.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"classes/Message.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/Terrain.html":{},"modules/TerrainModule.html":{},"injectables/TerrainService.html":{},"injectables/TokenService.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":138,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1318,"title":{},"body":{"dependencies.html":{}}}],["nestjs/websockets",{"_index":501,"title":{},"body":{"classes/EventsGateway.html":{},"dependencies.html":{}}}],["new",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CustomResponseInterceptor.html":{},"classes/EventsGateway.html":{},"injectables/GeminiService.html":{},"classes/Match.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"classes/Terrain.html":{},"injectables/TerrainService.html":{},"injectables/TokenService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newuser",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.save",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":453,"title":{},"body":{"injectables/CustomResponseInterceptor.html":{}}}],["next.handle().pipe",{"_index":464,"title":{},"body":{"injectables/CustomResponseInterceptor.html":{}}}],["node.js",{"_index":1341,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":684,"title":{},"body":{"injectables/MailerService.html":{},"dependencies.html":{}}}],["nodemailer.createtransport",{"_index":688,"title":{},"body":{"injectables/MailerService.html":{}}}],["npm",{"_index":1355,"title":{},"body":{"index.html":{}}}],["null",{"_index":59,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"injectables/CustomResponseInterceptor.html":{},"injectables/MatchPlayerService.html":{},"injectables/TerrainService.html":{},"injectables/TokenService.html":{}}}],["number",{"_index":439,"title":{},"body":{"classes/CreateTerrainDto.html":{},"injectables/MatchPlayerService.html":{},"injectables/MessageService.html":{},"classes/Terrain.html":{},"injectables/TerrainService.html":{}}}],["object",{"_index":54,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"miscellaneous/variables.html":{}}}],["observable",{"_index":456,"title":{},"body":{"injectables/CustomResponseInterceptor.html":{}}}],["offer",{"_index":1439,"title":{},"body":{"index.html":{}}}],["official",{"_index":1388,"title":{},"body":{"index.html":{}}}],["one",{"_index":1129,"title":{},"body":{"injectables/TerrainService.html":{}}}],["ongatewayconnection",{"_index":478,"title":{},"body":{"classes/EventsGateway.html":{}}}],["ongatewaydisconnect",{"_index":479,"title":{},"body":{"classes/EventsGateway.html":{}}}],["open",{"_index":1444,"title":{},"body":{"index.html":{}}}],["opration",{"_index":1527,"title":{},"body":{"miscellaneous/variables.html":{}}}],["optional",{"_index":22,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMessageDto.html":{},"classes/CreateTerrainDto.html":{},"injectables/CustomResponseInterceptor.html":{},"classes/EventsGateway.html":{},"controllers/GeminiController.html":{},"injectables/GeminiService.html":{},"injectables/MailerService.html":{},"controllers/MatchController.html":{},"controllers/MatchPlayerController.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"controllers/TerrainController.html":{},"injectables/TerrainService.html":{},"injectables/TokenService.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["otp",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/User.html":{}}}],["otpexpiry",{"_index":1194,"title":{},"body":{"classes/User.html":{}}}],["otplib",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["otpsend",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["otpsend(@body",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{}}}],["otpsend(data",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["otpverify",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["otpverify(@body",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{}}}],["otpverify(email",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["otpverify(undefined",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["out",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/GeminiModule.html":{},"modules/MailerModule.html":{},"modules/MatchModule.html":{},"modules/MatchPlayerModule.html":{},"modules/MessageModule.html":{},"modules/TerrainModule.html":{},"modules/UserModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":1466,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":903,"title":{},"body":{"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{}}}],["owners",{"_index":1510,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ownid",{"_index":894,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["ownmatchs",{"_index":958,"title":{},"body":{"injectables/MatchService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["package",{"_index":1307,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":735,"title":{},"body":{"controllers/MatchController.html":{},"controllers/MatchPlayerController.html":{},"injectables/MatchPlayerService.html":{},"controllers/MessageController.html":{},"controllers/TerrainController.html":{},"controllers/UserController.html":{}}}],["param('id",{"_index":824,"title":{},"body":{"controllers/MatchPlayerController.html":{}}}],["param.matchid",{"_index":868,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["parameters",{"_index":18,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMessageDto.html":{},"injectables/CustomResponseInterceptor.html":{},"classes/EventsGateway.html":{},"controllers/GeminiController.html":{},"injectables/GeminiService.html":{},"injectables/MailerService.html":{},"controllers/MatchController.html":{},"controllers/MatchPlayerController.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/RtStrategy.html":{},"controllers/TerrainController.html":{},"injectables/TerrainService.html":{},"injectables/TokenService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["part",{"_index":1431,"title":{},"body":{"index.html":{}}}],["parti",{"_index":1462,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":1174,"title":{},"body":{"classes/UpdateMatchDto.html":{},"classes/UpdateMatchPlayerDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateTerrainDto.html":{}}}],["partialtype(creatematchdto",{"_index":1173,"title":{},"body":{"classes/UpdateMatchDto.html":{}}}],["partialtype(creatematchplayerdto",{"_index":1177,"title":{},"body":{"classes/UpdateMatchPlayerDto.html":{}}}],["partialtype(createmessagedto",{"_index":1180,"title":{},"body":{"classes/UpdateMessageDto.html":{}}}],["partialtype(createterraindto",{"_index":1182,"title":{},"body":{"classes/UpdateTerrainDto.html":{}}}],["parts",{"_index":649,"title":{},"body":{"injectables/GeminiService.html":{},"miscellaneous/variables.html":{}}}],["pass",{"_index":695,"title":{},"body":{"injectables/MailerService.html":{}}}],["passport",{"_index":163,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":160,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":151,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["passreqtocallback",{"_index":1036,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["password",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["passwordmatch",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":734,"title":{},"body":{"controllers/MatchController.html":{},"controllers/MatchPlayerController.html":{},"controllers/MessageController.html":{},"controllers/TerrainController.html":{}}}],["patch(':id",{"_index":747,"title":{},"body":{"controllers/MatchController.html":{},"controllers/MatchPlayerController.html":{},"controllers/MessageController.html":{},"controllers/TerrainController.html":{}}}],["path",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GeminiService.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"injectables/MessageService.html":{},"injectables/TerrainService.html":{},"injectables/UserService.html":{}}}],["payload",{"_index":159,"title":{},"body":{"injectables/AtStrategy.html":{},"classes/EventsGateway.html":{},"injectables/RtStrategy.html":{}}}],["phone",{"_index":886,"title":{},"body":{"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"classes/SignupDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["platform",{"_index":1386,"title":{},"body":{"index.html":{}}}],["player",{"_index":778,"title":{},"body":{"controllers/MatchPlayerController.html":{}}}],["player.controller",{"_index":832,"title":{},"body":{"modules/MatchPlayerModule.html":{}}}],["player.controller.ts",{"_index":777,"title":{},"body":{"controllers/MatchPlayerController.html":{},"coverage.html":{}}}],["player.controller.ts:20",{"_index":797,"title":{},"body":{"controllers/MatchPlayerController.html":{}}}],["player.controller.ts:37",{"_index":792,"title":{},"body":{"controllers/MatchPlayerController.html":{}}}],["player.controller.ts:43",{"_index":786,"title":{},"body":{"controllers/MatchPlayerController.html":{}}}],["player.controller.ts:50",{"_index":800,"title":{},"body":{"controllers/MatchPlayerController.html":{}}}],["player.controller.ts:55",{"_index":790,"title":{},"body":{"controllers/MatchPlayerController.html":{}}}],["player.controller.ts:60",{"_index":794,"title":{},"body":{"controllers/MatchPlayerController.html":{}}}],["player.dto",{"_index":1178,"title":{},"body":{"classes/UpdateMatchPlayerDto.html":{}}}],["player.dto.ts",{"_index":399,"title":{},"body":{"classes/CreateMatchPlayerDto.html":{},"classes/UpdateMatchPlayerDto.html":{},"coverage.html":{}}}],["player.entity",{"_index":834,"title":{},"body":{"modules/MatchPlayerModule.html":{},"injectables/MatchPlayerService.html":{}}}],["player.entity.ts",{"_index":764,"title":{},"body":{"classes/MatchPlayer.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["player.entity.ts:10",{"_index":766,"title":{},"body":{"classes/MatchPlayer.html":{}}}],["player.entity.ts:13",{"_index":768,"title":{},"body":{"classes/MatchPlayer.html":{}}}],["player.entity.ts:16",{"_index":767,"title":{},"body":{"classes/MatchPlayer.html":{}}}],["player.module",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"modules/MatchModule.html":{},"injectables/MatchPlayerService.html":{}}}],["player.module.ts",{"_index":831,"title":{},"body":{"modules/MatchPlayerModule.html":{}}}],["player.service",{"_index":804,"title":{},"body":{"controllers/MatchPlayerController.html":{},"modules/MatchPlayerModule.html":{},"injectables/MatchService.html":{}}}],["player.service.ts",{"_index":836,"title":{},"body":{"injectables/MatchPlayerService.html":{},"coverage.html":{}}}],["player.service.ts:11",{"_index":844,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["player.service.ts:110",{"_index":848,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["player.service.ts:134",{"_index":858,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["player.service.ts:159",{"_index":850,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["player.service.ts:18",{"_index":856,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["player.service.ts:75",{"_index":855,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["player.service.ts:88",{"_index":853,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["player.service.ts:99",{"_index":851,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["player/dto/create",{"_index":398,"title":{},"body":{"classes/CreateMatchPlayerDto.html":{},"coverage.html":{}}}],["player/dto/update",{"_index":1176,"title":{},"body":{"classes/UpdateMatchPlayerDto.html":{},"coverage.html":{}}}],["player/entities/match",{"_index":763,"title":{},"body":{"classes/MatchPlayer.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["player/match",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"modules/MatchModule.html":{},"controllers/MatchPlayerController.html":{},"modules/MatchPlayerModule.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"coverage.html":{}}}],["playeralreadyjoined",{"_index":866,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["playermatchid",{"_index":893,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["playerofmatchid",{"_index":847,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["players",{"_index":870,"title":{},"body":{"injectables/MatchPlayerService.html":{},"miscellaneous/variables.html":{}}}],["playersofmatch",{"_index":640,"title":{},"body":{"injectables/GeminiService.html":{},"classes/Match.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"injectables/UserService.html":{}}}],["playersofmatch\").exec",{"_index":865,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["please",{"_index":1414,"title":{},"body":{"index.html":{}}}],["populate",{"_index":637,"title":{},"body":{"injectables/GeminiService.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"injectables/TerrainService.html":{},"injectables/UserService.html":{}}}],["populate('matchid",{"_index":884,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["populate('matchsin",{"_index":633,"title":{},"body":{"injectables/GeminiService.html":{}}}],["populate('terrainid",{"_index":961,"title":{},"body":{"injectables/MatchService.html":{}}}],["port",{"_index":690,"title":{},"body":{"injectables/MailerService.html":{}}}],["possible",{"_index":1379,"title":{},"body":{"index.html":{}}}],["post",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GeminiController.html":{},"controllers/MatchController.html":{},"controllers/MatchPlayerController.html":{},"controllers/MessageController.html":{},"controllers/TerrainController.html":{}}}],["post('/join/:matchid",{"_index":796,"title":{},"body":{"controllers/MatchPlayerController.html":{}}}],["post('login",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('message",{"_index":568,"title":{},"body":{"controllers/GeminiController.html":{}}}],["post('otp",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GeminiController.html":{},"controllers/MailerController.html":{},"controllers/MatchController.html":{},"controllers/MatchPlayerController.html":{},"controllers/MessageController.html":{},"controllers/TerrainController.html":{},"controllers/UserController.html":{}}}],["price",{"_index":433,"title":{},"body":{"classes/CreateTerrainDto.html":{},"classes/Terrain.html":{},"miscellaneous/variables.html":{}}}],["prices",{"_index":1533,"title":{},"body":{"miscellaneous/variables.html":{}}}],["private",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"classes/EventsGateway.html":{},"controllers/GeminiController.html":{},"injectables/GeminiService.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"injectables/MessageService.html":{},"injectables/TerrainService.html":{},"injectables/TokenService.html":{},"injectables/UserService.html":{}}}],["proccess",{"_index":911,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["process.env.at_secret",{"_index":168,"title":{},"body":{"injectables/AtStrategy.html":{},"classes/EventsGateway.html":{},"modules/EventsModule.html":{},"injectables/TokenService.html":{}}}],["process.env.gemini_model_name",{"_index":1549,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.smtp_host",{"_index":689,"title":{},"body":{"injectables/MailerService.html":{}}}],["process.env.smtp_pass",{"_index":696,"title":{},"body":{"injectables/MailerService.html":{}}}],["process.env.smtp_port",{"_index":691,"title":{},"body":{"injectables/MailerService.html":{}}}],["process.env.smtp_secure",{"_index":693,"title":{},"body":{"injectables/MailerService.html":{}}}],["process.env.smtp_user",{"_index":694,"title":{},"body":{"injectables/MailerService.html":{}}}],["production",{"_index":1363,"title":{},"body":{"index.html":{}}}],["profits",{"_index":1518,"title":{},"body":{"miscellaneous/variables.html":{}}}],["progressive",{"_index":1340,"title":{},"body":{"index.html":{}}}],["project",{"_index":1352,"title":{},"body":{"index.html":{}}}],["promise",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GeminiService.html":{},"injectables/TokenService.html":{}}}],["promise.all",{"_index":1162,"title":{},"body":{"injectables/TokenService.html":{}}}],["prop",{"_index":709,"title":{},"body":{"classes/Match.html":{},"classes/MatchPlayer.html":{},"classes/Message.html":{},"classes/Terrain.html":{},"classes/User.html":{}}}],["prop({default",{"_index":1195,"title":{},"body":{"classes/User.html":{}}}],["prop({required",{"_index":1066,"title":{},"body":{"classes/Terrain.html":{}}}],["prop({type",{"_index":700,"title":{},"body":{"classes/Match.html":{},"classes/MatchPlayer.html":{},"classes/Message.html":{},"classes/Terrain.html":{},"classes/User.html":{}}}],["properties",{"_index":67,"title":{"properties.html":{}},"body":{"interfaces/ApiResponse.html":{},"classes/CreateMatchDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateTerrainDto.html":{},"classes/EventsGateway.html":{},"classes/GeminiMessageDto.html":{},"injectables/GeminiService.html":{},"classes/LoginDto.html":{},"classes/Match.html":{},"classes/MatchPlayer.html":{},"classes/Message.html":{},"classes/SendMailDto.html":{},"classes/SignupDto.html":{},"classes/Terrain.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"properties.html":{}}}],["provide",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["provided",{"_index":650,"title":{},"body":{"injectables/GeminiService.html":{},"miscellaneous/variables.html":{}}}],["provider",{"_index":1544,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/GeminiModule.html":{},"modules/MailerModule.html":{},"modules/MatchModule.html":{},"modules/MatchPlayerModule.html":{},"modules/MessageModule.html":{},"modules/TerrainModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["public",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MatchController.html":{},"controllers/MatchPlayerController.html":{},"controllers/TerrainController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@get",{"_index":725,"title":{},"body":{"controllers/MatchController.html":{},"controllers/TerrainController.html":{}}}],["public()@get('/all",{"_index":791,"title":{},"body":{"controllers/MatchPlayerController.html":{}}}],["public()@get('/matchs/:terrainid",{"_index":1085,"title":{},"body":{"controllers/TerrainController.html":{}}}],["public()@post('login')@httpcode(httpstatus.ok",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('otp",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('signup')@httpcode(httpstatus.created",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@useguards(rtguard)@post('refresh')@httpcode(httpstatus.ok",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["pull",{"_index":913,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["push",{"_index":877,"title":{},"body":{"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{}}}],["put",{"_index":802,"title":{},"body":{"controllers/MatchPlayerController.html":{},"controllers/UserController.html":{}}}],["put(\"/accept/:matchplayerid",{"_index":812,"title":{},"body":{"controllers/MatchPlayerController.html":{}}}],["put(\"/cancel/:matchplayerid",{"_index":818,"title":{},"body":{"controllers/MatchPlayerController.html":{}}}],["put(\"/refuse/:matchplayerid",{"_index":815,"title":{},"body":{"controllers/MatchPlayerController.html":{}}}],["put('/accept/:matchplayerid",{"_index":785,"title":{},"body":{"controllers/MatchPlayerController.html":{}}}],["put('/cancel/:matchplayerid",{"_index":789,"title":{},"body":{"controllers/MatchPlayerController.html":{}}}],["put('/refuse/:matchplayerid",{"_index":799,"title":{},"body":{"controllers/MatchPlayerController.html":{}}}],["query",{"_index":801,"title":{},"body":{"controllers/MatchPlayerController.html":{},"injectables/MatchPlayerService.html":{}}}],["questions",{"_index":1412,"title":{},"body":{"index.html":{}}}],["read",{"_index":1452,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":140,"title":{},"body":{"injectables/AtGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/GeminiController.html":{},"injectables/GeminiService.html":{},"controllers/MailerController.html":{},"controllers/MatchController.html":{},"controllers/MatchPlayerController.html":{},"injectables/MatchService.html":{},"controllers/MessageController.html":{},"controllers/TerrainController.html":{},"injectables/TokenService.html":{},"controllers/UserController.html":{}}}],["ready",{"_index":1371,"title":{},"body":{"index.html":{}}}],["real",{"_index":1427,"title":{},"body":{"index.html":{}}}],["ref",{"_index":704,"title":{},"body":{"classes/Match.html":{},"classes/MatchPlayer.html":{},"classes/Message.html":{},"classes/Terrain.html":{},"classes/User.html":{}}}],["reflect",{"_index":1327,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":131,"title":{},"body":{"injectables/AtGuard.html":{}}}],["refresh",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{}}}],["refresh(userid",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["refresh_token",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokenService.html":{}}}],["refreshtoken",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"injectables/RtStrategy.html":{},"injectables/TokenService.html":{}}}],["refusematchplayerid",{"_index":783,"title":{},"body":{"controllers/MatchPlayerController.html":{}}}],["refusematchplayerid(@param(\"matchplayerid",{"_index":816,"title":{},"body":{"controllers/MatchPlayerController.html":{}}}],["refusematchplayerid(matchplayerid",{"_index":798,"title":{},"body":{"controllers/MatchPlayerController.html":{}}}],["refuseplayerofmatch",{"_index":841,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["refuseplayerofmatch(userid",{"_index":857,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["rejects",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["remove",{"_index":975,"title":{},"body":{"controllers/MessageController.html":{},"injectables/MessageService.html":{}}}],["remove(@param('id",{"_index":752,"title":{},"body":{"controllers/MatchController.html":{},"controllers/MatchPlayerController.html":{},"controllers/MessageController.html":{},"controllers/TerrainController.html":{}}}],["remove(id",{"_index":919,"title":{},"body":{"injectables/MatchPlayerService.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/TerrainService.html":{}}}],["removes",{"_index":920,"title":{},"body":{"injectables/MatchPlayerService.html":{},"injectables/MessageService.html":{},"injectables/TerrainService.html":{}}}],["repository",{"_index":1351,"title":{},"body":{"index.html":{}}}],["req",{"_index":1035,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["req.get('authorization').replace('bearer",{"_index":1037,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["request",{"_index":30,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/CustomResponseInterceptor.html":{},"injectables/MatchPlayerService.html":{},"injectables/RtStrategy.html":{},"miscellaneous/variables.html":{}}}],["request.user",{"_index":1554,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user[data",{"_index":1555,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requesteddatetime",{"_index":934,"title":{},"body":{"injectables/MatchService.html":{}}}],["requesteddatetimereserved",{"_index":936,"title":{},"body":{"injectables/MatchService.html":{}}}],["requesteddatetimereserved.setminutes(requesteddatetimereserved.getminutes",{"_index":938,"title":{},"body":{"injectables/MatchService.html":{}}}],["required",{"_index":701,"title":{},"body":{"classes/Match.html":{},"classes/MatchPlayer.html":{},"classes/Terrain.html":{},"classes/User.html":{}}}],["requiring",{"_index":1394,"title":{},"body":{"index.html":{}}}],["reserved",{"_index":949,"title":{},"body":{"injectables/MatchService.html":{}}}],["reservedmatch",{"_index":941,"title":{},"body":{"injectables/MatchService.html":{}}}],["reservedmatch.length",{"_index":946,"title":{},"body":{"injectables/MatchService.html":{}}}],["reset",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/GeminiModule.html":{},"modules/MailerModule.html":{},"modules/MatchModule.html":{},"modules/MatchPlayerModule.html":{},"modules/MessageModule.html":{},"modules/TerrainModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolve",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["resources",{"_index":1406,"title":{},"body":{"index.html":{}}}],["respones",{"_index":1516,"title":{},"body":{"miscellaneous/variables.html":{}}}],["response",{"_index":31,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/CustomResponseInterceptor.html":{}}}],["response.interceptor.ts",{"_index":450,"title":{},"body":{"injectables/CustomResponseInterceptor.html":{},"coverage.html":{}}}],["response.interceptor.ts:16",{"_index":455,"title":{},"body":{"injectables/CustomResponseInterceptor.html":{}}}],["response.interface",{"_index":35,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/CustomResponseInterceptor.html":{}}}],["response.interface.ts",{"_index":66,"title":{},"body":{"interfaces/ApiResponse.html":{},"coverage.html":{}}}],["response.status(status).json(errorresponse",{"_index":60,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["results",{"_index":61,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"modules/AppModule.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMatchDto.html":{},"classes/CreateMatchPlayerDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateTerrainDto.html":{},"injectables/CustomResponseInterceptor.html":{},"classes/EventsGateway.html":{},"modules/EventsModule.html":{},"controllers/GeminiController.html":{},"classes/GeminiMessageDto.html":{},"modules/GeminiModule.html":{},"injectables/GeminiService.html":{},"classes/LoginDto.html":{},"controllers/MailerController.html":{},"modules/MailerModule.html":{},"injectables/MailerService.html":{},"classes/Match.html":{},"controllers/MatchController.html":{},"modules/MatchModule.html":{},"classes/MatchPlayer.html":{},"controllers/MatchPlayerController.html":{},"modules/MatchPlayerModule.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"classes/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SendMailDto.html":{},"classes/SignupDto.html":{},"classes/Terrain.html":{},"controllers/TerrainController.html":{},"modules/TerrainModule.html":{},"injectables/TerrainService.html":{},"injectables/TokenService.html":{},"classes/UpdateMatchDto.html":{},"classes/UpdateMatchPlayerDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateTerrainDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":146,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CustomResponseInterceptor.html":{},"classes/EventsGateway.html":{},"controllers/GeminiController.html":{},"injectables/GeminiService.html":{},"injectables/MailerService.html":{},"controllers/MatchController.html":{},"controllers/MatchPlayerController.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/RtStrategy.html":{},"controllers/TerrainController.html":{},"injectables/TerrainService.html":{},"injectables/TokenService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":24,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CustomResponseInterceptor.html":{},"classes/EventsGateway.html":{},"controllers/GeminiController.html":{},"injectables/GeminiService.html":{},"injectables/MailerService.html":{},"controllers/MatchController.html":{},"controllers/MatchPlayerController.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/RtStrategy.html":{},"controllers/TerrainController.html":{},"injectables/TerrainService.html":{},"injectables/TokenService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["right",{"_index":513,"title":{},"body":{"classes/EventsGateway.html":{}}}],["role",{"_index":648,"title":{},"body":{"injectables/GeminiService.html":{},"classes/SignupDto.html":{},"injectables/TokenService.html":{},"classes/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["rt",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RtStrategy.html":{},"injectables/TokenService.html":{}}}],["rtguard",{"_index":219,"title":{"classes/RtGuard.html":{}},"body":{"controllers/AuthController.html":{},"classes/RtGuard.html":{},"coverage.html":{}}}],["rtstrategy",{"_index":262,"title":{"injectables/RtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/RtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["run",{"_index":1357,"title":{},"body":{"index.html":{}}}],["runs",{"_index":1377,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":460,"title":{},"body":{"injectables/CustomResponseInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":463,"title":{},"body":{"injectables/CustomResponseInterceptor.html":{}}}],["same",{"_index":1542,"title":{},"body":{"miscellaneous/variables.html":{}}}],["save",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{}}}],["saveduser",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{}}}],["saveduser._id.tostring",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{}}}],["saveduser.email",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{}}}],["saveduser.role",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{}}}],["scalable",{"_index":1345,"title":{},"body":{"index.html":{}}}],["schema",{"_index":595,"title":{},"body":{"modules/GeminiModule.html":{},"classes/Match.html":{},"modules/MatchModule.html":{},"classes/MatchPlayer.html":{},"modules/MatchPlayerModule.html":{},"classes/Message.html":{},"modules/MessageModule.html":{},"classes/Terrain.html":{},"modules/TerrainModule.html":{},"classes/User.html":{},"modules/UserModule.html":{}}}],["schemafactory",{"_index":710,"title":{},"body":{"classes/Match.html":{},"classes/MatchPlayer.html":{},"classes/Message.html":{},"classes/Terrain.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(match",{"_index":715,"title":{},"body":{"classes/Match.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(matchplayer",{"_index":772,"title":{},"body":{"classes/MatchPlayer.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(message",{"_index":970,"title":{},"body":{"classes/Message.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(terrain",{"_index":1075,"title":{},"body":{"classes/Terrain.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":1209,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["secret",{"_index":527,"title":{},"body":{"classes/EventsGateway.html":{},"modules/EventsModule.html":{},"injectables/RtStrategy.html":{},"injectables/TokenService.html":{}}}],["secretorkey",{"_index":167,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["secure",{"_index":692,"title":{},"body":{"injectables/MailerService.html":{}}}],["see",{"_index":1131,"title":{},"body":{"injectables/TerrainService.html":{}}}],["select",{"_index":639,"title":{},"body":{"injectables/GeminiService.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"injectables/MessageService.html":{},"injectables/UserService.html":{}}}],["send",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["send')@httpcode(httpstatus.ok",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["senderid",{"_index":405,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["sendername",{"_index":406,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/EventsGateway.html":{}}}],["sendid",{"_index":416,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/EventsGateway.html":{}}}],["sending",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{}}}],["sendmail",{"_index":679,"title":{},"body":{"injectables/MailerService.html":{}}}],["sendmail(undefined",{"_index":681,"title":{},"body":{"injectables/MailerService.html":{}}}],["sendmaildto",{"_index":682,"title":{"classes/SendMailDto.html":{}},"body":{"injectables/MailerService.html":{},"classes/SendMailDto.html":{},"coverage.html":{}}}],["sendmessage",{"_index":560,"title":{},"body":{"controllers/GeminiController.html":{},"injectables/GeminiService.html":{}}}],["sendmessage(@getcurrentuserid",{"_index":577,"title":{},"body":{"controllers/GeminiController.html":{}}}],["sendmessage(sessionid",{"_index":609,"title":{},"body":{"injectables/GeminiService.html":{}}}],["sendmessage(sub",{"_index":565,"title":{},"body":{"controllers/GeminiController.html":{}}}],["sent",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{}}}],["serous",{"_index":1530,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server",{"_index":50,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/EventsGateway.html":{},"index.html":{}}}],["session",{"_index":597,"title":{},"body":{"injectables/GeminiService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["sessionid",{"_index":517,"title":{},"body":{"classes/EventsGateway.html":{},"injectables/GeminiService.html":{}}}],["sessionobject",{"_index":654,"title":{},"body":{"injectables/GeminiService.html":{}}}],["setmetadata('ispublic",{"_index":1557,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":1353,"title":{},"body":{"index.html":{}}}],["shit",{"_index":955,"title":{},"body":{"injectables/MatchService.html":{}}}],["side",{"_index":1346,"title":{},"body":{"index.html":{}}}],["signup",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup(@body",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(dto",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(signupdata",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["signupdata",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["signupdata.email",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{}}}],["signupdto",{"_index":204,"title":{"classes/SignupDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignupDto.html":{},"coverage.html":{}}}],["simple",{"_index":1396,"title":{},"body":{"index.html":{}}}],["soccerfield",{"_index":1509,"title":{},"body":{"miscellaneous/variables.html":{}}}],["soccerfiled",{"_index":1512,"title":{},"body":{"miscellaneous/variables.html":{}}}],["socket",{"_index":490,"title":{},"body":{"classes/EventsGateway.html":{}}}],["socket.io",{"_index":502,"title":{},"body":{"classes/EventsGateway.html":{},"dependencies.html":{}}}],["sorry",{"_index":1540,"title":{},"body":{"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"modules/AppModule.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMatchDto.html":{},"classes/CreateMatchPlayerDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateTerrainDto.html":{},"injectables/CustomResponseInterceptor.html":{},"classes/EventsGateway.html":{},"modules/EventsModule.html":{},"controllers/GeminiController.html":{},"classes/GeminiMessageDto.html":{},"modules/GeminiModule.html":{},"injectables/GeminiService.html":{},"classes/LoginDto.html":{},"controllers/MailerController.html":{},"modules/MailerModule.html":{},"injectables/MailerService.html":{},"classes/Match.html":{},"controllers/MatchController.html":{},"modules/MatchModule.html":{},"classes/MatchPlayer.html":{},"controllers/MatchPlayerController.html":{},"modules/MatchPlayerModule.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"classes/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SendMailDto.html":{},"classes/SignupDto.html":{},"classes/Terrain.html":{},"controllers/TerrainController.html":{},"modules/TerrainModule.html":{},"injectables/TerrainService.html":{},"injectables/TokenService.html":{},"classes/UpdateMatchDto.html":{},"classes/UpdateMatchPlayerDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateTerrainDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["sponsors",{"_index":1447,"title":{},"body":{"index.html":{}}}],["src/.../create",{"_index":1481,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../events.gateway.ts",{"_index":1486,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../gemini.config.ts",{"_index":1488,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../gemini.provider.ts",{"_index":1489,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../gemini.service.ts",{"_index":1482,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../get",{"_index":1490,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../jwtpayload.type.ts",{"_index":1476,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../jwtpayloadwithrt.type.ts",{"_index":1477,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":1337,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../match",{"_index":1479,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../match.entity.ts",{"_index":1478,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../message.entity.ts",{"_index":1480,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../public.decorator.ts",{"_index":1491,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../role.enum.ts",{"_index":1333,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../terrain.entity.ts",{"_index":1483,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../tokens.type.ts",{"_index":1484,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../user.entity.ts",{"_index":1485,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:27",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:34",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:41",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:49",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:57",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:69",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":264,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:103",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:108",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:147",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:22",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:29",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:53",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:78",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":659,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:12",{"_index":661,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:17",{"_index":663,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/signup.dto.ts",{"_index":1044,"title":{},"body":{"classes/SignupDto.html":{},"coverage.html":{}}}],["src/auth/dto/signup.dto.ts:15",{"_index":1045,"title":{},"body":{"classes/SignupDto.html":{}}}],["src/auth/dto/signup.dto.ts:20",{"_index":1048,"title":{},"body":{"classes/SignupDto.html":{}}}],["src/auth/dto/signup.dto.ts:24",{"_index":1047,"title":{},"body":{"classes/SignupDto.html":{}}}],["src/auth/dto/signup.dto.ts:29",{"_index":1050,"title":{},"body":{"classes/SignupDto.html":{}}}],["src/auth/dto/signup.dto.ts:34",{"_index":1052,"title":{},"body":{"classes/SignupDto.html":{}}}],["src/auth/strategies/at.strategy.ts",{"_index":150,"title":{},"body":{"injectables/AtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/at.strategy.ts:15",{"_index":158,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["src/auth/strategies/at.strategy.ts:7",{"_index":155,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["src/auth/strategies/rt.strategy.ts",{"_index":1031,"title":{},"body":{"injectables/RtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/rt.strategy.ts:16",{"_index":1034,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["src/auth/strategies/rt.strategy.ts:7",{"_index":1032,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["src/auth/token.service.ts",{"_index":1144,"title":{},"body":{"injectables/TokenService.html":{},"coverage.html":{}}}],["src/auth/token.service.ts:11",{"_index":1150,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/auth/token.service.ts:17",{"_index":1154,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/auth/token.service.ts:35",{"_index":1156,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/auth/token.service.ts:40",{"_index":1152,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/auth/token.service.ts:44",{"_index":1158,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/auth/types",{"_index":503,"title":{},"body":{"classes/EventsGateway.html":{}}}],["src/auth/types/jwtpayload.type.ts",{"_index":1285,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/types/jwtpayloadwithrt.type.ts",{"_index":1281,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/types/tokens.type.ts",{"_index":1286,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/common/decorators",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GeminiController.html":{},"controllers/MatchController.html":{},"controllers/MatchPlayerController.html":{},"controllers/TerrainController.html":{},"controllers/UserController.html":{}}}],["src/common/decorators/get",{"_index":1287,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/public.decorator.ts",{"_index":1291,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/guards",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/common/guards/at.guard.ts",{"_index":125,"title":{},"body":{"injectables/AtGuard.html":{},"coverage.html":{}}}],["src/common/guards/at.guard.ts:11",{"_index":135,"title":{},"body":{"injectables/AtGuard.html":{}}}],["src/common/guards/at.guard.ts:6",{"_index":132,"title":{},"body":{"injectables/AtGuard.html":{}}}],["src/common/guards/rt.guard.ts",{"_index":1029,"title":{},"body":{"classes/RtGuard.html":{},"coverage.html":{}}}],["src/common/guards/rt.guard.ts:3",{"_index":1030,"title":{},"body":{"classes/RtGuard.html":{}}}],["src/enums/role.enum",{"_index":1057,"title":{},"body":{"classes/SignupDto.html":{},"classes/User.html":{}}}],["src/enums/role.enum.ts",{"_index":1334,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/events/events.gateway.ts",{"_index":477,"title":{},"body":{"classes/EventsGateway.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/events/events.gateway.ts:20",{"_index":487,"title":{},"body":{"classes/EventsGateway.html":{}}}],["src/events/events.gateway.ts:24",{"_index":492,"title":{},"body":{"classes/EventsGateway.html":{}}}],["src/events/events.gateway.ts:54",{"_index":495,"title":{},"body":{"classes/EventsGateway.html":{}}}],["src/events/events.gateway.ts:62",{"_index":498,"title":{},"body":{"classes/EventsGateway.html":{}}}],["src/events/events.module.ts",{"_index":550,"title":{},"body":{"modules/EventsModule.html":{}}}],["src/gemini/dto/gemini",{"_index":582,"title":{},"body":{"classes/GeminiMessageDto.html":{},"coverage.html":{}}}],["src/gemini/gemini.config.ts",{"_index":1293,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/gemini/gemini.controller.ts",{"_index":557,"title":{},"body":{"controllers/GeminiController.html":{},"coverage.html":{}}}],["src/gemini/gemini.controller.ts:13",{"_index":569,"title":{},"body":{"controllers/GeminiController.html":{}}}],["src/gemini/gemini.controller.ts:23",{"_index":563,"title":{},"body":{"controllers/GeminiController.html":{}}}],["src/gemini/gemini.module.ts",{"_index":586,"title":{},"body":{"modules/GeminiModule.html":{}}}],["src/gemini/gemini.provider.ts",{"_index":1296,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/gemini/gemini.service.ts",{"_index":596,"title":{},"body":{"injectables/GeminiService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/gemini/gemini.service.ts:15",{"_index":603,"title":{},"body":{"injectables/GeminiService.html":{}}}],["src/gemini/gemini.service.ts:21",{"_index":613,"title":{},"body":{"injectables/GeminiService.html":{}}}],["src/gemini/gemini.service.ts:23",{"_index":608,"title":{},"body":{"injectables/GeminiService.html":{}}}],["src/gemini/gemini.service.ts:74",{"_index":606,"title":{},"body":{"injectables/GeminiService.html":{}}}],["src/gemini/gemini.service.ts:82",{"_index":610,"title":{},"body":{"injectables/GeminiService.html":{}}}],["src/interceptors/all",{"_index":6,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["src/interceptors/custom",{"_index":449,"title":{},"body":{"injectables/CustomResponseInterceptor.html":{},"coverage.html":{}}}],["src/interfaces/api",{"_index":65,"title":{},"body":{"interfaces/ApiResponse.html":{},"coverage.html":{}}}],["src/mailer/dto/send",{"_index":1039,"title":{},"body":{"classes/SendMailDto.html":{},"coverage.html":{}}}],["src/mailer/mailer.controller.ts",{"_index":668,"title":{},"body":{"controllers/MailerController.html":{},"coverage.html":{}}}],["src/mailer/mailer.module",{"_index":269,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/mailer/mailer.module.ts",{"_index":675,"title":{},"body":{"modules/MailerModule.html":{}}}],["src/mailer/mailer.service",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/mailer/mailer.service.ts",{"_index":677,"title":{},"body":{"injectables/MailerService.html":{},"coverage.html":{}}}],["src/mailer/mailer.service.ts:20",{"_index":683,"title":{},"body":{"injectables/MailerService.html":{}}}],["src/mailer/mailer.service.ts:7",{"_index":680,"title":{},"body":{"injectables/MailerService.html":{}}}],["src/main.ts",{"_index":1299,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/match",{"_index":397,"title":{},"body":{"classes/CreateMatchPlayerDto.html":{},"modules/MatchModule.html":{},"classes/MatchPlayer.html":{},"controllers/MatchPlayerController.html":{},"modules/MatchPlayerModule.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"classes/UpdateMatchPlayerDto.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/match/dto/create",{"_index":381,"title":{},"body":{"classes/CreateMatchDto.html":{},"coverage.html":{}}}],["src/match/dto/update",{"_index":1172,"title":{},"body":{"classes/UpdateMatchDto.html":{},"coverage.html":{}}}],["src/match/entities/match.entity",{"_index":769,"title":{},"body":{"classes/MatchPlayer.html":{},"modules/MatchPlayerModule.html":{},"injectables/MatchPlayerService.html":{},"classes/Message.html":{},"modules/TerrainModule.html":{},"injectables/TerrainService.html":{}}}],["src/match/entities/match.entity.ts",{"_index":699,"title":{},"body":{"classes/Match.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/match/entities/match.entity.ts:12",{"_index":708,"title":{},"body":{"classes/Match.html":{}}}],["src/match/entities/match.entity.ts:15",{"_index":707,"title":{},"body":{"classes/Match.html":{}}}],["src/match/entities/match.entity.ts:18",{"_index":706,"title":{},"body":{"classes/Match.html":{}}}],["src/match/entities/match.entity.ts:9",{"_index":702,"title":{},"body":{"classes/Match.html":{}}}],["src/match/match.controller.ts",{"_index":717,"title":{},"body":{"controllers/MatchController.html":{},"coverage.html":{}}}],["src/match/match.controller.ts:19",{"_index":733,"title":{},"body":{"controllers/MatchController.html":{}}}],["src/match/match.controller.ts:24",{"_index":723,"title":{},"body":{"controllers/MatchController.html":{}}}],["src/match/match.controller.ts:33",{"_index":726,"title":{},"body":{"controllers/MatchController.html":{}}}],["src/match/match.controller.ts:38",{"_index":730,"title":{},"body":{"controllers/MatchController.html":{}}}],["src/match/match.module",{"_index":555,"title":{},"body":{"modules/EventsModule.html":{}}}],["src/match/match.module.ts",{"_index":758,"title":{},"body":{"modules/MatchModule.html":{}}}],["src/match/match.service",{"_index":504,"title":{},"body":{"classes/EventsGateway.html":{}}}],["src/match/match.service.ts",{"_index":921,"title":{},"body":{"injectables/MatchService.html":{},"coverage.html":{}}}],["src/match/match.service.ts:12",{"_index":926,"title":{},"body":{"injectables/MatchService.html":{}}}],["src/match/match.service.ts:20",{"_index":928,"title":{},"body":{"injectables/MatchService.html":{}}}],["src/match/match.service.ts:69",{"_index":929,"title":{},"body":{"injectables/MatchService.html":{}}}],["src/match/match.service.ts:83",{"_index":933,"title":{},"body":{"injectables/MatchService.html":{}}}],["src/match/match.service.ts:92",{"_index":931,"title":{},"body":{"injectables/MatchService.html":{}}}],["src/message/dto/create",{"_index":401,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/EventsGateway.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/message/dto/update",{"_index":1179,"title":{},"body":{"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["src/message/entities/message.entity",{"_index":554,"title":{},"body":{"modules/EventsModule.html":{}}}],["src/message/entities/message.entity.ts",{"_index":963,"title":{},"body":{"classes/Message.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/message/entities/message.entity.ts:14",{"_index":964,"title":{},"body":{"classes/Message.html":{}}}],["src/message/entities/message.entity.ts:17",{"_index":965,"title":{},"body":{"classes/Message.html":{}}}],["src/message/entities/message.entity.ts:20",{"_index":966,"title":{},"body":{"classes/Message.html":{}}}],["src/message/entities/message.entity.ts:23",{"_index":967,"title":{},"body":{"classes/Message.html":{}}}],["src/message/message.controller.ts",{"_index":972,"title":{},"body":{"controllers/MessageController.html":{},"coverage.html":{}}}],["src/message/message.controller.ts:12",{"_index":977,"title":{},"body":{"controllers/MessageController.html":{}}}],["src/message/message.controller.ts:17",{"_index":978,"title":{},"body":{"controllers/MessageController.html":{}}}],["src/message/message.controller.ts:22",{"_index":979,"title":{},"body":{"controllers/MessageController.html":{}}}],["src/message/message.controller.ts:27",{"_index":986,"title":{},"body":{"controllers/MessageController.html":{}}}],["src/message/message.controller.ts:32",{"_index":984,"title":{},"body":{"controllers/MessageController.html":{}}}],["src/message/message.controller.ts:38",{"_index":982,"title":{},"body":{"controllers/MessageController.html":{}}}],["src/message/message.module",{"_index":552,"title":{},"body":{"modules/EventsModule.html":{}}}],["src/message/message.module.ts",{"_index":1001,"title":{},"body":{"modules/MessageModule.html":{}}}],["src/message/message.service",{"_index":506,"title":{},"body":{"classes/EventsGateway.html":{}}}],["src/message/message.service.ts",{"_index":1005,"title":{},"body":{"injectables/MessageService.html":{},"coverage.html":{}}}],["src/message/message.service.ts:16",{"_index":1010,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/message/message.service.ts:26",{"_index":1011,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/message/message.service.ts:30",{"_index":1014,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/message/message.service.ts:34",{"_index":1013,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/message/message.service.ts:40",{"_index":1016,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/message/message.service.ts:44",{"_index":1015,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/message/message.service.ts:9",{"_index":1008,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/terrain/dto/create",{"_index":426,"title":{},"body":{"classes/CreateTerrainDto.html":{},"coverage.html":{}}}],["src/terrain/dto/update",{"_index":1181,"title":{},"body":{"classes/UpdateTerrainDto.html":{},"coverage.html":{}}}],["src/terrain/entities/terrain.entity",{"_index":590,"title":{},"body":{"modules/GeminiModule.html":{},"injectables/GeminiService.html":{},"modules/MatchModule.html":{},"injectables/MatchService.html":{}}}],["src/terrain/entities/terrain.entity.ts",{"_index":1061,"title":{},"body":{"classes/Terrain.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/terrain/entities/terrain.entity.ts:12",{"_index":1067,"title":{},"body":{"classes/Terrain.html":{}}}],["src/terrain/entities/terrain.entity.ts:15",{"_index":1064,"title":{},"body":{"classes/Terrain.html":{}}}],["src/terrain/entities/terrain.entity.ts:18",{"_index":1073,"title":{},"body":{"classes/Terrain.html":{}}}],["src/terrain/entities/terrain.entity.ts:21",{"_index":1065,"title":{},"body":{"classes/Terrain.html":{}}}],["src/terrain/entities/terrain.entity.ts:24",{"_index":1062,"title":{},"body":{"classes/Terrain.html":{}}}],["src/terrain/entities/terrain.entity.ts:27",{"_index":1072,"title":{},"body":{"classes/Terrain.html":{}}}],["src/terrain/entities/terrain.entity.ts:30",{"_index":1069,"title":{},"body":{"classes/Terrain.html":{}}}],["src/terrain/entities/terrain.entity.ts:33",{"_index":1068,"title":{},"body":{"classes/Terrain.html":{}}}],["src/terrain/entities/terrain.entity.ts:36",{"_index":1070,"title":{},"body":{"classes/Terrain.html":{}}}],["src/terrain/entities/terrain.entity.ts:40",{"_index":1071,"title":{},"body":{"classes/Terrain.html":{}}}],["src/terrain/entities/terrain.entity.ts:9",{"_index":1063,"title":{},"body":{"classes/Terrain.html":{}}}],["src/terrain/terrain.controller.ts",{"_index":1077,"title":{},"body":{"controllers/TerrainController.html":{},"coverage.html":{}}}],["src/terrain/terrain.controller.ts:20",{"_index":1081,"title":{},"body":{"controllers/TerrainController.html":{}}}],["src/terrain/terrain.controller.ts:27",{"_index":1082,"title":{},"body":{"controllers/TerrainController.html":{}}}],["src/terrain/terrain.controller.ts:32",{"_index":1083,"title":{},"body":{"controllers/TerrainController.html":{}}}],["src/terrain/terrain.controller.ts:38",{"_index":1089,"title":{},"body":{"controllers/TerrainController.html":{}}}],["src/terrain/terrain.controller.ts:45",{"_index":1086,"title":{},"body":{"controllers/TerrainController.html":{}}}],["src/terrain/terrain.module.ts",{"_index":1107,"title":{},"body":{"modules/TerrainModule.html":{}}}],["src/terrain/terrain.service.ts",{"_index":1110,"title":{},"body":{"injectables/TerrainService.html":{},"coverage.html":{}}}],["src/terrain/terrain.service.ts:12",{"_index":1114,"title":{},"body":{"injectables/TerrainService.html":{}}}],["src/terrain/terrain.service.ts:18",{"_index":1115,"title":{},"body":{"injectables/TerrainService.html":{}}}],["src/terrain/terrain.service.ts:46",{"_index":1121,"title":{},"body":{"injectables/TerrainService.html":{}}}],["src/terrain/terrain.service.ts:74",{"_index":1116,"title":{},"body":{"injectables/TerrainService.html":{}}}],["src/terrain/terrain.service.ts:78",{"_index":1119,"title":{},"body":{"injectables/TerrainService.html":{}}}],["src/terrain/terrain.service.ts:83",{"_index":1117,"title":{},"body":{"injectables/TerrainService.html":{}}}],["src/user/dto/update",{"_index":1184,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/user/entities/user.entity",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{},"modules/GeminiModule.html":{},"injectables/GeminiService.html":{},"modules/MatchModule.html":{},"modules/MatchPlayerModule.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"classes/Message.html":{},"injectables/TokenService.html":{}}}],["src/user/entities/user.entity.ts",{"_index":1192,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/user/entities/user.entity.ts:10",{"_index":1197,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:13",{"_index":1205,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:16",{"_index":1198,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:19",{"_index":1196,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:21",{"_index":1202,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:24",{"_index":1203,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:26",{"_index":1207,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:29",{"_index":1201,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:32",{"_index":1200,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:35",{"_index":1206,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:39",{"_index":1204,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:42",{"_index":1199,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.controller.ts",{"_index":1211,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:12",{"_index":1220,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:20",{"_index":1217,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:26",{"_index":1222,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:37",{"_index":1225,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:43",{"_index":1228,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module",{"_index":266,"title":{},"body":{"modules/AuthModule.html":{},"modules/EventsModule.html":{},"injectables/MatchPlayerService.html":{}}}],["src/user/user.module.ts",{"_index":1248,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service",{"_index":507,"title":{},"body":{"classes/EventsGateway.html":{}}}],["src/user/user.service.ts",{"_index":1251,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:10",{"_index":1254,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:14",{"_index":1260,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:21",{"_index":1258,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:25",{"_index":1256,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:29",{"_index":1264,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:45",{"_index":1262,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":1359,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1362,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1364,"title":{},"body":{"index.html":{}}}],["startchatparams",{"_index":617,"title":{},"body":{"injectables/GeminiService.html":{}}}],["started",{"_index":1339,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1350,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1276,"title":{},"body":{"coverage.html":{}}}],["statistics",{"_index":1132,"title":{},"body":{"injectables/TerrainService.html":{}}}],["status",{"_index":43,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"injectables/CustomResponseInterceptor.html":{}}}],["stay",{"_index":1433,"title":{},"body":{"index.html":{}}}],["steps",{"_index":1374,"title":{},"body":{"index.html":{}}}],["stewie",{"_index":1502,"title":{},"body":{"miscellaneous/variables.html":{}}}],["straightforward",{"_index":1392,"title":{},"body":{"index.html":{}}}],["strategies",{"_index":267,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":162,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["string",{"_index":70,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMatchDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateTerrainDto.html":{},"injectables/CustomResponseInterceptor.html":{},"classes/EventsGateway.html":{},"classes/GeminiMessageDto.html":{},"injectables/GeminiService.html":{},"classes/LoginDto.html":{},"controllers/MatchController.html":{},"controllers/MatchPlayerController.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"classes/Message.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"classes/SendMailDto.html":{},"classes/SignupDto.html":{},"classes/Terrain.html":{},"controllers/TerrainController.html":{},"injectables/TerrainService.html":{},"injectables/TokenService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["stuff",{"_index":512,"title":{},"body":{"classes/EventsGateway.html":{}}}],["sub",{"_index":564,"title":{},"body":{"controllers/GeminiController.html":{},"injectables/TokenService.html":{},"controllers/UserController.html":{}}}],["subject",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MailerService.html":{},"classes/SendMailDto.html":{}}}],["subscribemessage",{"_index":499,"title":{},"body":{"classes/EventsGateway.html":{}}}],["subscribemessage('message",{"_index":497,"title":{},"body":{"classes/EventsGateway.html":{}}}],["successful",{"_index":466,"title":{},"body":{"injectables/CustomResponseInterceptor.html":{}}}],["successfully",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["super",{"_index":141,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{}}}],["super.canactivate(context",{"_index":148,"title":{},"body":{"injectables/AtGuard.html":{}}}],["support",{"_index":1413,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1464,"title":{},"body":{"modules.html":{}}}],["syntax",{"_index":1019,"title":{},"body":{"injectables/MessageService.html":{}}}],["system",{"_index":1501,"title":{},"body":{"miscellaneous/variables.html":{}}}],["system_instraction",{"_index":1295,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["systeminstruction",{"_index":1550,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t",{"_index":68,"title":{},"body":{"interfaces/ApiResponse.html":{}}}],["table",{"_index":1306,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1305,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1375,"title":{},"body":{"index.html":{}}}],["takwira",{"_index":1504,"title":{},"body":{"miscellaneous/variables.html":{}}}],["temperature",{"_index":1496,"title":{},"body":{"miscellaneous/variables.html":{}}}],["terrain",{"_index":589,"title":{"classes/Terrain.html":{}},"body":{"modules/GeminiModule.html":{},"injectables/GeminiService.html":{},"classes/Match.html":{},"modules/MatchModule.html":{},"injectables/MatchService.html":{},"classes/Terrain.html":{},"controllers/TerrainController.html":{},"modules/TerrainModule.html":{},"injectables/TerrainService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["terrain.controller",{"_index":1108,"title":{},"body":{"modules/TerrainModule.html":{}}}],["terrain.dto",{"_index":1092,"title":{},"body":{"controllers/TerrainController.html":{},"injectables/TerrainService.html":{},"classes/UpdateTerrainDto.html":{}}}],["terrain.dto.ts",{"_index":427,"title":{},"body":{"classes/CreateTerrainDto.html":{},"classes/UpdateTerrainDto.html":{},"coverage.html":{}}}],["terrain.dto.ts:10",{"_index":442,"title":{},"body":{"classes/CreateTerrainDto.html":{}}}],["terrain.dto.ts:14",{"_index":435,"title":{},"body":{"classes/CreateTerrainDto.html":{}}}],["terrain.dto.ts:18",{"_index":438,"title":{},"body":{"classes/CreateTerrainDto.html":{}}}],["terrain.dto.ts:21",{"_index":446,"title":{},"body":{"classes/CreateTerrainDto.html":{}}}],["terrain.dto.ts:24",{"_index":441,"title":{},"body":{"classes/CreateTerrainDto.html":{}}}],["terrain.dto.ts:27",{"_index":445,"title":{},"body":{"classes/CreateTerrainDto.html":{}}}],["terrain.dto.ts:30",{"_index":444,"title":{},"body":{"classes/CreateTerrainDto.html":{}}}],["terrain.dto.ts:33",{"_index":443,"title":{},"body":{"classes/CreateTerrainDto.html":{}}}],["terrain.dto.ts:8",{"_index":436,"title":{},"body":{"classes/CreateTerrainDto.html":{}}}],["terrain.id",{"_index":1139,"title":{},"body":{"injectables/TerrainService.html":{}}}],["terrain.name",{"_index":594,"title":{},"body":{"modules/GeminiModule.html":{},"modules/MatchModule.html":{},"modules/TerrainModule.html":{}}}],["terrain.price",{"_index":1141,"title":{},"body":{"injectables/TerrainService.html":{}}}],["terrain.service",{"_index":1091,"title":{},"body":{"controllers/TerrainController.html":{},"modules/TerrainModule.html":{}}}],["terrain/terrain.module",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["terraincontroller",{"_index":1076,"title":{"controllers/TerrainController.html":{}},"body":{"controllers/TerrainController.html":{},"modules/TerrainModule.html":{},"coverage.html":{}}}],["terraindocument",{"_index":1074,"title":{},"body":{"classes/Terrain.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["terrainid",{"_index":384,"title":{},"body":{"classes/CreateMatchDto.html":{},"classes/Match.html":{},"injectables/MatchService.html":{},"controllers/TerrainController.html":{},"injectables/TerrainService.html":{},"injectables/UserService.html":{}}}],["terraininfo",{"_index":627,"title":{},"body":{"injectables/GeminiService.html":{}}}],["terraininfo._id",{"_index":646,"title":{},"body":{"injectables/GeminiService.html":{}}}],["terraininfo.matchsin.length",{"_index":644,"title":{},"body":{"injectables/GeminiService.html":{}}}],["terrainmodel",{"_index":602,"title":{},"body":{"injectables/GeminiService.html":{},"injectables/MatchService.html":{},"injectables/TerrainService.html":{}}}],["terrainmodule",{"_index":91,"title":{"modules/TerrainModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TerrainModule.html":{},"modules.html":{},"overview.html":{}}}],["terrainschema",{"_index":761,"title":{},"body":{"modules/MatchModule.html":{},"classes/Terrain.html":{},"modules/TerrainModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["terrainservice",{"_index":1090,"title":{"injectables/TerrainService.html":{}},"body":{"controllers/TerrainController.html":{},"modules/TerrainModule.html":{},"injectables/TerrainService.html":{},"coverage.html":{},"overview.html":{}}}],["test",{"_index":1367,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":1370,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1369,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1365,"title":{},"body":{"index.html":{}}}],["text",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GeminiService.html":{},"injectables/MailerService.html":{},"classes/SendMailDto.html":{},"miscellaneous/variables.html":{}}}],["thanks",{"_index":1446,"title":{},"body":{"index.html":{}}}],["things",{"_index":1543,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this..findbyid(id",{"_index":1272,"title":{},"body":{"injectables/UserService.html":{}}}],["this.authservice.login(dto",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logout(userid",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.otpsend(data",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.otpverify(email",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refresh(userid",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(dto",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.content",{"_index":417,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["this.geminiservice.destorysession(sub",{"_index":581,"title":{},"body":{"controllers/GeminiController.html":{}}}],["this.geminiservice.sendmessage(sub",{"_index":578,"title":{},"body":{"controllers/GeminiController.html":{}}}],["this.getsession(sessionid",{"_index":655,"title":{},"body":{"injectables/GeminiService.html":{}}}],["this.jwtservice.signasync",{"_index":1163,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.jwtservice.verify(token",{"_index":526,"title":{},"body":{"classes/EventsGateway.html":{}}}],["this.mailerservice.sendmail",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.mailtransport",{"_index":697,"title":{},"body":{"injectables/MailerService.html":{}}}],["this.matchid",{"_index":421,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["this.matchmodel",{"_index":960,"title":{},"body":{"injectables/MatchService.html":{}}}],["this.matchmodel.countdocuments",{"_index":1138,"title":{},"body":{"injectables/TerrainService.html":{}}}],["this.matchmodel.create",{"_index":951,"title":{},"body":{"injectables/MatchService.html":{}}}],["this.matchmodel.find",{"_index":942,"title":{},"body":{"injectables/MatchService.html":{}}}],["this.matchmodel.findbyid(id",{"_index":962,"title":{},"body":{"injectables/MatchService.html":{}}}],["this.matchmodel.findbyid(param.matchid",{"_index":864,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["this.matchmodel.findbyidandupdate(matchplayer.matchid",{"_index":915,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["this.matchmodel.findbyidandupdate(param.matchid",{"_index":876,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["this.matchplayermodel",{"_index":882,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["this.matchplayermodel.create",{"_index":875,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["this.matchplayermodel.findbyid(id",{"_index":891,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["this.matchplayermodel.findbyid(playerofmatchid",{"_index":897,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["this.matchplayermodel.findone",{"_index":867,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["this.matchplayerservice.accepteplayerofmatch(userid",{"_index":814,"title":{},"body":{"controllers/MatchPlayerController.html":{}}}],["this.matchplayerservice.cancelrequet(userid",{"_index":820,"title":{},"body":{"controllers/MatchPlayerController.html":{}}}],["this.matchplayerservice.findallmatchplayer",{"_index":811,"title":{},"body":{"controllers/MatchPlayerController.html":{}}}],["this.matchplayerservice.findjoinedmatchbyid(id",{"_index":822,"title":{},"body":{"controllers/MatchPlayerController.html":{}}}],["this.matchplayerservice.findmymatchplayer(userid.trim",{"_index":809,"title":{},"body":{"controllers/MatchPlayerController.html":{}}}],["this.matchplayerservice.joinmatch",{"_index":952,"title":{},"body":{"injectables/MatchService.html":{}}}],["this.matchplayerservice.joinmatch(param",{"_index":806,"title":{},"body":{"controllers/MatchPlayerController.html":{}}}],["this.matchplayerservice.refuseplayerofmatch(userid",{"_index":817,"title":{},"body":{"controllers/MatchPlayerController.html":{}}}],["this.matchplayerservice.remove(+id",{"_index":827,"title":{},"body":{"controllers/MatchPlayerController.html":{}}}],["this.matchplayerservice.update(+id",{"_index":826,"title":{},"body":{"controllers/MatchPlayerController.html":{}}}],["this.matchservice.creatematch(id",{"_index":743,"title":{},"body":{"controllers/MatchController.html":{}}}],["this.matchservice.findallmatches",{"_index":744,"title":{},"body":{"controllers/MatchController.html":{}}}],["this.matchservice.findmatchbyid(matchid",{"_index":742,"title":{},"body":{"controllers/MatchController.html":{}}}],["this.matchservice.findmymatches(id",{"_index":746,"title":{},"body":{"controllers/MatchController.html":{}}}],["this.matchservice.remove(+id",{"_index":753,"title":{},"body":{"controllers/MatchController.html":{}}}],["this.matchservice.update(+id",{"_index":750,"title":{},"body":{"controllers/MatchController.html":{}}}],["this.messagemodel.create",{"_index":1022,"title":{},"body":{"injectables/MessageService.html":{}}}],["this.messagemodel.find",{"_index":1027,"title":{},"body":{"injectables/MessageService.html":{}}}],["this.messageservice.create(createmessagedto",{"_index":991,"title":{},"body":{"controllers/MessageController.html":{}}}],["this.messageservice.create(new",{"_index":541,"title":{},"body":{"classes/EventsGateway.html":{}}}],["this.messageservice.findall",{"_index":992,"title":{},"body":{"controllers/MessageController.html":{}}}],["this.messageservice.findmessagesofmatch(idmatch",{"_index":997,"title":{},"body":{"controllers/MessageController.html":{}}}],["this.messageservice.findone(+id",{"_index":993,"title":{},"body":{"controllers/MessageController.html":{}}}],["this.messageservice.remove(+id",{"_index":995,"title":{},"body":{"controllers/MessageController.html":{}}}],["this.messageservice.update(+id",{"_index":994,"title":{},"body":{"controllers/MessageController.html":{}}}],["this.modelinstance.startchat(sessionobject",{"_index":657,"title":{},"body":{"injectables/GeminiService.html":{}}}],["this.reflector.getallandoverride('ispublic",{"_index":143,"title":{},"body":{"injectables/AtGuard.html":{}}}],["this.senderid",{"_index":423,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["this.sendername",{"_index":419,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["this.server.to(client.data.matchid).emit('response",{"_index":544,"title":{},"body":{"classes/EventsGateway.html":{}}}],["this.session.delete(sessionid",{"_index":652,"title":{},"body":{"injectables/GeminiService.html":{}}}],["this.session.get(sessionid",{"_index":624,"title":{},"body":{"injectables/GeminiService.html":{}}}],["this.session.set(sessionid",{"_index":647,"title":{},"body":{"injectables/GeminiService.html":{}}}],["this.terrainmodel.create",{"_index":1130,"title":{},"body":{"injectables/TerrainService.html":{}}}],["this.terrainmodel.find",{"_index":1142,"title":{},"body":{"injectables/TerrainService.html":{}}}],["this.terrainmodel.findbyid(terrainid.trim",{"_index":1143,"title":{},"body":{"injectables/TerrainService.html":{}}}],["this.terrainmodel.findbyidandupdate(creatematchdto.terrainid",{"_index":959,"title":{},"body":{"injectables/MatchService.html":{}}}],["this.terrainmodel.findone",{"_index":628,"title":{},"body":{"injectables/GeminiService.html":{},"injectables/TerrainService.html":{}}}],["this.terrainservice.create(createterraindto",{"_index":1095,"title":{},"body":{"controllers/TerrainController.html":{}}}],["this.terrainservice.findall",{"_index":1096,"title":{},"body":{"controllers/TerrainController.html":{}}}],["this.terrainservice.getmatchsofterrain(terrainid",{"_index":1102,"title":{},"body":{"controllers/TerrainController.html":{}}}],["this.terrainservice.getmyterrain(id",{"_index":1097,"title":{},"body":{"controllers/TerrainController.html":{}}}],["this.terrainservice.getstatistics(user",{"_index":1099,"title":{},"body":{"controllers/TerrainController.html":{}}}],["this.terrainservice.remove(+id",{"_index":1104,"title":{},"body":{"controllers/TerrainController.html":{}}}],["this.terrainservice.update(+id",{"_index":1103,"title":{},"body":{"controllers/TerrainController.html":{}}}],["this.tokenservice.clearrthash(userid",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.tokenservice.generatetokens",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.tokenservice.updaterthash",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.tokenservice.verifyrefreshtoken(user.hashrt",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usermodel",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.usermodel.findbyid(id",{"_index":1269,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findbyid(sessionid",{"_index":626,"title":{},"body":{"injectables/GeminiService.html":{}}}],["this.usermodel.findbyidanddelete(id",{"_index":1268,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findbyidandupdate(userid",{"_index":879,"title":{},"body":{"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{}}}],["this.usermodel.findone",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usermodel.updateone",{"_index":1169,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.userservice.currentuser(sub",{"_index":1239,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.currentuser(userid.sub",{"_index":528,"title":{},"body":{"classes/EventsGateway.html":{}}}],["this.userservice.deleteprofile(sub",{"_index":1235,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.editprofile(sub",{"_index":1233,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getjointedmatches(sub",{"_index":1244,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getownmatchs(sub",{"_index":1241,"title":{},"body":{"controllers/UserController.html":{}}}],["those",{"_index":1511,"title":{},"body":{"miscellaneous/variables.html":{}}}],["throw",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{},"classes/EventsGateway.html":{},"controllers/GeminiController.html":{},"injectables/GeminiService.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"injectables/TerrainService.html":{},"injectables/TokenService.html":{}}}],["throwerror",{"_index":459,"title":{},"body":{"injectables/CustomResponseInterceptor.html":{}}}],["time",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MatchService.html":{},"index.html":{}}}],["timestamp",{"_index":968,"title":{},"body":{"classes/Message.html":{}}}],["timestamps",{"_index":713,"title":{},"body":{"classes/Match.html":{},"classes/MatchPlayer.html":{},"classes/Message.html":{},"classes/Terrain.html":{}}}],["token",{"_index":516,"title":{},"body":{"classes/EventsGateway.html":{}}}],["token.service",{"_index":270,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["tokens",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/TokenService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["tokens.access_token",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{}}}],["tokens.refresh_token",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["tokenservice",{"_index":263,"title":{"injectables/TokenService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/TokenService.html":{},"coverage.html":{},"overview.html":{}}}],["topk",{"_index":1498,"title":{},"body":{"miscellaneous/variables.html":{}}}],["topp",{"_index":1500,"title":{},"body":{"miscellaneous/variables.html":{}}}],["touch",{"_index":1453,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":394,"title":{},"body":{"classes/CreateMatchDto.html":{},"classes/CreateTerrainDto.html":{},"dependencies.html":{}}}],["transporter",{"_index":687,"title":{},"body":{"injectables/MailerService.html":{}}}],["transporter.sendmail",{"_index":698,"title":{},"body":{"injectables/MailerService.html":{}}}],["trim",{"_index":1038,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["true",{"_index":147,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AuthService.html":{},"injectables/CustomResponseInterceptor.html":{},"injectables/MailerService.html":{},"classes/Match.html":{},"classes/MatchPlayer.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"classes/Message.html":{},"injectables/RtStrategy.html":{},"classes/Terrain.html":{},"injectables/TerrainService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{},"controllers/GeminiController.html":{},"injectables/GeminiService.html":{},"controllers/MatchPlayerController.html":{},"injectables/MatchPlayerService.html":{},"injectables/TerrainService.html":{},"controllers/UserController.html":{}}}],["twitter",{"_index":1459,"title":{},"body":{"index.html":{}}}],["type",{"_index":21,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMatchDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateTerrainDto.html":{},"injectables/CustomResponseInterceptor.html":{},"classes/EventsGateway.html":{},"controllers/GeminiController.html":{},"classes/GeminiMessageDto.html":{},"injectables/GeminiService.html":{},"classes/LoginDto.html":{},"injectables/MailerService.html":{},"classes/Match.html":{},"controllers/MatchController.html":{},"classes/MatchPlayer.html":{},"controllers/MatchPlayerController.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"classes/Message.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/RtStrategy.html":{},"classes/SendMailDto.html":{},"classes/SignupDto.html":{},"classes/Terrain.html":{},"controllers/TerrainController.html":{},"injectables/TerrainService.html":{},"injectables/TokenService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1474,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":470,"title":{},"body":{"injectables/CustomResponseInterceptor.html":{}}}],["types",{"_index":164,"title":{},"body":{"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Match.html":{},"classes/MatchPlayer.html":{},"classes/Message.html":{},"classes/Terrain.html":{},"injectables/TokenService.html":{},"classes/UpdateMatchDto.html":{},"classes/UpdateMatchPlayerDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateTerrainDto.html":{},"classes/User.html":{},"dependencies.html":{}}}],["types.objectid",{"_index":703,"title":{},"body":{"classes/Match.html":{},"classes/MatchPlayer.html":{},"classes/Message.html":{},"classes/Terrain.html":{},"classes/User.html":{}}}],["typescript",{"_index":1349,"title":{},"body":{"index.html":{}}}],["ugly",{"_index":1018,"title":{},"body":{"injectables/MessageService.html":{}}}],["undefined",{"_index":522,"title":{},"body":{"classes/EventsGateway.html":{},"injectables/GeminiService.html":{},"classes/Match.html":{},"classes/MatchPlayer.html":{},"classes/Message.html":{},"classes/Terrain.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["unique",{"_index":775,"title":{},"body":{"classes/MatchPlayer.html":{}}}],["unit",{"_index":1366,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":37,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GeminiService.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"injectables/MessageService.html":{},"injectables/RtStrategy.html":{},"injectables/TerrainService.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":1473,"title":{},"body":{"properties.html":{}}}],["update",{"_index":823,"title":{},"body":{"controllers/MatchPlayerController.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{}}}],["update(@param('id",{"_index":748,"title":{},"body":{"controllers/MatchController.html":{},"controllers/MessageController.html":{},"controllers/TerrainController.html":{}}}],["update(id",{"_index":917,"title":{},"body":{"injectables/MatchPlayerService.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/TerrainService.html":{}}}],["updatedat",{"_index":635,"title":{},"body":{"injectables/GeminiService.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"injectables/UserService.html":{}}}],["updatedat\").populate",{"_index":898,"title":{},"body":{"injectables/MatchPlayerService.html":{}}}],["updatematchdto",{"_index":749,"title":{"classes/UpdateMatchDto.html":{}},"body":{"controllers/MatchController.html":{},"classes/UpdateMatchDto.html":{},"coverage.html":{}}}],["updatematchplayerdto",{"_index":825,"title":{"classes/UpdateMatchPlayerDto.html":{}},"body":{"controllers/MatchPlayerController.html":{},"injectables/MatchPlayerService.html":{},"classes/UpdateMatchPlayerDto.html":{},"coverage.html":{}}}],["updatemessagedto",{"_index":985,"title":{"classes/UpdateMessageDto.html":{}},"body":{"controllers/MessageController.html":{},"injectables/MessageService.html":{},"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["updaterthash",{"_index":1147,"title":{},"body":{"injectables/TokenService.html":{}}}],["updaterthash(userid",{"_index":1155,"title":{},"body":{"injectables/TokenService.html":{}}}],["updates",{"_index":918,"title":{},"body":{"injectables/MatchPlayerService.html":{},"injectables/MessageService.html":{},"injectables/TerrainService.html":{},"index.html":{}}}],["updateterraindto",{"_index":1093,"title":{"classes/UpdateTerrainDto.html":{}},"body":{"controllers/TerrainController.html":{},"injectables/TerrainService.html":{},"classes/UpdateTerrainDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":1183,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["useclass",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":1545,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useguards",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(atguard",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(atguard)@post('logout')@httpcode(httpstatus.ok",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(rtguard",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":292,"title":{"classes/User.html":{}},"body":{"injectables/AuthService.html":{},"classes/EventsGateway.html":{},"modules/GeminiModule.html":{},"injectables/GeminiService.html":{},"injectables/MailerService.html":{},"classes/Match.html":{},"modules/MatchModule.html":{},"classes/MatchPlayer.html":{},"modules/MatchPlayerModule.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"classes/Message.html":{},"classes/Terrain.html":{},"controllers/TerrainController.html":{},"injectables/TerrainService.html":{},"injectables/TokenService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["user._id.tostring",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.controller",{"_index":1249,"title":{},"body":{"modules/UserModule.html":{}}}],["user.decorator.ts",{"_index":1290,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":1230,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":1185,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:13",{"_index":1187,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:17",{"_index":1186,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:21",{"_index":1189,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.email",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.hashrt",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":531,"title":{},"body":{"classes/EventsGateway.html":{}}}],["user.name",{"_index":530,"title":{},"body":{"classes/EventsGateway.html":{},"modules/GeminiModule.html":{},"modules/MatchModule.html":{},"modules/MatchPlayerModule.html":{},"modules/UserModule.html":{}}}],["user.otp",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.otpexpiry",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.role",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TerrainService.html":{}}}],["user.save",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":1229,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.sub",{"_index":1128,"title":{},"body":{"injectables/TerrainService.html":{},"miscellaneous/variables.html":{}}}],["user/user.module",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["usercontroller",{"_index":1210,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdata",{"_index":1219,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["userdocument",{"_index":1208,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["userexist",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{}}}],["userexist._id.tostring",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{}}}],["userexist.email",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{}}}],["userexist.password",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{}}}],["userexist.role",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{}}}],["userid",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/EventsGateway.html":{},"injectables/GeminiService.html":{},"classes/Match.html":{},"classes/MatchPlayer.html":{},"controllers/MatchPlayerController.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"classes/Message.html":{},"injectables/MessageService.html":{},"injectables/TokenService.html":{},"injectables/UserService.html":{}}}],["usermodel",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GeminiService.html":{},"injectables/MatchPlayerService.html":{},"injectables/MatchService.html":{},"injectables/TokenService.html":{},"injectables/UserService.html":{}}}],["usermodule",{"_index":92,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"injectables/MatchPlayerService.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":509,"title":{},"body":{"classes/EventsGateway.html":{},"classes/Message.html":{},"injectables/MessageService.html":{}}}],["userschema",{"_index":588,"title":{},"body":{"modules/GeminiModule.html":{},"modules/MatchModule.html":{},"modules/MatchPlayerModule.html":{},"classes/User.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":486,"title":{"injectables/UserService.html":{}},"body":{"classes/EventsGateway.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["user’s",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["using",{"_index":1428,"title":{},"body":{"index.html":{}}}],["valid",{"_index":525,"title":{},"body":{"classes/EventsGateway.html":{},"injectables/MatchPlayerService.html":{}}}],["validate",{"_index":154,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["validate(payload",{"_index":156,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["validate(req",{"_index":1033,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["validation",{"_index":474,"title":{},"body":{"injectables/CustomResponseInterceptor.html":{}}}],["validator",{"_index":393,"title":{},"body":{"classes/CreateMatchDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateTerrainDto.html":{},"classes/GeminiMessageDto.html":{},"classes/LoginDto.html":{},"classes/Message.html":{},"classes/SignupDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":612,"title":{},"body":{"injectables/GeminiService.html":{},"classes/Match.html":{},"injectables/MatchPlayerService.html":{},"classes/Terrain.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1289,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1487,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verified",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{}}}],["verify",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{}}}],["verify')@httpcode(httpstatus.ok",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifyrefreshtoken",{"_index":1148,"title":{},"body":{"injectables/TokenService.html":{}}}],["verifyrefreshtoken(hashrt",{"_index":1157,"title":{},"body":{"injectables/TokenService.html":{}}}],["version",{"_index":1471,"title":{},"body":{"properties.html":{}}}],["video",{"_index":1421,"title":{},"body":{"index.html":{}}}],["visit",{"_index":1410,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1424,"title":{},"body":{"index.html":{}}}],["vm",{"_index":1123,"title":{},"body":{"injectables/TerrainService.html":{}}}],["void",{"_index":25,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/EventsGateway.html":{}}}],["watch",{"_index":1360,"title":{},"body":{"index.html":{}}}],["website",{"_index":1457,"title":{},"body":{"index.html":{}}}],["websocketgateway",{"_index":500,"title":{},"body":{"classes/EventsGateway.html":{}}}],["websocketpayloadtype",{"_index":508,"title":{},"body":{"classes/EventsGateway.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["websocketserver",{"_index":488,"title":{},"body":{"classes/EventsGateway.html":{}}}],["whole",{"_index":1526,"title":{},"body":{"miscellaneous/variables.html":{}}}],["width",{"_index":434,"title":{},"body":{"classes/CreateTerrainDto.html":{},"classes/Terrain.html":{}}}],["working",{"_index":1409,"title":{},"body":{"index.html":{}}}],["x",{"_index":1436,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":1450,"title":{},"body":{"index.html":{}}}],["you'll",{"_index":1507,"title":{},"body":{"miscellaneous/variables.html":{}}}],["you're",{"_index":537,"title":{},"body":{"classes/EventsGateway.html":{},"injectables/MatchPlayerService.html":{},"index.html":{}}}],["zoom",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/GeminiModule.html":{},"modules/MailerModule.html":{},"modules/MatchModule.html":{},"modules/MatchPlayerModule.html":{},"modules/MessageModule.html":{},"modules/TerrainModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AllExceptionsFilter.html":{"url":"classes/AllExceptionsFilter.html","title":"class - AllExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/all-exceptions.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/interceptors/all-exceptions.filter.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { ApiResponse } from '../interfaces/api-response.interface';\n\n@Catch()\nexport class AllExceptionsFilter implements ExceptionFilter {\n  catch(exception: unknown, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status =\n      exception instanceof HttpException\n        ? exception.getStatus()\n        : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    const message =\n      exception instanceof HttpException\n        ? exception.message\n        : 'Internal server error';\n\n    const errors =\n      exception instanceof HttpException &&\n      exception.getResponse() instanceof Object\n        ? (exception.getResponse() as any).errors || { error: [message] }\n        : { error: [message] };\n\n    const errorResponse: ApiResponse = {\n      status: false,\n      data: null,\n      message,\n      errors,\n    };\n\n    response.status(status).json(errorResponse);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ApiResponse.html":{"url":"interfaces/ApiResponse.html","title":"interface - ApiResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ApiResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interfaces/api-response.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            errors\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T | null\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errors:     literal type | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type | null\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ApiResponse {\n  status: boolean;\n  data?: T | null;\n  message?: string | null;\n  errors?: { [key: string]: string[] } | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nEventsModule\n\nEventsModule\n\nAppModule -->\n\nEventsModule->AppModule\n\n\n\n\n\nGeminiModule\n\nGeminiModule\n\nAppModule -->\n\nGeminiModule->AppModule\n\n\n\n\n\nMailerModule\n\nMailerModule\n\nAppModule -->\n\nMailerModule->AppModule\n\n\n\n\n\nMatchModule\n\nMatchModule\n\nAppModule -->\n\nMatchModule->AppModule\n\n\n\n\n\nMatchPlayerModule\n\nMatchPlayerModule\n\nAppModule -->\n\nMatchPlayerModule->AppModule\n\n\n\n\n\nMessageModule\n\nMessageModule\n\nAppModule -->\n\nMessageModule->AppModule\n\n\n\n\n\nTerrainModule\n\nTerrainModule\n\nAppModule -->\n\nTerrainModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            EventsModule\n                        \n                        \n                            GeminiModule\n                        \n                        \n                            MailerModule\n                        \n                        \n                            MatchModule\n                        \n                        \n                            MatchPlayerModule\n                        \n                        \n                            MessageModule\n                        \n                        \n                            TerrainModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UserModule } from './user/user.module';\nimport { AuthModule } from './auth/auth.module';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AtGuard } from './common/guards';\nimport { ConfigModule } from '@nestjs/config';\nimport { MailerModule } from './mailer/mailer.module';\nimport { MatchModule } from './match/match.module';\nimport { MatchPlayerModule } from './match-player/match-player.module';\nimport { TerrainModule } from './terrain/terrain.module';\nimport { JwtService } from '@nestjs/jwt';\nimport { EventsModule } from './events/events.module';\nimport { MessageModule } from './message/message.module';\nimport { GeminiModule } from './gemini/gemini.module';\n\n@Module({\n  imports: [\n    UserModule,\n    ConfigModule.forRoot(),\n    MongooseModule.forRoot(process.env.MONGO_URI),\n    AuthModule,\n    MailerModule,\n    MatchModule,\n    MatchPlayerModule,\n    TerrainModule,\n    EventsModule,\n    MessageModule,\n    GeminiModule,\n  ],\n  providers: [\n    {\n      provide: APP_GUARD,\n      useClass: AtGuard\n    }\n  ]\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AtGuard.html":{"url":"injectables/AtGuard.html","title":"injectable - AtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/guards/at.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/at.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/guards/at.guard.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class AtGuard extends AuthGuard('jwt') {\n  constructor(private readonly reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride('isPublic', [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (isPublic) return true;\n\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AtStrategy.html":{"url":"injectables/AtStrategy.html","title":"injectable - AtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/at.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/at.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: JwtPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/at.strategy.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { JwtPayload } from '../types';\n\n@Injectable()\nexport class AtStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: process.env.AT_SECRET,\n    });\n  }\n\n  async validate(payload: JwtPayload) {\n    return payload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                logout\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                otpSend\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                otpVerify\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                refresh\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(dto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('login')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AtGuard)@Post('logout')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        otpSend\n                        \n                    \n                \n            \n            \n                \n                        \n                    otpSend(data)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('otp-send')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        otpVerify\n                        \n                    \n                \n            \n            \n                \n                        \n                    otpVerify(undefined: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('otp-verify')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                        \n                    refresh(userId: string, refreshToken: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@UseGuards(RtGuard)@Post('refresh')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        signup\n                        \n                    \n                \n            \n            \n                \n                        \n                    signup(dto: SignupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('signup')@HttpCode(HttpStatus.CREATED)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            SignupDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  HttpCode,\n  HttpStatus,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { SignupDto } from './dto/signup.dto';\nimport {\n  GetCurrentUser,\n  GetCurrentUserId,\n  Public,\n} from 'src/common/decorators';\nimport { AtGuard, RtGuard } from 'src/common/guards';\nimport { Tokens } from './types';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) { }\n\n  @Public()\n  @Post('signup')\n  @HttpCode(HttpStatus.CREATED)\n  async signup(@Body() dto: SignupDto) {\n    return await this.authService.signup(dto);\n  }\n\n  @Public()\n  @Post('login')\n  @HttpCode(HttpStatus.OK)\n  async login(@Body() dto: LoginDto) {\n    return await this.authService.login(dto);\n  }\n\n  @Public()\n  @Post('otp-send')\n  @HttpCode(HttpStatus.OK)\n  async otpSend(@Body() data) {\n    await this.authService.otpSend(data);\n    return { message: 'OTP sent successfully' };\n  }\n\n  @Public()\n  @Post('otp-verify')\n  @HttpCode(HttpStatus.OK)\n  async otpVerify(@Body() { email, code }: { email: string; code: string }) {\n    const isValid = this.authService.otpVerify(email, code);\n    return { message: isValid ? 'OTP verified successfully' : 'Invalid OTP' };\n  }\n\n  @UseGuards(AtGuard)\n  @Post('logout')\n  @HttpCode(HttpStatus.OK)\n  async logout(\n    @GetCurrentUserId() userId: string,\n  ): Promise {\n    await this.authService.logout(userId);\n\n    return { message: 'Logged out successfully' };\n  }\n\n  @Public()\n  @UseGuards(RtGuard)\n  @Post('refresh')\n  @HttpCode(HttpStatus.OK)\n  async refresh(\n    @GetCurrentUserId() userId: string,\n    @GetCurrentUser('refreshToken') refreshToken: string,\n  ): Promise {\n\n    const tokens = await this.authService.refresh(userId, refreshToken);\n\n    return {\n      access_token: tokens.access_token,\n      refresh_token: tokens.refresh_token,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nMailerModule\n\nMailerModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nMailerModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAtStrategy\n\nAtStrategy\n\nAuthModule -->\n\nAtStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRtStrategy\n\nRtStrategy\n\nAuthModule -->\n\nRtStrategy->AuthModule\n\n\n\n\n\nTokenService\n\nTokenService\n\nAuthModule -->\n\nTokenService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AtStrategy\n                        \n                        \n                            AuthService\n                        \n                        \n                            RtStrategy\n                        \n                        \n                            TokenService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MailerModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { UserModule } from 'src/user/user.module';\nimport { AtStrategy, RtStrategy } from './strategies';\nimport { JwtModule } from '@nestjs/jwt';\nimport { MailerModule } from 'src/mailer/mailer.module';\nimport { TokenService } from './token.service';\n@Module({\n  imports: [UserModule, JwtModule.register({}), MailerModule],\n  controllers: [AuthController],\n  providers: [AuthService, AtStrategy, RtStrategy, TokenService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                otpSend\n                            \n                            \n                                    Async\n                                otpVerify\n                            \n                            \n                                    Async\n                                refresh\n                            \n                            \n                                    Async\n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, mailerService: MailerService, tokenService: TokenService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                        MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tokenService\n                                                  \n                                                        \n                                                                        TokenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginData: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginData\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:103\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        otpSend\n                        \n                    \n                \n            \n            \n                \n                        \n                    otpSend(data)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        otpVerify\n                        \n                    \n                \n            \n            \n                \n                        \n                    otpVerify(email: string, code: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                code\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                        \n                    refresh(userId: string, rt: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:147\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                rt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signup\n                        \n                    \n                \n            \n            \n                \n                        \n                    signup(signupData: SignupDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:108\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signupData\n                                            \n                                                            SignupDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  HttpException,\n  HttpStatus,\n  Injectable,\n  ForbiddenException,\n} from '@nestjs/common';\nimport { LoginDto } from './dto/login.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { User } from 'src/user/entities/user.entity';\nimport { Model } from 'mongoose';\nimport * as argon2 from 'argon2';\nimport { SignupDto } from './dto/signup.dto';\nimport { Tokens } from './types';\nimport { MailerService } from 'src/mailer/mailer.service';\nimport { TokenService } from './token.service';\nimport { authenticator } from 'otplib';\nimport { rejects } from 'assert';\nimport { error } from 'console';\nimport { resolve } from 'path';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectModel(User.name) private userModel: Model,\n    private readonly mailerService: MailerService,\n    private readonly tokenService: TokenService,\n  ) { }\n\n  async otpSend(data): Promise {\n    const user = await this.userModel.findOne({ email: data.email });\n    if (!user) {\n      throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n    }\n\n    const otp = authenticator.generate(process.env.OTP_SECRET);\n    const expiry = new Date(Date.now() + 5 * 60 * 1000); // OTP expires in 5 minutes\n\n    // Save OTP and expiry to user document\n    user.otp = otp;\n    user.otpExpiry = expiry;\n    await user.save();\n\n    // Send OTP to user’s email\n    await this.mailerService.sendMail({\n      to: user.email,\n      subject: 'Your OTP Code',\n      text: `Your OTP is: ${otp}. It will expire in 5 minutes.`,\n    });\n\n    return true;\n  }\n\n  async otpVerify(email: string, code: string): Promise {\n    const user = await this.userModel.findOne({ email });\n    if (!user || !user.otp || !user.otpExpiry) {\n      throw new HttpException(\n        'Invalid or expired OTP',\n        HttpStatus.UNAUTHORIZED,\n      );\n    }\n\n    // Check OTP and expiry time\n    if (user.otp !== code || user.otpExpiry  {\n    const userExist = await this.userModel.findOne({ email: loginData.email });\n    if (!userExist) {\n      throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n    }\n    const passwordMatch = await argon2.verify(\n      userExist.password,\n      loginData.password,\n    );\n    if (!passwordMatch) {\n      throw new HttpException('Invalid password', HttpStatus.BAD_REQUEST);\n    }\n\n    const tokens = await this.tokenService.generateTokens(\n      userExist._id.toString(),\n      userExist.email,\n      userExist.role,\n    );\n    await this.tokenService.updateRtHash(\n      userExist._id.toString(),\n      tokens.refresh_token,\n    );\n    return tokens;\n  }\n\n  async logout(userId: string) {\n    await this.tokenService.clearRtHash(userId);\n    return true;\n  }\n\n  async signup(signupData: SignupDto): Promise {\n    const userExist = await this.userModel.findOne({ email: signupData.email });\n    if (userExist) {\n      throw new HttpException('User already exists', HttpStatus.CONFLICT);\n    }\n\n    const hashedPassword = await argon2.hash(signupData.password);\n    const newUser = new this.userModel({\n      ...signupData,\n      password: hashedPassword,\n    });\n    const savedUser = await newUser.save();\n\n    const tokens = await this.tokenService.generateTokens(\n      savedUser._id.toString(),\n      savedUser.email,\n      savedUser.role,\n    );\n\n    await this.tokenService.updateRtHash(\n      savedUser._id.toString(),\n      tokens.refresh_token,\n    );\n\n    try {\n      await this.mailerService.sendMail({\n        to: savedUser.email,\n        subject: 'Account Created',\n        text: 'Your account has been created successfully',\n      });\n      console.log(\"No Mail Errors\")\n    } catch (e) {\n      console.log(e)\n      console.log(\"Problem in mail sending\")\n    }\n\n    return tokens;\n  }\n\n  async refresh(userId: string, rt: string): Promise {\n\n    const user = await this.userModel.findOne({ _id: userId });\n\n    if (!user || !user.hashRt) {\n      throw new ForbiddenException('Access Denied');\n    }\n\n    await this.tokenService.verifyRefreshToken(user.hashRt, rt);\n\n    const tokens = await this.tokenService.generateTokens(\n      user._id.toString(),\n      user.email,\n      user.role,\n    );\n    await this.tokenService.updateRtHash(\n      user._id.toString(),\n      tokens.refresh_token,\n    );\n\n    return tokens;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMatchDto.html":{"url":"classes/CreateMatchDto.html","title":"class - CreateMatchDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMatchDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/match/dto/create-match.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                date\n                            \n                            \n                                    \n                                    \n                                terrainId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@Type(undefined)@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/match/dto/create-match.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        terrainId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/match/dto/create-match.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsNotEmpty, IsString } from '@nestjs/class-validator';\nimport { Type } from 'class-transformer';\n\nexport class CreateMatchDto {\n  @IsNotEmpty()\n  @Type(() => Date)\n  @IsDate()\n  date: Date;\n\n  @IsNotEmpty()\n  @IsString()\n  terrainId: string;\n\n  // @IsNotEmpty()\n  // @IsString()\n  // latitude: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMatchPlayerDto.html":{"url":"classes/CreateMatchPlayerDto.html","title":"class - CreateMatchPlayerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMatchPlayerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/match-player/dto/create-match-player.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateMatchPlayerDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMessageDto.html":{"url":"classes/CreateMessageDto.html","title":"class - CreateMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/message/dto/create-message.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                content\n                            \n                            \n                                matchId\n                            \n                            \n                                senderId\n                            \n                            \n                                senderName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(messageS: MessageStructure)\n                    \n                \n                        \n                            \n                                Defined in src/message/dto/create-message.dto.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        messageS\n                                                  \n                                                        \n                                                                        MessageStructure\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         String\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/message/dto/create-message.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        matchId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         String\n\n                    \n                \n                    \n                        \n                                Defined in src/message/dto/create-message.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        senderId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         String\n\n                    \n                \n                    \n                        \n                                Defined in src/message/dto/create-message.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        senderName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         String\n\n                    \n                \n                    \n                        \n                                Defined in src/message/dto/create-message.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from \"class-validator\";\nimport { isValidObjectId } from \"mongoose\";\n\ntype MessageStructure = {\n    content: String,\n    sendId: String,\n    matchId: String,\n    senderName: String\n}\n\nexport class CreateMessageDto {\n    constructor(\n        messageS: MessageStructure\n    ) {\n        this.content = messageS.content,\n            this.senderName = messageS.senderName,\n            this.matchId = messageS.matchId,\n            this.senderId = messageS.sendId\n    }\n    @IsString()\n    content: String\n    senderId: String\n    matchId: String\n    senderName: String\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTerrainDto.html":{"url":"classes/CreateTerrainDto.html","title":"class - CreateTerrainDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTerrainDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/terrain/dto/create-terrain.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                    \n                                    \n                                date\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                height\n                            \n                            \n                                    \n                                label\n                            \n                            \n                                    \n                                latitude\n                            \n                            \n                                    \n                                longitude\n                            \n                            \n                                    \n                                price\n                            \n                            \n                                    \n                                width\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/terrain/dto/create-terrain.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@Type(undefined)@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/terrain/dto/create-terrain.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/terrain/dto/create-terrain.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        height\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/terrain/dto/create-terrain.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/terrain/dto/create-terrain.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        latitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/terrain/dto/create-terrain.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        longitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/terrain/dto/create-terrain.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/terrain/dto/create-terrain.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        width\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/terrain/dto/create-terrain.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsDate, IsString, IsNumber, IsOptional, IsNotEmpty } from 'class-validator';\n\nexport class CreateTerrainDto {\n  @IsNotEmpty()\n  @Type(() => Date)\n  @IsDate()\n  date: Date;\n  @IsString()\n  label: string;\n\n\n  @IsString()\n  address: string;\n\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @IsNumber()\n  width: number;\n\n  @IsNumber()\n  height: number;\n\n  @IsNumber()\n  price: number;\n\n  @IsString()\n  longitude: string;\n\n  @IsString()\n  latitude: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomResponseInterceptor.html":{"url":"injectables/CustomResponseInterceptor.html","title":"injectable - CustomResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/custom-response.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/interceptors/custom-response.interceptor.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n  BadRequestException,\n} from '@nestjs/common';\nimport { Observable, throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { ApiResponse } from '../interfaces/api-response.interface';\n\n@Injectable()\nexport class CustomResponseInterceptor\n  implements NestInterceptor>\n{\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    return next.handle().pipe(\n      map((data) => ({\n        status: true,\n        message: 'Request successful',\n        data,\n        errors: null,\n      })),\n      catchError((error) => {\n        if (error instanceof BadRequestException) {\n          const response = error.getResponse();\n          const errorMessage =\n            typeof response === 'string' ? response : (response as any).message;\n          const errors = Array.isArray(errorMessage)\n            ? errorMessage.flat()\n            : [errorMessage];\n          return throwError(\n            () =>\n              new BadRequestException({\n                status: false,\n                message: 'Validation failed',\n                data: null,\n                errors,\n              }),\n          );\n        }\n        return throwError(() => error);\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EventsGateway.html":{"url":"classes/EventsGateway.html","title":"class - EventsGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EventsGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/events.gateway.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnGatewayConnection\n                        OnGatewayDisconnect\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleConnection\n                            \n                            \n                                handleDisconnect\n                            \n                            \n                                    \n                                handleMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(messageService: MessageService, matchService: MatchService, userService: UserService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/events/events.gateway.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        messageService\n                                                  \n                                                        \n                                                                        MessageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        matchService\n                                                  \n                                                        \n                                                                        MatchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/events.gateway.ts:20\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        handleConnection\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleConnection(client: Socket, ...args: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/events/events.gateway.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                args\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleDisconnect\n                        \n                    \n                \n            \n            \n                \nhandleDisconnect(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/events/events.gateway.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleMessage(client: Socket, payload: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('message')\n                \n            \n\n                    \n                        \n                            Defined in src/events/events.gateway.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { JwtService } from '@nestjs/jwt';\nimport { OnGatewayConnection, OnGatewayDisconnect, SubscribeMessage, WebSocketGateway, WebSocketServer } from '@nestjs/websockets';\nimport { Socket, Server } from 'socket.io';\nimport { JwtPayload } from 'src/auth/types';\nimport { MatchService } from 'src/match/match.service';\nimport { CreateMessageDto } from 'src/message/dto/create-message.dto';\nimport { MessageService } from 'src/message/message.service';\nimport { UserService } from 'src/user/user.service';\n\ntype WebSocketPayloadType = {\n  content: String,\n  userName: String,\n  userId: String\n}\n\n@WebSocketGateway()\nexport class EventsGateway implements OnGatewayConnection, OnGatewayDisconnect {\n\n  @WebSocketServer()\n  server: Server\n  constructor(private messageService: MessageService, private matchService: MatchService, private userService: UserService, private jwtService: JwtService) { }\n\n\n  async handleConnection(client: Socket, ...args: any[]) {\n    // we gonna make all auth stuff right here!\n    // check the user cridentials token, sessionId\n\n    const token = client.handshake.headers.authorization?.split(\" \").at(1);\n    const matchId = client.handshake.query['roomId'] as string;\n    console.log(token, matchId);\n    if (token == undefined || matchId == undefined) {\n      client.disconnect();\n      return;\n    }\n\n    // throw exeption when the token not valid!\n    const userId = this.jwtService.verify(token, { secret: process.env.AT_SECRET }) as JwtPayload\n    const user = await this.userService.currentUser(userId.sub);\n\n    client.data = {\n      name: user.name,\n      userId: user.id,\n      matchId: matchId\n    };\n\n    console.log(\"Client Connected\")\n    client.join(matchId);\n    client.emit(\"walcome\", \"Hello You're Connected To Our Server\")\n\n  }\n\n\n\n  handleDisconnect(client: Socket) {\n    console.log('client disconnected ' + client.data.name)\n    client.data = undefined;\n\n  }\n\n\n  @SubscribeMessage('message')\n  handleMessage(client: Socket, payload: any): string {\n\n    this.messageService.create(new CreateMessageDto({ senderName: client.data.name, sendId: client.data.userId, matchId: client.data.matchId, content: payload }))\n    this.server.to(client.data.matchId).emit('response', { userName: client.data.name, content: payload, userId: client.data.userId, datetime_: (new Date()).toISOString() });\n    return \"emitted\";\n\n  }\n\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EventsModule.html":{"url":"modules/EventsModule.html","title":"module - EventsModule","body":"\n                   \n\n\n\n\n    Modules\n    EventsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EventsModule\n\n\n\ncluster_EventsModule_imports\n\n\n\n\nMatchModule\n\nMatchModule\n\n\n\nEventsModule\n\nEventsModule\n\nEventsModule -->\n\nMatchModule->EventsModule\n\n\n\n\n\nMessageModule\n\nMessageModule\n\nEventsModule -->\n\nMessageModule->EventsModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nEventsModule -->\n\nUserModule->EventsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/events/events.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            MatchModule\n                        \n                        \n                            MessageModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EventsGateway } from './events.gateway';\nimport { UserModule } from 'src/user/user.module';\nimport { JwtModule } from '@nestjs/jwt';\nimport { MessageModule } from 'src/message/message.module';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Message, MessageSchema } from 'src/message/entities/message.entity';\nimport { MatchModule } from 'src/match/match.module';\n\n@Module({\n  providers: [\n    EventsGateway,\n  ],\n  imports: [\n    UserModule, JwtModule.register({ secret: process.env.AT_SECRET }), MessageModule, MatchModule\n  ]\n\n})\nexport class EventsModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GeminiController.html":{"url":"controllers/GeminiController.html","title":"controller - GeminiController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GeminiController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gemini/gemini.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                gemini\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                destroySessoin\n                            \n                            \n                                    \n                                sendMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        destroySessoin\n                        \n                    \n                \n            \n            \n                \n                        \n                    destroySessoin(sub)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('session')\n                \n            \n\n                    \n                        \n                            Defined in src/gemini/gemini.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sub\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sendMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendMessage(sub, messageDto: GeminiMessageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('message')\n                \n            \n\n                    \n                        \n                            Defined in src/gemini/gemini.controller.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sub\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                messageDto\n                                            \n                                                            GeminiMessageDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Inject, Post } from '@nestjs/common';\nimport { GetCurrentUserId } from 'src/common/decorators';\nimport { GeminiService } from './gemini.service';\nimport { GeminiMessageDto } from './dto/gemini-message.dto';\n\n@Controller('gemini')\nexport class GeminiController {\n\n    constructor(@Inject() private readonly geminiService: GeminiService) { }\n\n\n    @Post('message')\n    sendMessage(@GetCurrentUserId() sub, @Body() messageDto: GeminiMessageDto) {\n        try {\n            return this.geminiService.sendMessage(sub, messageDto.content);\n        } catch (e) {\n            console.log(e);\n            throw e;\n        }\n    }\n\n    @Delete('session')\n    destroySessoin(@GetCurrentUserId() sub) {\n        return this.geminiService.destorySession(sub);\n    }\n}\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GeminiMessageDto.html":{"url":"classes/GeminiMessageDto.html","title":"class - GeminiMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GeminiMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gemini/dto/gemini-message.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                content\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         String\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/gemini/dto/gemini-message.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from \"@nestjs/class-validator\"\n\n\nexport class GeminiMessageDto {\n    @IsString()\n    content: String;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GeminiModule.html":{"url":"modules/GeminiModule.html","title":"module - GeminiModule","body":"\n                   \n\n\n\n\n    Modules\n    GeminiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GeminiModule\n\n\n\ncluster_GeminiModule_providers\n\n\n\n\nGeminiService\n\nGeminiService\n\n\n\nGeminiModule\n\nGeminiModule\n\nGeminiModule -->\n\nGeminiService->GeminiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/gemini/gemini.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GeminiService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GeminiController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GeminiService } from './gemini.service';\nimport { GeminiController } from './gemini.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from 'src/user/entities/user.entity';\nimport { Terrain } from 'src/terrain/entities/terrain.entity';\nimport { GeminiProModelProvider } from './gemini.provider';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: Terrain.name, schema: Terrain },\n    ]),\n    MongooseModule.forFeature([\n      { name: User.name, schema: UserSchema },\n    ]),\n  ],\n  providers: [GeminiService, GeminiProModelProvider],\n  controllers: [GeminiController]\n})\nexport class GeminiModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GeminiService.html":{"url":"injectables/GeminiService.html","title":"injectable - GeminiService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GeminiService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gemini/gemini.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                session\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                destorySession\n                            \n                            \n                                    Async\n                                getSession\n                            \n                            \n                                    Async\n                                sendMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(modelInstance: GenerativeModel, userModel: Model, terrainModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/gemini/gemini.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        modelInstance\n                                                  \n                                                        \n                                                                    GenerativeModel\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        terrainModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        destorySession\n                        \n                    \n                \n            \n            \n                \ndestorySession(sessionId: String)\n                \n            \n\n\n                    \n                        \n                            Defined in src/gemini/gemini.service.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sessionId\n                                            \n                                                            String\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { message: string; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSession(sessionId: String)\n                \n            \n\n\n                    \n                        \n                            Defined in src/gemini/gemini.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sessionId\n                                            \n                                                            String\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendMessage(sessionId: String, content: String)\n                \n            \n\n\n                    \n                        \n                            Defined in src/gemini/gemini.service.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sessionId\n                                            \n                                                            String\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                content\n                                            \n                                                            String\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        session\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/gemini/gemini.service.ts:21\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Inject, Injectable } from '@nestjs/common';\nimport { GEMINI_MODEL_NAME } from './gemini.config';\nimport { ChatSession, GenerativeModel, StartChatParams } from '@google/generative-ai';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { User } from 'src/user/entities/user.entity';\nimport { Terrain } from 'src/terrain/entities/terrain.entity';\n\n\ntype Session = {\n    history: []\n}\n\n@Injectable()\nexport class GeminiService {\n    constructor(\n        @Inject(GEMINI_MODEL_NAME) private readonly modelInstance: GenerativeModel,\n        @InjectModel(User.name) private userModel: Model,\n        @InjectModel(Terrain.name) private terrainModel: Model,\n    ) { }\n    private session: Map = new Map();\n\n    async getSession(sessionId: String): Promise {\n        const currenSession = this.session.get(sessionId);\n\n        if (currenSession == undefined) {\n            const currentManger = await this.userModel.findById(sessionId);\n\n            if (!currentManger)\n                throw new HttpException('user not found', HttpStatus.NOT_FOUND);\n            try {\n                const terrainInfo = await this.terrainModel.findOne({ managerId: currentManger._id.toString() }).exec();\n                console.log(terrainInfo);\n            } catch (e) {\n                console.log(e);\n            }\n\n\n\n            const terrainInfo = await this.terrainModel.findOne({ managerId: currentManger._id.toString() })\n                .populate('matchsIn', '-createdAt -updatedAt -__v')\n                .populate({\n                    path: 'matchsIn',\n                    populate: [\n                        { path: 'userId', select: 'name email' },\n                        { path: 'playersOfMatch', populate: { path: 'userId', select: 'name email' } },\n                    ]\n                })\n                .exec();\n\n\n\n\n            console.log(\"user \" + currentManger._id)\n            console.log(\"matches \" + terrainInfo.matchsIn.length)\n            console.log(\"id of terrain \" + terrainInfo._id)\n\n            this.session.set(sessionId, {\n                history: [\n                    {\n                        \"role\": \"user\",\n                        \"parts\": [\n                            { 'text': 'data provided ' + JSON.stringify(terrainInfo) }\n                        ]\n                    }\n                ]\n            });\n\n        }\n        return this.session.get(sessionId);\n\n    }\n\n    destorySession(sessionId: String) {\n        this.session.delete(sessionId);\n        return {\n            'message': 'session destroied'\n        };\n    }\n\n\n    async sendMessage(sessionId: String, content: String) {\n        const sessionObject = await this.getSession(sessionId);\n        const modelInstanceWithContext = this.modelInstance.startChat(sessionObject);\n        return (await modelInstanceWithContext.sendMessage(content.toString())).response.candidates.at(0).content;\n    }\n\n\n\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  MinLength,\n} from '@nestjs/class-validator';\n\nexport class LoginDto {\n  @IsEmail()\n  @IsString()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(6)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MailerController.html":{"url":"controllers/MailerController.html","title":"controller - MailerController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MailerController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mailer/mailer.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                mailer\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { MailerService } from './mailer.service';\n\n@Controller('mailer')\nexport class MailerController {\n  constructor(private readonly mailerService: MailerService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MailerModule.html":{"url":"modules/MailerModule.html","title":"module - MailerModule","body":"\n                   \n\n\n\n\n    Modules\n    MailerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MailerModule\n\n\n\ncluster_MailerModule_providers\n\n\n\ncluster_MailerModule_exports\n\n\n\n\nMailerService \n\nMailerService \n\n\n\nMailerModule\n\nMailerModule\n\nMailerService  -->\n\nMailerModule->MailerService \n\n\n\n\n\nMailerService\n\nMailerService\n\nMailerModule -->\n\nMailerService->MailerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mailer/mailer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailerService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MailerController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MailerService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MailerService } from './mailer.service';\nimport { MailerController } from './mailer.controller';\n\n@Module({\n  controllers: [MailerController],\n  providers: [MailerService],\n  exports: [MailerService],\n})\nexport class MailerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailerService.html":{"url":"injectables/MailerService.html","title":"injectable - MailerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mailer/mailer.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                mailTransport\n                            \n                            \n                                    Async\n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        mailTransport\n                        \n                    \n                \n            \n            \n                \nmailTransport()\n                \n            \n\n\n                    \n                        \n                            Defined in src/mailer/mailer.service.ts:7\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendMail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendMail(undefined: SendMailDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mailer/mailer.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            SendMailDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as nodemailer from 'nodemailer';\nimport { SendMailDto } from './dto/send-mail.dto';\n\n@Injectable()\nexport class MailerService {\n  mailTransport() {\n    const transporter = nodemailer.createTransport({\n      host: process.env.SMTP_HOST,\n      port: +process.env.SMTP_PORT,\n      secure: process.env.SMTP_SECURE === 'true',\n      auth: {\n        user: process.env.SMTP_USER,\n        pass: process.env.SMTP_PASS,\n      },\n    });\n    return transporter;\n  }\n\n  async sendMail({ to, subject, text }: SendMailDto) {\n    const transporter = this.mailTransport();\n    await transporter.sendMail({\n      from: process.env.SMTP_USER,\n      to,\n      subject,\n      text,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Match.html":{"url":"classes/Match.html","title":"class - Match","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Match\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/match/entities/match.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                date\n                            \n                            \n                                    \n                                playersOfMatch\n                            \n                            \n                                    \n                                terrainId\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Default value : new Date()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Date, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/match/entities/match.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        playersOfMatch\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'MatchPlayer', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/match/entities/match.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        terrainId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Terrain', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/match/entities/match.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'User', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/match/entities/match.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument, Types } from 'mongoose';\n\nexport type MatchDocument = HydratedDocument;\n\n@Schema({ timestamps: true })\nexport class Match {\n  @Prop({ type: Date, required: true })\n  date: Date = new Date();\n\n  @Prop({ type: Types.ObjectId, ref: 'User', required: true })\n  userId: Types.ObjectId;\n\n  @Prop({ type: Types.ObjectId, ref: 'Terrain', required: true })\n  terrainId: Types.ObjectId;\n\n  @Prop({ type: [Types.ObjectId], ref: 'MatchPlayer', required: true })\n  playersOfMatch: Types.ObjectId[]\n\n}\n\nexport const MatchSchema = SchemaFactory.createForClass(Match);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MatchController.html":{"url":"controllers/MatchController.html","title":"controller - MatchController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MatchController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/match/match.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                match\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createMatch\n                            \n                            \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                getMatchByid\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createMatch\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMatch(id: string, createMatchDto: CreateMatchDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/match/match.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createMatchDto\n                                            \n                                                            CreateMatchDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get()\n                \n            \n\n                    \n                        \n                            Defined in src/match/match.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/my-matches')\n                \n            \n\n                    \n                        \n                            Defined in src/match/match.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getMatchByid\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMatchByid(matchid)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:idMatch')\n                \n            \n\n                    \n                        \n                            Defined in src/match/match.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                matchid\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { MatchService } from './match.service';\nimport { CreateMatchDto } from './dto/create-match.dto';\nimport { GetCurrentUserId, Public } from 'src/common/decorators';\n\n@Controller('match')\nexport class MatchController {\n  constructor(private readonly matchService: MatchService) { }\n\n  @Get(\"/:idMatch\")\n  getMatchByid(@Param(\"idMatch\") matchid) {\n    return this.matchService.findMatchById(matchid);\n  }\n\n  @Post()\n  createMatch(\n    @GetCurrentUserId() id: string,\n    @Body() createMatchDto: CreateMatchDto,\n  ) {\n    return this.matchService.createMatch(id, createMatchDto);\n  }\n\n  @Public()\n  @Get()\n  findAll() {\n    return this.matchService.findAllMatches();\n  }\n\n  @Get('/my-matches')\n  findOne(@GetCurrentUserId() id: string) {\n    return this.matchService.findMyMatches(id);\n  }\n\n\n\n  // @Patch(':id') \n  // update(@Param('id') id: string, @Body() updateMatchDto: UpdateMatchDto) {\n  //   return this.matchService.update(+id, updateMatchDto);\n  // }\n\n  // @Delete(':id')\n  // remove(@Param('id') id: string) {\n  //   return this.matchService.remove(+id);\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MatchModule.html":{"url":"modules/MatchModule.html","title":"module - MatchModule","body":"\n                   \n\n\n\n\n    Modules\n    MatchModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MatchModule\n\n\n\ncluster_MatchModule_imports\n\n\n\ncluster_MatchModule_exports\n\n\n\ncluster_MatchModule_providers\n\n\n\n\nMatchPlayerModule\n\nMatchPlayerModule\n\n\n\nMatchModule\n\nMatchModule\n\nMatchModule -->\n\nMatchPlayerModule->MatchModule\n\n\n\n\n\nMatchService \n\nMatchService \n\nMatchService  -->\n\nMatchModule->MatchService \n\n\n\n\n\nMatchService\n\nMatchService\n\nMatchModule -->\n\nMatchService->MatchModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/match/match.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MatchService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MatchController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MatchPlayerModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MatchService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MatchService } from './match.service';\nimport { MatchController } from './match.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Match, MatchSchema } from './entities/match.entity';\nimport { MatchPlayerModule } from 'src/match-player/match-player.module';\nimport { User, UserSchema } from 'src/user/entities/user.entity';\nimport { Terrain, TerrainSchema } from 'src/terrain/entities/terrain.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Match.name, schema: MatchSchema }]),\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n    MongooseModule.forFeature([{ name: Terrain.name, schema: TerrainSchema }]),\n    MatchPlayerModule,\n  ],\n  controllers: [MatchController],\n  providers: [MatchService],\n  exports: [MatchService],\n})\nexport class MatchModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MatchPlayer.html":{"url":"classes/MatchPlayer.html","title":"class - MatchPlayer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MatchPlayer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/match-player/entities/match-player.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                isAccepted\n                            \n                            \n                                    \n                                matchId\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isAccepted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Boolean})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/match-player/entities/match-player.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        matchId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Match\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Match', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/match-player/entities/match-player.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'User', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/match-player/entities/match-player.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument, Types } from 'mongoose';\nimport { Match } from 'src/match/entities/match.entity';\n\nexport type MatchPlayerDocument = HydratedDocument;\n\n@Schema({ timestamps: true })\nexport class MatchPlayer {\n  @Prop({ type: Boolean })\n  isAccepted: boolean;\n\n  @Prop({ type: Types.ObjectId, ref: 'User', required: true })\n  userId: Types.ObjectId;\n\n  @Prop({ type: Types.ObjectId, ref: 'Match', required: true })\n  matchId: Match;\n\n}\n\nconst MatchPlayerSchema = SchemaFactory.createForClass(MatchPlayer);\n\nMatchPlayerSchema.index({ matchId: 1, userId: 1 }, { unique: true });\n\nexport { MatchPlayerSchema };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MatchPlayerController.html":{"url":"controllers/MatchPlayerController.html","title":"controller - MatchPlayerController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MatchPlayerController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/match-player/match-player.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                match-player\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                acceptMatchPlayerId\n                            \n                            \n                                    \n                                cancelRequest\n                            \n                            \n                                    \n                                    \n                                findAllMatchPlayer\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                joinMatch\n                            \n                            \n                                    \n                                refuseMatchPlayerId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        acceptMatchPlayerId\n                        \n                    \n                \n            \n            \n                \n                        \n                    acceptMatchPlayerId(matchPlayerId: string, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/accept/:matchPlayerId')\n                \n            \n\n                    \n                        \n                            Defined in src/match-player/match-player.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                matchPlayerId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        cancelRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    cancelRequest(matchPlayerId: string, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/cancel/:matchPlayerId')\n                \n            \n\n                    \n                        \n                            Defined in src/match-player/match-player.controller.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                matchPlayerId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findAllMatchPlayer\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllMatchPlayer()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('/all')\n                \n            \n\n                    \n                        \n                            Defined in src/match-player/match-player.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/match-player/match-player.controller.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        joinMatch\n                        \n                    \n                \n            \n            \n                \n                        \n                    joinMatch(param, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/join/:matchId')\n                \n            \n\n                    \n                        \n                            Defined in src/match-player/match-player.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                param\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        refuseMatchPlayerId\n                        \n                    \n                \n            \n            \n                \n                        \n                    refuseMatchPlayerId(matchPlayerId: string, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/refuse/:matchPlayerId')\n                \n            \n\n                    \n                        \n                            Defined in src/match-player/match-player.controller.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                matchPlayerId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n  Put,\n} from '@nestjs/common';\nimport { MatchPlayerService } from './match-player.service';\nimport { GetCurrentUserId, Public } from 'src/common/decorators';\n\n@Controller('match-player')\nexport class MatchPlayerController {\n  constructor(private readonly matchPlayerService: MatchPlayerService) { }\n\n  @Post('/join/:matchId')\n  joinMatch(@Param() param, @GetCurrentUserId() userId: string) {\n\n    return this.matchPlayerService.joinMatch(param, userId);\n\n  }\n\n  // @Get('/mine')\n  // findMyMatchPlayer(@GetCurrentUserId() userId: string) {\n  //   try {\n  //     return this.matchPlayerService.findMyMatchPlayer(userId.trim());\n  //   } catch (e) {\n  //     console.log(e)\n  //   }\n  // }\n\n  @Public()\n  @Get('/all')\n  findAllMatchPlayer() {\n    return this.matchPlayerService.findAllMatchPlayer();\n  }\n\n\n  @Put(\"/accept/:matchPlayerId\")\n  acceptMatchPlayerId(@Param(\"matchPlayerId\") matchPlayerId: string, @GetCurrentUserId() userId: string) {\n\n    return this.matchPlayerService.acceptePlayerOfMatch(userId, matchPlayerId);\n  }\n\n\n  @Put(\"/refuse/:matchPlayerId\")\n  refuseMatchPlayerId(@Param(\"matchPlayerId\") matchPlayerId: string, @GetCurrentUserId() userId: string) {\n    return this.matchPlayerService.refusePlayerOfMatch(userId, matchPlayerId);\n  }\n\n  @Put(\"/cancel/:matchPlayerId\")\n  cancelRequest(@Param(\"matchPlayerId\") matchPlayerId: string, @GetCurrentUserId() userId: string) {\n    return this.matchPlayerService.cancelRequet(userId, matchPlayerId);\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.matchPlayerService.findJoinedMatchById(id);\n  }\n\n  // @Patch(':id')\n  // update(\n  //   @Param('id') id: string,\n  //   @Body() updateMatchPlayerDto: UpdateMatchPlayerDto,\n  // ) {\n  //   return this.matchPlayerService.update(+id, updateMatchPlayerDto);\n  // }\n\n  // @Delete(':id')\n  // remove(@Param('id') id: string) {\n  //   return this.matchPlayerService.remove(+id);\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MatchPlayerModule.html":{"url":"modules/MatchPlayerModule.html","title":"module - MatchPlayerModule","body":"\n                   \n\n\n\n\n    Modules\n    MatchPlayerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MatchPlayerModule\n\n\n\ncluster_MatchPlayerModule_exports\n\n\n\ncluster_MatchPlayerModule_providers\n\n\n\n\nMatchPlayerService \n\nMatchPlayerService \n\n\n\nMatchPlayerModule\n\nMatchPlayerModule\n\nMatchPlayerService  -->\n\nMatchPlayerModule->MatchPlayerService \n\n\n\n\n\nMatchPlayerService\n\nMatchPlayerService\n\nMatchPlayerModule -->\n\nMatchPlayerService->MatchPlayerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/match-player/match-player.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MatchPlayerService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MatchPlayerController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MatchPlayerService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MatchPlayerService } from './match-player.service';\nimport { MatchPlayerController } from './match-player.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { MatchPlayer, MatchPlayerSchema } from './entities/match-player.entity';\nimport { Match, MatchSchema } from 'src/match/entities/match.entity';\nimport { User, UserSchema } from 'src/user/entities/user.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: MatchPlayer.name, schema: MatchPlayerSchema },\n    ]),\n    MongooseModule.forFeature([\n      { name: Match.name, schema: MatchSchema },\n    ]),\n    MongooseModule.forFeature([\n      { name: User.name, schema: UserSchema },\n    ]),\n  ],\n  controllers: [MatchPlayerController],\n  providers: [MatchPlayerService],\n  exports: [MatchPlayerService],\n})\nexport class MatchPlayerModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MatchPlayerService.html":{"url":"injectables/MatchPlayerService.html","title":"injectable - MatchPlayerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MatchPlayerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/match-player/match-player.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                acceptePlayerOfMatch\n                            \n                            \n                                    Async\n                                cancelRequet\n                            \n                            \n                                    Async\n                                findAllMatchPlayer\n                            \n                            \n                                    Async\n                                findJoinedMatchById\n                            \n                            \n                                    Async\n                                findMyMatchPlayer\n                            \n                            \n                                    Async\n                                joinMatch\n                            \n                            \n                                    Async\n                                refusePlayerOfMatch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(matchPLayerModel: Model, matchModel: Model, userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/match-player/match-player.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        matchPLayerModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        matchModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        acceptePlayerOfMatch\n                        \n                    \n                \n            \n            \n                \n                        \n                    acceptePlayerOfMatch(userId: string, playerOfMatchId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/match-player/match-player.service.ts:110\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                playerOfMatchId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        cancelRequet\n                        \n                    \n                \n            \n            \n                \n                        \n                    cancelRequet(userId: string, playerOfMatchId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/match-player/match-player.service.ts:159\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                playerOfMatchId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllMatchPlayer\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllMatchPlayer()\n                \n            \n\n\n                    \n                        \n                            Defined in src/match-player/match-player.service.ts:99\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findJoinedMatchById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findJoinedMatchById(id: String)\n                \n            \n\n\n                    \n                        \n                            Defined in src/match-player/match-player.service.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            String\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findMyMatchPlayer\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMyMatchPlayer(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/match-player/match-player.service.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        joinMatch\n                        \n                    \n                \n            \n            \n                \n                        \n                    joinMatch(param, userId: string, isAccepted: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/match-player/match-player.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                param\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                isAccepted\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refusePlayerOfMatch\n                        \n                    \n                \n            \n            \n                \n                        \n                    refusePlayerOfMatch(userId: string, playerOfMatchId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/match-player/match-player.service.ts:134\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                playerOfMatchId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Param, Query } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { MatchPlayer } from './entities/match-player.entity';\nimport { isValidObjectId, Model } from 'mongoose';\nimport { Match } from 'src/match/entities/match.entity';\nimport { UserModule } from 'src/user/user.module';\nimport { User } from 'src/user/entities/user.entity';\nimport { MatchPlayerModule } from './match-player.module';\n\n@Injectable()\nexport class MatchPlayerService {\n  constructor(\n    @InjectModel(MatchPlayer.name) private matchPLayerModel: Model,\n    @InjectModel(Match.name) private matchModel: Model,\n    @InjectModel(User.name) private userModel: Model,\n  ) { }\n\n  async joinMatch(param, userId: string, isAccepted: boolean = false) {\n\n    if (!isValidObjectId(param.matchId)) {\n      throw new HttpException(\n        'Key of match not valid',\n        HttpStatus.UNPROCESSABLE_ENTITY,\n      );\n    }\n\n    const isMatchExists = await this.matchModel.findById(param.matchId, \"_id playersOfMatch\").exec();\n\n    if (isMatchExists == null) {\n      throw new HttpException(\n        'Match Not exists',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    const playerAlreadyJoined = await this.matchPLayerModel.findOne({\n      matchId: param.matchId,\n      userId,\n    });\n    if (playerAlreadyJoined) {\n      throw new HttpException(\n        'You have already joined this match',\n        HttpStatus.CONFLICT,\n      );\n    }\n\n\n    const players = isMatchExists.playersOfMatch.length\n\n    if (players == 9)\n      throw new HttpException(\"match full of players\", HttpStatus.BAD_REQUEST)\n\n\n\n    const match = await this.matchPLayerModel.create({\n      matchId: param.matchId,\n      userId,\n      isAccepted,\n    });\n\n\n\n    await this.matchModel.findByIdAndUpdate(param.matchId, {\n      $push: { playersOfMatch: match._id }\n    })\n\n\n    await this.userModel.findByIdAndUpdate(userId, {\n      $push: { jointedMatch: match._id }\n    })\n\n    return await match.populate(\"userId\");\n  }\n\n  async findMyMatchPlayer(userId: string) {\n    const matchPlayer = await this.matchPLayerModel\n      .find({})\n      .populate('matchId')\n      .populate({ path: 'userId', select: 'email name last_name phone' })\n      .exec();\n\n    const myMatchPlayer = matchPlayer.filter(\n      (m) => m.matchId.userId.toString() === userId,\n    );\n    return myMatchPlayer;\n  }\n\n  async findJoinedMatchById(id: String) {\n    try {\n\n      return await this.matchPLayerModel.findById(id, \"-createdAt -updatedAt\")\n        .populate({ path: \"matchId\", select: \"-createdAt -updatedAt\" })\n        .exec();\n    } catch (e) {\n      throw new HttpException(e, HttpStatus.INTERNAL_SERVER_ERROR)\n    }\n  }\n\n  async findAllMatchPlayer() {\n    const matchPlayer = await this.matchPLayerModel\n      .find({})\n\n      .populate('matchId')\n      .populate({ path: 'userId', select: 'email name last_name phone' })\n      .exec();\n\n    return matchPlayer;\n  }\n\n  async acceptePlayerOfMatch(\n    userId: string, playerOfMatchId: string\n  ) {\n\n    // get playerMatchId with match => check if user ownId of match the current user =>  => accepte \n\n    const matchPlayer = await this.matchPLayerModel.findById(playerOfMatchId, \"-createdAt -updatedAt\").populate({ path: \"matchId\", select: \"userId\" })\n    console.log(matchPlayer)\n    if (matchPlayer == null) {\n      throw new HttpException(\"Request not exists\", HttpStatus.BAD_REQUEST)\n    }\n    if (matchPlayer.matchId.userId.toString() != userId) {\n      throw new HttpException(\"Unauthorized request, your are not the owner of the match\", HttpStatus.UNAUTHORIZED)\n    }\n    if (matchPlayer.isAccepted) {\n      throw new HttpException(\"Request already accpeted\", HttpStatus.BAD_REQUEST)\n    }\n\n    matchPlayer.isAccepted = true\n    return await matchPlayer.save()\n\n  }\n\n\n  async refusePlayerOfMatch(\n    userId: string, playerOfMatchId: string\n  ) {\n\n    // get playerMatchId with match => check if user ownId of match the current user =>  => check request not accpeted then delete \n\n    const matchPlayer = await this.matchPLayerModel.findById(playerOfMatchId, \"-createdAt -updatedAt\").populate({ path: \"matchId\", select: \"userId\" })\n    console.log(matchPlayer)\n    if (matchPlayer == null) {\n      throw new HttpException(\"Request Not Found\", HttpStatus.BAD_REQUEST)\n    }\n\n    if (matchPlayer.matchId.userId.toString() != userId) {\n      throw new HttpException(\"Unauthorized request, your are not the owner of the match\", HttpStatus.UNAUTHORIZED)\n    }\n    if (matchPlayer.isAccepted) {\n      throw new HttpException(\"Request already accpeted\", HttpStatus.BAD_REQUEST)\n    }\n\n    return matchPlayer.deleteOne()\n\n  }\n\n\n\n  async cancelRequet(\n    userId: string, playerOfMatchId: string\n  ) {\n\n    // get playerMatchId with match => check if user ownId of match the current user =>  => check request not accpeted then delete \n\n    const matchPlayer = await this.matchPLayerModel.findById(playerOfMatchId, \"-createdAt -updatedAt\");\n\n    if (matchPlayer == null) {\n      throw new HttpException(\"Request Not Found\", HttpStatus.BAD_REQUEST)\n    }\n\n    if (matchPlayer.userId.toString() != userId) {\n      throw new HttpException(\"Unauthorized request, You're not the owner of the request to cancel it\", HttpStatus.UNAUTHORIZED)\n    }\n\n    if (matchPlayer.isAccepted) {\n      throw new HttpException(\"Request already accpeted\", HttpStatus.BAD_REQUEST)\n    }\n\n    // begin the proccess of deletion\n\n    await this.userModel.findByIdAndUpdate(userId, {\n      $pull: { jointedMatch: matchPlayer._id }\n    });\n\n\n\n    await this.matchModel.findByIdAndUpdate(matchPlayer.matchId, {\n      $pull: { playersOfMatch: matchPlayer._id }\n    });\n\n    return matchPlayer.deleteOne()\n\n  }\n\n\n  // findOne(id: number) {\n  //   return `This action returns a #${id} matchPlayer`;\n  // }\n\n  // update(id: number, updateMatchPlayerDto: UpdateMatchPlayerDto) {\n  //   return `This action updates a #${id} matchPlayer`;\n  // }\n\n  // remove(id: number) {\n  //   return `This action removes a #${id} matchPlayer`;\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MatchService.html":{"url":"injectables/MatchService.html","title":"injectable - MatchService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MatchService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/match/match.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createMatch\n                            \n                            \n                                    Async\n                                findAllMatches\n                            \n                            \n                                    Async\n                                findMatchById\n                            \n                            \n                                    Async\n                                findMyMatches\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(matchModel: Model, userModel: Model, terrainModel: Model, matchPlayerService: MatchPlayerService)\n                    \n                \n                        \n                            \n                                Defined in src/match/match.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        matchModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        terrainModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        matchPlayerService\n                                                  \n                                                        \n                                                                        MatchPlayerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createMatch\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMatch(userId: string, createMatchDto: CreateMatchDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/match/match.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createMatchDto\n                                            \n                                                            CreateMatchDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllMatches\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllMatches()\n                \n            \n\n\n                    \n                        \n                            Defined in src/match/match.service.ts:69\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findMatchById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMatchById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/match/match.service.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findMyMatches\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMyMatches(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/match/match.service.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { CreateMatchDto } from './dto/create-match.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Match } from './entities/match.entity';\nimport { Model } from 'mongoose';\nimport { MatchPlayerService } from 'src/match-player/match-player.service';\nimport path from 'path';\nimport { User } from 'src/user/entities/user.entity';\nimport { Terrain } from 'src/terrain/entities/terrain.entity';\n\n@Injectable()\nexport class MatchService {\n  constructor(\n    @InjectModel(Match.name) private matchModel: Model,\n    @InjectModel(User.name) private userModel: Model,\n    @InjectModel(Terrain.name) private terrainModel: Model,\n    private readonly matchPlayerService: MatchPlayerService,\n  ) { }\n\n  async createMatch(userId: string, createMatchDto: CreateMatchDto) {\n\n\n    const requestedDatetime = createMatchDto.date;\n    const requestedDatetimereserved = new Date(requestedDatetime);\n    requestedDatetimereserved.setMinutes(requestedDatetimereserved.getMinutes() + 120); // Add 120 minutes\n\n\n    const reservedMatch = await this.matchModel.find({\n      terrainId: createMatchDto.terrainId,\n      date: {\n        $gte: requestedDatetime,\n        $lte: requestedDatetimereserved,\n      },\n    }).exec();\n\n\n    if (reservedMatch.length != 0) {\n      throw new HttpException(\"Sorry, this terrain reserved in this time\", HttpStatus.BAD_REQUEST)\n    }\n\n\n    const matchCreated = await this.matchModel.create({\n      ...createMatchDto,\n      userId,\n    });\n\n\n    // this.matchPlayerService.joinMatch(  we don't neet this shit (we know the owner)\n    //   { matchId: matchCreated._id },\n    //   userId,\n    //   true,\n    // );\n\n    await this.userModel.findByIdAndUpdate(userId, { $push: { ownMatchs: matchCreated._id } })\n\n    await this.terrainModel.findByIdAndUpdate(createMatchDto.terrainId, { $push: { matchsIn: matchCreated._id } })\n    return await matchCreated\n      .populate([{\n        path: 'playersOfMatch', populate: {\n          path: \"userId\",\n          select: \"name last_name phone id\"\n        }\n      },\n      { path: 'userId', select: 'email name last_name phone' },\n      { path: \"terrainId\" }\n      ]);\n  }\n\n  async findAllMatches() {\n    return await this.matchModel\n      .find()\n      .populate({\n        path: 'playersOfMatch', populate: {\n          path: \"userId\",\n          select: \"name last_name phone id\"\n        }\n      })\n      .populate({ path: 'userId', select: 'email name last_name phone' })\n      .populate('terrainId')\n      .exec();\n  }\n\n  async findMyMatches(id: string) {\n    return await this.matchModel\n      .find({ userId: id })\n      .populate({ path: 'userId', select: 'email name last_name phone' })\n      .populate('terrainId')\n      .exec();\n  }\n\n\n  async findMatchById(id: string) {\n    return await this.matchModel.findById(id).\n      populate(\n        [\n          { path: \"userId\", select: \"email name last_name phone\" },\n          { path: \"terrainId\", select: \"-matchsIn -createdAt -updatedAt -__v\" },\n          { path: \"playersOfMatch\", select: \"-createdAt -updatedAt -__v\", populate: { \"path\": \"userId\", select: \"name\" } },\n        ],\n      ).exec();\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Message.html":{"url":"classes/Message.html","title":"class - Message","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Message\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/message/entities/message.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                content\n                            \n                            \n                                    \n                                matchId\n                            \n                            \n                                    \n                                userId\n                            \n                            \n                                    \n                                userName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         String\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/message/entities/message.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        matchId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Match\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Match'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/message/entities/message.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/message/entities/message.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         String\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/message/entities/message.entity.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { IsDate, IsString } from \"class-validator\";\nimport { timeStamp } from \"console\";\nimport { HydratedDocument, Types } from \"mongoose\";\nimport { Match } from \"src/match/entities/match.entity\";\nimport { User } from \"src/user/entities/user.entity\";\n\nexport type MessageDocuement = HydratedDocument;\n\n@Schema({ timestamps: true })\nexport class Message {\n\n    @Prop()\n    content: String;\n\n    @Prop({ type: Types.ObjectId, ref: 'Match' })\n    matchId: Match\n\n    @Prop({ type: Types.ObjectId, ref: 'User' })\n    userId: User\n\n    @Prop()\n    userName: String\n\n}\n\nexport const MessageSchema = SchemaFactory.createForClass(Message);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MessageController.html":{"url":"controllers/MessageController.html","title":"controller - MessageController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MessageController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/message/message.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                message\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                getMessagesOfMatch\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createMessageDto: CreateMessageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/message/message.controller.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createMessageDto\n                                            \n                                                            CreateMessageDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/message/message.controller.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/message/message.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getMessagesOfMatch\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMessagesOfMatch(idMatch)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('match/:idMatch')\n                \n            \n\n                    \n                        \n                            Defined in src/message/message.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                idMatch\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/message/message.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateMessageDto: UpdateMessageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/message/message.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateMessageDto\n                                            \n                                                            UpdateMessageDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { MessageService } from './message.service';\nimport { CreateMessageDto } from './dto/create-message.dto';\nimport { UpdateMessageDto } from './dto/update-message.dto';\n\n\n@Controller('message')\nexport class MessageController {\n  constructor(private readonly messageService: MessageService) { }\n\n  @Post()\n  create(@Body() createMessageDto: CreateMessageDto) {\n    return this.messageService.create(createMessageDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.messageService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.messageService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateMessageDto: UpdateMessageDto) {\n    return this.messageService.update(+id, updateMessageDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.messageService.remove(+id);\n  }\n\n\n  @Get('match/:idMatch')\n  getMessagesOfMatch(@Param('idMatch') idMatch) {\n    return this.messageService.findMessagesOfMatch(idMatch)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MessageModule.html":{"url":"modules/MessageModule.html","title":"module - MessageModule","body":"\n                   \n\n\n\n\n    Modules\n    MessageModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MessageModule\n\n\n\ncluster_MessageModule_exports\n\n\n\ncluster_MessageModule_providers\n\n\n\n\nMessageService \n\nMessageService \n\n\n\nMessageModule\n\nMessageModule\n\nMessageService  -->\n\nMessageModule->MessageService \n\n\n\n\n\nMessageService\n\nMessageService\n\nMessageModule -->\n\nMessageService->MessageModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/message/message.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MessageService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MessageController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MessageService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MessageService } from './message.service';\nimport { MessageController } from './message.controller';\nimport { Message, MessageSchema } from './entities/message.entity';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Message.name, schema: MessageSchema }]),\n  ],\n  controllers: [MessageController],\n  providers: [MessageService],\n  exports: [MessageService]\n})\nexport class MessageModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MessageService.html":{"url":"injectables/MessageService.html","title":"injectable - MessageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MessageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/message/message.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findMessagesOfMatch\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(messageModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/message/message.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        messageModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createMessageDto: CreateMessageDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/message/message.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createMessageDto\n                                            \n                                                            CreateMessageDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/message/message.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findMessagesOfMatch\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMessagesOfMatch(matchId: String)\n                \n            \n\n\n                    \n                        \n                            Defined in src/message/message.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                matchId\n                                            \n                                                            String\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/message/message.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/message/message.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateMessageDto: UpdateMessageDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/message/message.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateMessageDto\n                                            \n                                                            UpdateMessageDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateMessageDto } from './dto/create-message.dto';\nimport { UpdateMessageDto } from './dto/update-message.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Message } from './entities/message.entity';\nimport { Model } from 'mongoose';\n\n@Injectable()\nexport class MessageService {\n\n  constructor(\n    @InjectModel(Message.name)\n    private messageModel: Model\n  ) { }\n\n  async create(createMessageDto: CreateMessageDto) {\n    // what ugly syntax bro LOL:w\n    return await this.messageModel.create({\n      userId: createMessageDto.senderId,\n      matchId: createMessageDto.matchId,\n      content: createMessageDto.content,\n      userName: createMessageDto.senderName\n    });\n  }\n\n  findAll() {\n    return `This action returns all message`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} message`;\n  }\n\n  async findMessagesOfMatch(matchId: String) {\n    return await this.messageModel.find({ matchId: matchId }, \"userId content createdAt\").populate({ path: 'userId', select: '_id name' });\n\n  }\n\n\n  update(id: number, updateMessageDto: UpdateMessageDto) {\n    return `This action updates a #${id} message`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} message`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RtGuard.html":{"url":"classes/RtGuard.html","title":"class - RtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/guards/rt.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt-refresh')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/rt.guard.ts:3\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AuthGuard } from '@nestjs/passport';\n\nexport class RtGuard extends AuthGuard('jwt-refresh') {\n  constructor() {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RtStrategy.html":{"url":"injectables/RtStrategy.html","title":"injectable - RtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/rt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'jwt-refresh')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/rt.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(req: Request, payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/rt.strategy.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { Request } from 'express';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class RtStrategy extends PassportStrategy(Strategy, 'jwt-refresh') {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: 'rt-secret',\n      passReqToCallback: true,\n    });\n  }\n\n  async validate(req: Request, payload: any) {\n    const refreshToken = req.get('authorization').replace('Bearer', '').trim();\n    return {\n      ...payload,\n      refreshToken,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendMailDto.html":{"url":"classes/SendMailDto.html","title":"class - SendMailDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendMailDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mailer/dto/send-mail.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                subject\n                            \n                            \n                                text\n                            \n                            \n                                to\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        subject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/mailer/dto/send-mail.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/mailer/dto/send-mail.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        to\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/mailer/dto/send-mail.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class SendMailDto {\n  to: string;\n  subject: string;\n  text: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignupDto.html":{"url":"classes/SignupDto.html","title":"class - SignupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/signup.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                    \n                                    \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/signup.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/signup.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/signup.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@MinLength(8)@MaxLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/signup.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@IsEnum(Role)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/signup.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsEnum,\n  IsNotEmpty,\n  IsString,\n  MinLength,\n} from '@nestjs/class-validator';\nimport { IsOptional, Max, MaxLength, Min } from 'class-validator';\nimport { Role } from 'src/enums/role.enum';\n\nexport class SignupDto {\n  @IsEmail()\n  @IsString()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(6)\n  password: string;\n\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @IsOptional()\n  @MinLength(8)\n  @MaxLength(8)\n  phone?: string;\n\n  @IsString()\n  @IsOptional()\n  @IsEnum(Role)\n  role: Role;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Terrain.html":{"url":"classes/Terrain.html","title":"class - Terrain","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Terrain\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/terrain/entities/terrain.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                date\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                height\n                            \n                            \n                                    \n                                label\n                            \n                            \n                                    \n                                latitude\n                            \n                            \n                                    \n                                longitude\n                            \n                            \n                                    \n                                managerId\n                            \n                            \n                                    \n                                matchsIn\n                            \n                            \n                                    \n                                price\n                            \n                            \n                                    \n                                width\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/terrain/entities/terrain.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Default value : new Date()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Date, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/terrain/entities/terrain.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/terrain/entities/terrain.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        height\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Number, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/terrain/entities/terrain.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/terrain/entities/terrain.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        latitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/terrain/entities/terrain.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        longitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/terrain/entities/terrain.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        managerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'User', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/terrain/entities/terrain.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        matchsIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Match'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/terrain/entities/terrain.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Number, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/terrain/entities/terrain.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        width\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Number, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/terrain/entities/terrain.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument, Types } from 'mongoose';\n\nexport type TerrainDocument = HydratedDocument;\n\n@Schema({ timestamps: true })\nexport class Terrain {\n  @Prop({ type: Date, required: true })\n  date: Date = new Date();\n\n  @Prop({ required: true })\n  label: string;\n\n  @Prop({})\n  description: string;\n\n  @Prop({ type: Number, required: true })\n  width: number;\n\n  @Prop({ type: Number, required: true })\n  height: number;\n\n  @Prop({ type: String, required: true })\n  address: string\n\n  @Prop({ type: Number, required: true })\n  price: number;\n\n  @Prop({ required: true })\n  longitude: string;\n\n  @Prop({ required: true })\n  latitude: string;\n\n  @Prop({ type: Types.ObjectId, ref: 'User', required: true })\n  managerId: Types.ObjectId;\n\n\n  @Prop({ type: [Types.ObjectId], ref: 'Match' })\n  matchsIn: Types.ObjectId[]\n}\n\nexport const TerrainSchema = SchemaFactory.createForClass(Terrain);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TerrainController.html":{"url":"controllers/TerrainController.html","title":"controller - TerrainController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TerrainController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/terrain/terrain.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                terrain\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                getMatchsOfTerrain\n                            \n                            \n                                    \n                                getStatisticsOfManagerToDay\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTerrainDto: CreateTerrainDto, user)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/terrain/terrain.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTerrainDto\n                                            \n                                                            CreateTerrainDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get()\n                \n            \n\n                    \n                        \n                            Defined in src/terrain/terrain.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/mine')\n                \n            \n\n                    \n                        \n                            Defined in src/terrain/terrain.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getMatchsOfTerrain\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMatchsOfTerrain(terrainId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('/matchs/:terrainId')\n                \n            \n\n                    \n                        \n                            Defined in src/terrain/terrain.controller.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                terrainId\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getStatisticsOfManagerToDay\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStatisticsOfManagerToDay(user)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/statistics')\n                \n            \n\n                    \n                        \n                            Defined in src/terrain/terrain.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { TerrainService } from './terrain.service';\nimport { CreateTerrainDto } from './dto/create-terrain.dto';\nimport { UpdateTerrainDto } from './dto/update-terrain.dto';\nimport { GetCurrentUser, GetCurrentUserId, Public } from 'src/common/decorators';\n\n@Controller('terrain')\nexport class TerrainController {\n  constructor(private readonly terrainService: TerrainService) { }\n\n  @Post()\n  create(@Body() createTerrainDto: CreateTerrainDto, @GetCurrentUser() user) {\n    return this.terrainService.create(createTerrainDto, user);\n  }\n\n\n  @Public()\n  @Get()\n  findAll() {\n    return this.terrainService.findAll();\n  }\n\n  @Get('/mine')\n  findOne(@GetCurrentUserId() id: string) {\n    return this.terrainService.getMyTerrain(id);\n  }\n\n\n  @Get('/statistics')\n  getStatisticsOfManagerToDay(@GetCurrentUser() user) {\n    return this.terrainService.getStatistics(user)\n  }\n\n\n  @Public()\n  @Get('/matchs/:terrainId')\n  getMatchsOfTerrain(@Param('terrainId') terrainId) {\n    return this.terrainService.getMatchsOfTerrain(terrainId)\n  }\n\n\n\n  // @Patch(':id')\n  // update(@Param('id') id: string, @Body() updateTerrainDto: UpdateTerrainDto) {\n  //   return this.terrainService.update(+id, updateTerrainDto);\n  // }\n\n  // @Delete(':id')\n  // remove(@Param('id') id: string) {\n  //   return this.terrainService.remove(+id);\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TerrainModule.html":{"url":"modules/TerrainModule.html","title":"module - TerrainModule","body":"\n                   \n\n\n\n\n    Modules\n    TerrainModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TerrainModule\n\n\n\ncluster_TerrainModule_providers\n\n\n\n\nTerrainService\n\nTerrainService\n\n\n\nTerrainModule\n\nTerrainModule\n\nTerrainModule -->\n\nTerrainService->TerrainModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/terrain/terrain.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TerrainService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TerrainController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TerrainService } from './terrain.service';\nimport { TerrainController } from './terrain.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Terrain, TerrainSchema } from './entities/terrain.entity';\nimport { Match, MatchSchema } from 'src/match/entities/match.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Terrain.name, schema: TerrainSchema }]),\n    MongooseModule.forFeature([{ name: Match.name, schema: MatchSchema }]),\n  ],\n  controllers: [TerrainController],\n  providers: [TerrainService],\n})\nexport class TerrainModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TerrainService.html":{"url":"injectables/TerrainService.html","title":"injectable - TerrainService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TerrainService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/terrain/terrain.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                getMatchsOfTerrain\n                            \n                            \n                                    Async\n                                getMyTerrain\n                            \n                            \n                                    Async\n                                getStatistics\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(terrainModel: Model, matchModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/terrain/terrain.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        terrainModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        matchModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTerrainDto: CreateTerrainDto, user)\n                \n            \n\n\n                    \n                        \n                            Defined in src/terrain/terrain.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTerrainDto\n                                            \n                                                            CreateTerrainDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/terrain/terrain.service.ts:74\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getMatchsOfTerrain\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMatchsOfTerrain(terrainId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/terrain/terrain.service.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                terrainId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getMyTerrain\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMyTerrain(managerId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/terrain/terrain.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                managerId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getStatistics\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStatistics(user)\n                \n            \n\n\n                    \n                        \n                            Defined in src/terrain/terrain.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { CreateTerrainDto } from './dto/create-terrain.dto';\nimport { UpdateTerrainDto } from './dto/update-terrain.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Terrain } from './entities/terrain.entity';\nimport { Model } from 'mongoose';\nimport { Match } from 'src/match/entities/match.entity';\nimport { ModuleLinker } from 'vm';\nimport path from 'path';\n\n@Injectable()\nexport class TerrainService {\n  constructor(\n    @InjectModel(Terrain.name) private terrainModel: Model,\n    @InjectModel(Match.name) private matchModel: Model\n  ) { }\n\n  async create(createTerrainDto: CreateTerrainDto, user) {\n    if (user.role !== 'manager') {\n      throw new HttpException(\n        'You are not allowed to create a terrain , you must be a manager',\n        HttpStatus.FORBIDDEN,\n      );\n    }\n    const existingTerrain = await this.terrainModel.findOne({\n      managerId: user.sub,\n    });\n    if (existingTerrain) {\n      throw new HttpException(\n        'You are not allowed to create a terrain , you already have one',\n        HttpStatus.FORBIDDEN,\n      );\n    }\n    try {\n\n      return await this.terrainModel.create({\n        ...createTerrainDto,\n        managerId: user.sub,\n      });\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n\n  async getStatistics(user) {\n\n    if (user.role !== 'manager') {\n      throw new HttpException(\n        'Not Allowed to see statistics you dont have :)',\n        HttpStatus.FORBIDDEN,\n      );\n    }\n\n    console.log(user)\n    const terrain = await this.terrainModel.findOne({ managerId: user.sub })\n\n    if (terrain == null) {\n      return {\n        'countMatchs': 0,\n        'amount': 0,\n      }\n    }\n\n    const allMatchesCount = await this.matchModel.countDocuments({ terrainId: terrain.id })\n\n    return {\n      'countMatchs': allMatchesCount,\n      'amout': allMatchesCount * terrain.price,\n    }\n\n  }\n\n  async findAll() {\n    return await this.terrainModel.find();\n  }\n\n  async getMyTerrain(managerId: string) {\n    return await this.terrainModel.findOne({ managerId })\n  }\n\n\n  async getMatchsOfTerrain(terrainId: string) {\n    return await this.terrainModel.findById(terrainId.trim(), { matchsIn: true }).populate({ path: \"matchsIn\" }).exec();\n  }\n\n  // update(id: number, updateTerrainDto: UpdateTerrainDto) {\n  //   return `This action updates a #${id} terrain`;\n  // }\n\n  // remove(id: number) {\n  //   return `This action removes a #${id} terrain`;\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TokenService.html":{"url":"injectables/TokenService.html","title":"injectable - TokenService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TokenService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/token.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                clearRtHash\n                            \n                            \n                                    Async\n                                generateTokens\n                            \n                            \n                                    Async\n                                updateRtHash\n                            \n                            \n                                    Async\n                                verifyRefreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/auth/token.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        clearRtHash\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearRtHash(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/token.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateTokens(userId: string, email: string, role: Role)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/token.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                role\n                                            \n                                                            Role\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateRtHash\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateRtHash(userId: string, refreshToken: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/token.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyRefreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyRefreshToken(hashRt: string, refreshToken: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/token.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                hashRt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ForbiddenException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport * as argon2 from 'argon2';\nimport { Role } from '../enums/role.enum';\nimport { Tokens } from './types';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { User } from 'src/user/entities/user.entity';\nimport { Model } from 'mongoose';\n\n@Injectable()\nexport class TokenService {\n  constructor(\n    private readonly jwtService: JwtService,\n    @InjectModel(User.name) private userModel: Model,\n  ) { }\n\n  async generateTokens(\n    userId: string,\n    email: string,\n    role: Role,\n  ): Promise {\n    const [accessToken, refreshToken] = await Promise.all([\n      this.jwtService.signAsync(\n        { sub: userId, email, role },\n        { secret: process.env.AT_SECRET, expiresIn: '1h' },\n      ),\n      this.jwtService.signAsync(\n        { sub: userId, email, role },\n        { secret: 'rt-secret', expiresIn: '7d' },\n      ),\n    ]);\n    return { access_token: accessToken, refresh_token: refreshToken };\n  }\n\n  async updateRtHash(userId: string, refreshToken: string): Promise {\n    const hashedRt = await argon2.hash(refreshToken);\n    await this.userModel.updateOne({ _id: userId }, { hashRt: hashedRt });\n  }\n\n  async clearRtHash(userId: string): Promise {\n    await this.userModel.updateOne({ _id: userId }, { hashRt: null });\n  }\n\n  async verifyRefreshToken(\n    hashRt: string,\n    refreshToken: string,\n  ): Promise {\n    const isMatch = await argon2.verify(hashRt, refreshToken);\n    if (!isMatch) throw new ForbiddenException('Access Denied');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMatchDto.html":{"url":"classes/UpdateMatchDto.html","title":"class - UpdateMatchDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMatchDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/match/dto/update-match.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateMatchDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateMatchDto } from './create-match.dto';\n\nexport class UpdateMatchDto extends PartialType(CreateMatchDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMatchPlayerDto.html":{"url":"classes/UpdateMatchPlayerDto.html","title":"class - UpdateMatchPlayerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMatchPlayerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/match-player/dto/update-match-player.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateMatchPlayerDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateMatchPlayerDto } from './create-match-player.dto';\n\nexport class UpdateMatchPlayerDto extends PartialType(CreateMatchPlayerDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMessageDto.html":{"url":"classes/UpdateMessageDto.html","title":"class - UpdateMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/message/dto/update-message.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateMessageDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateMessageDto } from './create-message.dto';\n\nexport class UpdateMessageDto extends PartialType(CreateMessageDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTerrainDto.html":{"url":"classes/UpdateTerrainDto.html","title":"class - UpdateTerrainDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTerrainDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/terrain/dto/update-terrain.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateTerrainDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateTerrainDto } from './create-terrain.dto';\n\nexport class UpdateTerrainDto extends PartialType(CreateTerrainDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                last_name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        last_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/update-user.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/update-user.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Length(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/update-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsNumber,\n  IsOptional,\n  IsString,\n  Length,\n  Max,\n  Min,\n} from '@nestjs/class-validator';\n\nexport class UpdateUserDto {\n  @IsOptional()\n  @IsString()\n  name?: string;\n\n  @IsOptional()\n  @IsString()\n  last_name?: string;\n\n  @IsOptional()\n  @Length(8)\n  phone?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                active\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                hashRt\n                            \n                            \n                                    \n                                jointedMatch\n                            \n                            \n                                    \n                                last_name\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                otp\n                            \n                            \n                                    \n                                otpExpiry\n                            \n                            \n                                    \n                                ownMatchs\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                phone\n                            \n                            \n                                    \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        hashRt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        jointedMatch\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'MatchPlayer', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        last_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        otp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        otpExpiry\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        ownMatchs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Match', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument, Types } from 'mongoose';\nimport { Role } from 'src/enums/role.enum';\n\nexport type UserDocument = HydratedDocument;\n\n@Schema()\nexport class User {\n  @Prop()\n  email: string;\n\n  @Prop()\n  password: string;\n\n  @Prop()\n  hashRt: string;\n\n  @Prop({ default: false })\n  active: boolean;\n  @Prop()\n  otp: string;\n\n  @Prop()\n  otpExpiry: Date;\n  @Prop()\n  role: Role;\n\n  @Prop()\n  name: string;\n\n  @Prop()\n  last_name: string;\n\n  @Prop()\n  phone: string;\n\n\n  @Prop({ type: [Types.ObjectId], ref: 'Match', required: true })\n  ownMatchs: Types.ObjectId[]\n\n  @Prop({ type: [Types.ObjectId], ref: 'MatchPlayer', required: true })\n  jointedMatch: Types.ObjectId[]\n\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deleteProfile\n                            \n                            \n                                    \n                                editProfile\n                            \n                            \n                                    \n                                getCurrentUser\n                            \n                            \n                                    \n                                getOwnMatchs\n                            \n                            \n                                    \n                                jointedMatches\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteProfile(sub: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sub\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        editProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    editProfile(sub: string, userData: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sub\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userData\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getCurrentUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCurrentUser(sub: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sub\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getOwnMatchs\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOwnMatchs(sub: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/matches')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sub\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        jointedMatches\n                        \n                    \n                \n            \n            \n                \n                        \n                    jointedMatches(sub: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/match/joined')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sub\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Body, Param, Delete, Put, Get } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { GetCurrentUserId } from 'src/common/decorators';\nimport { log } from 'console';\n\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) { }\n\n  @Put()\n  editProfile(\n    @GetCurrentUserId() sub: string,\n    @Body() userData: UpdateUserDto,\n  ) {\n    return this.userService.editProfile(sub, userData);\n  }\n\n  @Delete()\n  deleteProfile(@GetCurrentUserId() sub: string) {\n    return this.userService.deleteProfile(sub);\n  }\n\n\n  @Get()\n  getCurrentUser(@GetCurrentUserId() sub: string) {\n    try {\n      console.log(\"method executed with\", sub)\n      return this.userService.currentUser(sub)\n    } catch (e) {\n\n    }\n  }\n\n\n  @Get('/matches')\n  getOwnMatchs(@GetCurrentUserId() sub: string) {\n    return this.userService.getOwnMatchs(sub)\n  }\n\n\n  @Get(\"/match/joined\")\n  jointedMatches(@GetCurrentUserId() sub: string) {\n    return this.userService.getJointedMatches(sub)\n  }\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from './entities/user.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n  ],\n  controllers: [UserController],\n  providers: [UserService],\n  exports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n    UserService\n  ],\n})\nexport class UserModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                currentUser\n                            \n                            \n                                    Async\n                                deleteProfile\n                            \n                            \n                                    Async\n                                editProfile\n                            \n                            \n                                    Async\n                                getJointedMatches\n                            \n                            \n                                    Async\n                                getOwnMatchs\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        currentUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    currentUser(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteProfile(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        editProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    editProfile(id: string, userData: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userData\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getJointedMatches\n                        \n                    \n                \n            \n            \n                \n                        \n                    getJointedMatches(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getOwnMatchs\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOwnMatchs(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { User } from './entities/user.entity';\nimport { Model } from 'mongoose';\nimport path from 'path';\nimport { log } from 'console';\n\n@Injectable()\nexport class UserService {\n\n  constructor(@InjectModel(User.name) private userModel: Model) { }\n\n  async editProfile(id: string, userData: UpdateUserDto) {\n    return await this.userModel\n      .findByIdAndUpdate(id, userData, { new: true })\n      .select('-password -hashRt')\n      .lean();\n  }\n\n  async deleteProfile(id: string) {\n    return await this.userModel.findByIdAndDelete(id);\n  }\n\n  async currentUser(id: string) {\n    return await this.userModel.findById(id)\n  }\n\n  async getOwnMatchs(id: string) {\n    return await this.userModel.findById(id, \"ownMatchs\")\n      .populate({\n        path: \"ownMatchs\", select: \"-createdAt -updatedAt\",\n        populate: [\n          { path: \"terrainId\", select: \"-matchsIn -managerId -createdAt -updatedAt\" },\n          {\n            path: \"playersOfMatch\", select: \"isAccepted userId\", populate:\n              { path: \"userId\", select: \"name phone email\" }\n          }\n        ]\n      })\n      .exec();\n  }\n\n\n  async getJointedMatches(id: string) {\n    return await this.userModel.findById(id, \"jointedMatch\").populate({ path: \"jointedMatch\", select: \"-createdAt -updatedAt\", populate: { path: \"matchId\", select: \"-createdAt -updatedAt\" } }).exec();\n  }\n\n  // async getJointedMatche(idJointedMatch: string) {\n  //   return await this..findById(id, \"jointedMatch\").\n  // }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/signup.dto.ts\n            \n            class\n            SignupDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/strategies/at.strategy.ts\n            \n            injectable\n            AtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/rt.strategy.ts\n            \n            injectable\n            RtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/token.service.ts\n            \n            injectable\n            TokenService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/auth/types/JwtPayloadWithRt.type.ts\n            \n            type alias\n            JwtPayloadWithRt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/types/jwtPayload.type.ts\n            \n            type alias\n            JwtPayload\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/types/tokens.type.ts\n            \n            type alias\n            Tokens\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorators/get-current-user-id.decorator.ts\n            \n            variable\n            GetCurrentUserId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorators/get-current-user.decorator.ts\n            \n            variable\n            GetCurrentUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/guards/at.guard.ts\n            \n            injectable\n            AtGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/guards/rt.guard.ts\n            \n            class\n            RtGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/events/events.gateway.ts\n            \n            class\n            EventsGateway\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/events/events.gateway.ts\n            \n            type alias\n            WebSocketPayloadType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/gemini/dto/gemini-message.dto.ts\n            \n            class\n            GeminiMessageDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/gemini/gemini.config.ts\n            \n            variable\n            GEMINI_MODEL_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/gemini/gemini.config.ts\n            \n            variable\n            GENERATION_CONFIG\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/gemini/gemini.config.ts\n            \n            variable\n            SYSTEM_INSTRACTION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/gemini/gemini.controller.ts\n            \n            controller\n            GeminiController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/gemini/gemini.provider.ts\n            \n            variable\n            GeminiProModelProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/gemini/gemini.service.ts\n            \n            injectable\n            GeminiService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/gemini/gemini.service.ts\n            \n            type alias\n            Session\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/interceptors/all-exceptions.filter.ts\n            \n            class\n            AllExceptionsFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/interceptors/custom-response.interceptor.ts\n            \n            injectable\n            CustomResponseInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/interfaces/api-response.interface.ts\n            \n            interface\n            ApiResponse\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/mailer/dto/send-mail.dto.ts\n            \n            class\n            SendMailDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/mailer/mailer.controller.ts\n            \n            controller\n            MailerController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/mailer/mailer.service.ts\n            \n            injectable\n            MailerService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/match-player/dto/create-match-player.dto.ts\n            \n            class\n            CreateMatchPlayerDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/match-player/dto/update-match-player.dto.ts\n            \n            class\n            UpdateMatchPlayerDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/match-player/entities/match-player.entity.ts\n            \n            class\n            MatchPlayer\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/match-player/entities/match-player.entity.ts\n            \n            variable\n            MatchPlayerSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/match-player/entities/match-player.entity.ts\n            \n            type alias\n            MatchPlayerDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/match-player/match-player.controller.ts\n            \n            controller\n            MatchPlayerController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/match-player/match-player.service.ts\n            \n            injectable\n            MatchPlayerService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/match/dto/create-match.dto.ts\n            \n            class\n            CreateMatchDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/match/dto/update-match.dto.ts\n            \n            class\n            UpdateMatchDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/match/entities/match.entity.ts\n            \n            class\n            Match\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/match/entities/match.entity.ts\n            \n            variable\n            MatchSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/match/entities/match.entity.ts\n            \n            type alias\n            MatchDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/match/match.controller.ts\n            \n            controller\n            MatchController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/match/match.service.ts\n            \n            injectable\n            MatchService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/message/dto/create-message.dto.ts\n            \n            class\n            CreateMessageDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/message/dto/create-message.dto.ts\n            \n            type alias\n            MessageStructure\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/message/dto/update-message.dto.ts\n            \n            class\n            UpdateMessageDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/message/entities/message.entity.ts\n            \n            class\n            Message\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/message/entities/message.entity.ts\n            \n            variable\n            MessageSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/message/entities/message.entity.ts\n            \n            type alias\n            MessageDocuement\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/message/message.controller.ts\n            \n            controller\n            MessageController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/message/message.service.ts\n            \n            injectable\n            MessageService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/terrain/dto/create-terrain.dto.ts\n            \n            class\n            CreateTerrainDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/terrain/dto/update-terrain.dto.ts\n            \n            class\n            UpdateTerrainDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/terrain/entities/terrain.entity.ts\n            \n            class\n            Terrain\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                        src/terrain/entities/terrain.entity.ts\n            \n            variable\n            TerrainSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/terrain/entities/terrain.entity.ts\n            \n            type alias\n            TerrainDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/terrain/terrain.controller.ts\n            \n            controller\n            TerrainController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/terrain/terrain.service.ts\n            \n            injectable\n            TerrainService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                        src/user/entities/user.entity.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/user/entities/user.entity.ts\n            \n            type alias\n            UserDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/7)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @google/generative-ai : 0.21.0\n        \n            @nestjs-modules/mailer : ^2.0.2\n        \n            @nestjs/class-validator : ^0.13.1\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.3.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/mongoose : ^10.1.0\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/platform-socket.io : ^10.4.13\n        \n            @nestjs/websockets : ^10.4.13\n        \n            argon2 : ^0.41.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            mongoose : ^8.8.0\n        \n            nodemailer : ^6.9.16\n        \n            otplib : ^12.0.1\n        \n            passport-jwt : ^4.0.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Role   (src/.../role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/enums/role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n                        \n                            \n                                 MANAGER\n                            \n                        \n                        \n                            \n                                Value : manager\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\nfull-nest-parti\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EventsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GeminiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MatchModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MatchPlayerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MessageModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TerrainModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_GeminiModule\n\n\n\ncluster_GeminiModule_providers\n\n\n\ncluster_MailerModule\n\n\n\ncluster_MailerModule_exports\n\n\n\ncluster_MailerModule_providers\n\n\n\ncluster_MatchModule\n\n\n\ncluster_MatchModule_exports\n\n\n\ncluster_MatchModule_providers\n\n\n\ncluster_MatchPlayerModule\n\n\n\ncluster_MatchPlayerModule_exports\n\n\n\ncluster_MatchPlayerModule_providers\n\n\n\ncluster_MessageModule\n\n\n\ncluster_MessageModule_exports\n\n\n\ncluster_MessageModule_providers\n\n\n\ncluster_TerrainModule\n\n\n\ncluster_TerrainModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nEventsModule\n\nEventsModule\n\nAppModule -->\n\nEventsModule->AppModule\n\n\n\n\n\nGeminiModule\n\nGeminiModule\n\nAppModule -->\n\nGeminiModule->AppModule\n\n\n\n\n\nMailerModule\n\nMailerModule\n\nAuthModule -->\n\nMailerModule->AuthModule\n\n\n\nAppModule -->\n\nMailerModule->AppModule\n\n\n\n\n\nMailerService \n\nMailerService \n\nMailerService  -->\n\nMailerModule->MailerService \n\n\n\n\n\nMatchModule\n\nMatchModule\n\nEventsModule -->\n\nMatchModule->EventsModule\n\n\n\nAppModule -->\n\nMatchModule->AppModule\n\n\n\n\n\nMatchService \n\nMatchService \n\nMatchService  -->\n\nMatchModule->MatchService \n\n\n\n\n\nMatchPlayerModule\n\nMatchPlayerModule\n\nMatchModule -->\n\nMatchPlayerModule->MatchModule\n\n\n\nAppModule -->\n\nMatchPlayerModule->AppModule\n\n\n\n\n\nMatchPlayerService \n\nMatchPlayerService \n\nMatchPlayerService  -->\n\nMatchPlayerModule->MatchPlayerService \n\n\n\n\n\nMessageModule\n\nMessageModule\n\nEventsModule -->\n\nMessageModule->EventsModule\n\n\n\nAppModule -->\n\nMessageModule->AppModule\n\n\n\n\n\nMessageService \n\nMessageService \n\nMessageService  -->\n\nMessageModule->MessageService \n\n\n\n\n\nTerrainModule\n\nTerrainModule\n\nAppModule -->\n\nTerrainModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nEventsModule -->\n\nUserModule->EventsModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAtStrategy\n\nAtStrategy\n\nAuthModule -->\n\nAtStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRtStrategy\n\nRtStrategy\n\nAuthModule -->\n\nRtStrategy->AuthModule\n\n\n\n\n\nTokenService\n\nTokenService\n\nAuthModule -->\n\nTokenService->AuthModule\n\n\n\n\n\nGeminiService\n\nGeminiService\n\nGeminiModule -->\n\nGeminiService->GeminiModule\n\n\n\n\n\nMailerService\n\nMailerService\n\nMailerModule -->\n\nMailerService->MailerModule\n\n\n\n\n\nMatchService\n\nMatchService\n\nMatchModule -->\n\nMatchService->MatchModule\n\n\n\n\n\nMatchPlayerService\n\nMatchPlayerService\n\nMatchPlayerModule -->\n\nMatchPlayerService->MatchPlayerModule\n\n\n\n\n\nMessageService\n\nMessageService\n\nMessageModule -->\n\nMessageService->MessageModule\n\n\n\n\n\nTerrainService\n\nTerrainService\n\nTerrainModule -->\n\nTerrainService->TerrainModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        10 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    8 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    13 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    21 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            JwtPayload   (src/.../jwtPayload.type.ts)\n                        \n                        \n                            JwtPayloadWithRt   (src/.../JwtPayloadWithRt.type.ts)\n                        \n                        \n                            MatchDocument   (src/.../match.entity.ts)\n                        \n                        \n                            MatchPlayerDocument   (src/.../match-player.entity.ts)\n                        \n                        \n                            MessageDocuement   (src/.../message.entity.ts)\n                        \n                        \n                            MessageStructure   (src/.../create-message.dto.ts)\n                        \n                        \n                            Session   (src/.../gemini.service.ts)\n                        \n                        \n                            TerrainDocument   (src/.../terrain.entity.ts)\n                        \n                        \n                            Tokens   (src/.../tokens.type.ts)\n                        \n                        \n                            UserDocument   (src/.../user.entity.ts)\n                        \n                        \n                            WebSocketPayloadType   (src/.../events.gateway.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/types/jwtPayload.type.ts\n    \n    \n        \n            \n                \n                    \n                    JwtPayload\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/auth/types/JwtPayloadWithRt.type.ts\n    \n    \n        \n            \n                \n                    \n                    JwtPayloadWithRt\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/match/entities/match.entity.ts\n    \n    \n        \n            \n                \n                    \n                    MatchDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/match-player/entities/match-player.entity.ts\n    \n    \n        \n            \n                \n                    \n                    MatchPlayerDocument\n                \n            \n            \n                \n                        HydratedDocument\n\n                \n            \n        \n    \n    src/message/entities/message.entity.ts\n    \n    \n        \n            \n                \n                    \n                    MessageDocuement\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/message/dto/create-message.dto.ts\n    \n    \n        \n            \n                \n                    \n                    MessageStructure\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/gemini/gemini.service.ts\n    \n    \n        \n            \n                \n                    \n                    Session\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/terrain/entities/terrain.entity.ts\n    \n    \n        \n            \n                \n                    \n                    TerrainDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/auth/types/tokens.type.ts\n    \n    \n        \n            \n                \n                    \n                    Tokens\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/user/entities/user.entity.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/events/events.gateway.ts\n    \n    \n        \n            \n                \n                    \n                    WebSocketPayloadType\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GEMINI_MODEL_NAME   (src/.../gemini.config.ts)\n                        \n                        \n                            GeminiProModelProvider   (src/.../gemini.provider.ts)\n                        \n                        \n                            GENERATION_CONFIG   (src/.../gemini.config.ts)\n                        \n                        \n                            GetCurrentUser   (src/.../get-current-user.decorator.ts)\n                        \n                        \n                            GetCurrentUserId   (src/.../get-current-user-id.decorator.ts)\n                        \n                        \n                            MatchPlayerSchema   (src/.../match-player.entity.ts)\n                        \n                        \n                            MatchSchema   (src/.../match.entity.ts)\n                        \n                        \n                            MessageSchema   (src/.../message.entity.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            SYSTEM_INSTRACTION   (src/.../gemini.config.ts)\n                        \n                        \n                            TerrainSchema   (src/.../terrain.entity.ts)\n                        \n                        \n                            UserSchema   (src/.../user.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/gemini/gemini.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GEMINI_MODEL_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'GEMINI_MODEL_NAME_USED'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GENERATION_CONFIG\n                        \n                    \n                \n            \n                \n                    \n                        Type :     GenerationConfig\n\n                    \n                \n                \n                    \n                        Default value : { maxOutputTokens: 256, temperature: 0.7, topK: 32, topP: 1 }\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SYSTEM_INSTRACTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    role: 'system',\n    parts: [\n        {\n            text: `you are stewie griffen\n            'Takwira app' assistance\n            you'll deal with terrain (soccerfield) owners,\n            those owners have soccerfiled and you have to analyse the there data provided in the session,\n            to give them a good respones like there matches count and profits for example,\n            don't montion the 'data' in it's format json | array what ever at all just,\n            the profits is the price of the terrain mention it as join price * (players of match + the creator) in match and do not mention the whole opration\n            we need a analyse based on the data,\n            but act like human,\n            be serous,\n            you are allowed to give emails and names of players\n            in the data all prices with dollar,\n            dimentions in meter, don't montion the location cordinate,\n            if information isn't provided just say sorry I can't help you with this information,\n            don't mention same things like based on provided information and so on.`\n        }\n    ]\n}\n                    \n                \n\n\n        \n    \n\n    src/gemini/gemini.provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GeminiProModelProvider\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Provider\n\n                    \n                \n                \n                    \n                        Default value : {\n    provide: GEMINI_MODEL_NAME,\n    useFactory: () => {\n        const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);\n        return genAI.getGenerativeModel({\n            model: process.env.GEMINI_MODEL_NAME,\n            generationConfig: GENERATION_CONFIG,\n            systemInstruction: SYSTEM_INSTRACTION\n        });\n    },\n}\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/get-current-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetCurrentUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: keyof JwtPayloadWithRt | undefined, context: ExecutionContext) => {\n    const request = context.switchToHttp().getRequest();\n    if (!data) return request.user;\n    return request.user[data];\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/get-current-user-id.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetCurrentUserId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (_: undefined, context: ExecutionContext): string => {\n    const request = context.switchToHttp().getRequest();\n    const user = request.user as JwtPayload;\n    return user.sub;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/match-player/entities/match-player.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MatchPlayerSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(MatchPlayer)\n                    \n                \n\n\n        \n    \n\n    src/match/entities/match.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MatchSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Match)\n                    \n                \n\n\n        \n    \n\n    src/message/entities/message.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MessageSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Message)\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata('isPublic', true)\n                    \n                \n\n\n        \n    \n\n    src/terrain/entities/terrain.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TerrainSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Terrain)\n                    \n                \n\n\n        \n    \n\n    src/user/entities/user.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
